{"0": {"type": "Text", "content": "{adosovitskiy, neilhoulsby}@google.com\n", "chunk": "{adosovitskiy, neilhoulsby}@google.com", "page": 0, "bbox": [558.9012451171875, 567.4343872070312, 1181.474365234375, 596.8495483398438]}, "1": {"type": "Text", "content": "While the Transformer architecture has become the de-facto standard for natural\nlanguage processing tasks, its applications to computer vision remain limited. In\nvision, attention is either applied in conjunction with convolutional networks, or\nused to replace certain components of convolutional networks while keeping their\noverall structure in place. We show that this reliance on CNNs is not necessary\nand a pure transformer applied directly to sequences of image patches can perform\nvery well on image classification tasks. When pre-trained on large amounts of\ndata and transferred to multiple mid-sized or small image recognition benchmarks\n(ImageNet, CIFAR-100, VTAB, etc.), Vision Transformer (ViT) attains excellent\nresults compared to state-of-the-art convolutional networks while requiring sub-\nstantially fewer computational resources to train.!\n", "chunk": "While the Transformer architecture has become the de-facto standard for natural\nlanguage processing tasks, its applications to computer vision remain limited.\n\nIn\nvision, attention is either applied in conjunction with convolutional networks, or\nused to replace certain components of convolutional networks while keeping their\noverall structure in place.\n\nWe show that this reliance on CNNs is not necessary\nand a pure transformer applied directly to sequences of image patches can perform\nvery well on image classification tasks.\n\nWhen pre-trained on large amounts of\ndata and transferred to multiple mid-sized or small image recognition benchmarks\n(ImageNet, CIFAR-100, VTAB, etc.\n\n), Vision Transformer (ViT) attains excellent\nresults compared to state-of-the-art convolutional networks while requiring sub-\nstantially fewer computational resources to train.\n\n!", "page": 0, "bbox": [394.4130859375, 746.5789184570312, 1302.3428955078125, 1086.92041015625]}, "2": {"type": "Text", "content": "Self-attention-based architectures, in particular Transformers (Vaswani et al., 2017), have become\nthe model of choice in natural language processing (NLP). The dominant approach is to pre-train on\na large text corpus and then fine-tune on a smaller task-specific dataset (Devlin et al., 2019). Thanks\nto Transformers\u2019 computational efficiency and scalability, it has become possible to train models of\nunprecedented size, with over 100B parameters (Brown et al., 2020; Lepikhin et al., 2020). With the\nmodels and datasets growing, there is still no sign of saturating performance.\n", "chunk": "Self-attention-based architectures, in particular Transformers (Vaswani et al., 2017), have become\nthe model of choice in natural language processing (NLP).\n\nThe dominant approach is to pre-train on\na large text corpus and then fine-tune on a smaller task-specific dataset (Devlin et al., 2019).\n\nThanks\nto Transformers\u2019 computational efficiency and scalability, it has become possible to train models of\nunprecedented size, with over 100B parameters (Brown et al., 2020; Lepikhin et al., 2020).\n\nWith the\nmodels and datasets growing, there is still no sign of saturating performance.", "page": 0, "bbox": [299.69964599609375, 1223.7197265625, 1401.86865234375, 1412.2447509765625]}, "3": {"type": "Text", "content": "In computer vision, however, convolutional architectures remain dominant (LeCun et al., 1989;\nKrizhevsky et al., 2012; He et al., 2016). Inspired by NLP successes, multiple works try combining\nCNN-like architectures with self-attention (Wang et al., 2018; Carion et al., 2020), some replacing\nthe convolutions entirely (Ramachandran et al., 2019; Wang et al., 2020a). The latter models, while\ntheoretically efficient, have not yet been scaled effectively on modern hardware accelerators due to\nthe use of specialized attention patterns. Therefore, in large-scale image recognition, classic ResNet-\nlike architectures are still state of the art (Mahajan et al., 2018; Xie et al., 2020; Kolesnikov et al.,\n2020).\n", "chunk": "In computer vision, however, convolutional architectures remain dominant (LeCun et al., 1989;\nKrizhevsky et al., 2012; He et al., 2016).\n\nInspired by NLP successes, multiple works try combining\nCNN-like architectures with self-attention (Wang et al., 2018; Carion et al., 2020), some replacing\nthe convolutions entirely (Ramachandran et al., 2019; Wang et al., 2020a).\n\nThe latter models, while\ntheoretically efficient, have not yet been scaled effectively on modern hardware accelerators due to\nthe use of specialized attention patterns.\n\nTherefore, in large-scale image recognition, classic ResNet-\nlike architectures are still state of the art (Mahajan et al., 2018; Xie et al., 2020; Kolesnikov et al.,\n2020).", "page": 0, "bbox": [303.58251953125, 1422.8336181640625, 1394.7333984375, 1671.193603515625]}, "4": {"type": "Text", "content": "Inspired by the Transformer scaling successes in NLP, we experiment with applying a standard\nTransformer directly to images, with the fewest possible modifications. To do so, we split an image\ninto patches and provide the sequence of linear embeddings of these patches as an input to a Trans-\nformer. Image patches are treated the same way as tokens (words) in an NLP application. We train\nthe model on image classification in supervised fashion.\n", "chunk": "Inspired by the Transformer scaling successes in NLP, we experiment with applying a standard\nTransformer directly to images, with the fewest possible modifications.\n\nTo do so, we split an image\ninto patches and provide the sequence of linear embeddings of these patches as an input to a Trans-\nformer.\n\nImage patches are treated the same way as tokens (words) in an NLP application.\n\nWe train\nthe model on image classification in supervised fashion.", "page": 0, "bbox": [299.5771484375, 1684.71337890625, 1397.6695556640625, 1837.021728515625]}, "5": {"type": "Text", "content": "When trained on mid-sized datasets such as ImageNet without strong regularization, these mod-\nels yield modest accuracies of a few percentage points below ResNets of comparable size. This\nseemingly discouraging outcome may be expected: Transformers lack some of the inductive biases\n", "chunk": "When trained on mid-sized datasets such as ImageNet without strong regularization, these mod-\nels yield modest accuracies of a few percentage points below ResNets of comparable size.\n\nThis\nseemingly discouraging outcome may be expected: Transformers lack some of the inductive biases", "page": 0, "bbox": [299.26690673828125, 1856.1700439453125, 1401.02490234375, 1954.592041015625]}, "6": {"type": "Text", "content": "'Fine-tuning code and pre-trained models are available at https://github.com/\ngoogle-research/vision_transformer\n", "chunk": "'Fine-tuning code and pre-trained models are available at https://github.com/\ngoogle-research/vision_transformer", "page": 0, "bbox": [285.8221740722656, 1976.931884765625, 1394.7626953125, 2033.881103515625]}, "7": {"type": "Title", "content": "INTRODUCTION\n", "chunk": "INTRODUCTION", "page": 0, "bbox": [343.007080078125, 1156.003662109375, 571.6935424804688, 1190.3125]}, "8": {"type": "Title", "content": "AN IMAGE IS WORTH 16X16 WORDS:\nTRANSFORMERS FOR IMAGE RECOGNITION AT SCALE\n", "chunk": "AN IMAGE IS WORTH 16X16 WORDS:\nTRANSFORMERS FOR IMAGE RECOGNITION AT SCALE", "page": 0, "bbox": [296.2627868652344, 224.02603149414062, 1409.1610107421875, 329.9570007324219]}, "9": {"type": "Text", "content": "inherent to CNNs, such as translation equivariance and locality, and therefore do not generalize well\nwhen trained on insufficient amounts of data.\n", "chunk": "inherent to CNNs, such as translation equivariance and locality, and therefore do not generalize well\nwhen trained on insufficient amounts of data.", "page": 1, "bbox": [297.0481872558594, 232.78652954101562, 1418.1612548828125, 292.9706115722656]}, "10": {"type": "Text", "content": "However, the picture changes if the models are trained on larger datasets (14M-300M images). We\nfind that large scale training trumps inductive bias. Our Vision Transformer (ViT) attains excellent\nresults when pre-trained at sufficient scale and transferred to tasks with fewer datapoints. When\npre-trained on the public ImageNet-21k dataset or the in-house JFT-300M dataset, ViT approaches\nor beats state of the art on multiple image recognition benchmarks. In particular, the best model\nreaches the accuracy of 88.55% on ImageNet, 90.72% on ImageNet-ReaL, 94.55% on CIFAR-100,\nand 77.63% on the VTAB suite of 19 tasks.\n", "chunk": "However, the picture changes if the models are trained on larger datasets (14M-300M images).\n\nWe\nfind that large scale training trumps inductive bias.\n\nOur Vision Transformer (ViT) attains excellent\nresults when pre-trained at sufficient scale and transferred to tasks with fewer datapoints.\n\nWhen\npre-trained on the public ImageNet-21k dataset or the in-house JFT-300M dataset, ViT approaches\nor beats state of the art on multiple image recognition benchmarks.\n\nIn particular, the best model\nreaches the accuracy of 88.55% on ImageNet, 90.72% on ImageNet-ReaL, 94.55% on CIFAR-100,\nand 77.63% on the VTAB suite of 19 tasks.", "page": 1, "bbox": [306.51556396484375, 308.9344787597656, 1405.1368408203125, 526.0833129882812]}, "11": {"type": "Text", "content": "Transformers were proposed by Vaswani et al. (2017) for machine translation, and have since be-\ncome the state of the art method in many NLP tasks. Large Transformer-based models are often\npre-trained on large corpora and then fine-tuned for the task at hand: BERT (Devlin et al., 2019)\nuses a denoising self-supervised pre-training task, while the GPT line of work uses language mod-\neling as its pre-training task (Radford et al., 2018; 2019; Brown et al., 2020).\n", "chunk": "Transformers were proposed by Vaswani et al.\n\n(2017) for machine translation, and have since be-\ncome the state of the art method in many NLP tasks.\n\nLarge Transformer-based models are often\npre-trained on large corpora and then fine-tuned for the task at hand: BERT (Devlin et al., 2019)\nuses a denoising self-supervised pre-training task, while the GPT line of work uses language mod-\neling as its pre-training task (Radford et al., 2018; 2019; Brown et al., 2020).", "page": 1, "bbox": [301.11700439453125, 733.4279174804688, 1399.597900390625, 888.9949340820312]}, "12": {"type": "Text", "content": "Naive application of self-attention to images would require that each pixel attends to every other\npixel. With quadratic cost in the number of pixels, this does not scale to realistic input sizes. Thus,\nto apply Transformers in the context of image processing, several approximations have been tried in\nthe past. Parmar et al. (2018) applied the self-attention only in local neighborhoods for each query\npixel instead of globally. Such local multi-head dot-product self attention blocks can completely\nreplace convolutions (Hu et al., 2019; Ramachandran et al., 2019; Zhao et al., 2020). In a different\nline of work, Sparse Transformers (Child et al., 2019) employ scalable approximations to global self-\nattention in order to be applicable to images. An alternative way to scale attention is to apply it in\nblocks of varying sizes (Weissenborn et al., 2019), in the extreme case only along individual axes (Ho\net al., 2019; Wang et al., 2020a). Many of these specialized attention architectures demonstrate\npromising results on computer vision tasks, but require complex engineering to be implemented\nefficiently on hardware accelerators.\n", "chunk": "Naive application of self-attention to images would require that each pixel attends to every other\npixel.\n\nWith quadratic cost in the number of pixels, this does not scale to realistic input sizes.\n\nThus,\nto apply Transformers in the context of image processing, several approximations have been tried in\nthe past.\n\nParmar et al.\n\n(2018) applied the self-attention only in local neighborhoods for each query\npixel instead of globally.\n\nSuch local multi-head dot-product self attention blocks can completely\nreplace convolutions (Hu et al., 2019; Ramachandran et al., 2019; Zhao et al., 2020).\n\nIn a different\nline of work, Sparse Transformers (Child et al., 2019) employ scalable approximations to global self-\nattention in order to be applicable to images.\n\nAn alternative way to scale attention is to apply it in\nblocks of varying sizes (Weissenborn et al., 2019), in the extreme case only along individual axes (Ho\net al., 2019; Wang et al., 2020a).", "page": 1, "bbox": [303.70391845703125, 890.9014892578125, 1410.692138671875, 1262.37744140625]}, "13": {"type": "Text", "content": "Naive application of self-attention to images would require that each pixel attends to every other\npixel. With quadratic cost in the number of pixels, this does not scale to realistic input sizes. Thus,\nto apply Transformers in the context of image processing, several approximations have been tried in\nthe past. Parmar et al. (2018) applied the self-attention only in local neighborhoods for each query\npixel instead of globally. Such local multi-head dot-product self attention blocks can completely\nreplace convolutions (Hu et al., 2019; Ramachandran et al., 2019; Zhao et al., 2020). In a different\nline of work, Sparse Transformers (Child et al., 2019) employ scalable approximations to global self-\nattention in order to be applicable to images. An alternative way to scale attention is to apply it in\nblocks of varying sizes (Weissenborn et al., 2019), in the extreme case only along individual axes (Ho\net al., 2019; Wang et al., 2020a). Many of these specialized attention architectures demonstrate\npromising results on computer vision tasks, but require complex engineering to be implemented\nefficiently on hardware accelerators.\n", "chunk": "Many of these specialized attention architectures demonstrate\npromising results on computer vision tasks, but require complex engineering to be implemented\nefficiently on hardware accelerators.", "page": 1, "bbox": [303.70391845703125, 890.9014892578125, 1410.692138671875, 1262.37744140625]}, "14": {"type": "Text", "content": "Most related to ours is the model of Cordonnier et al. (2020), which extracts patches of size 2 x 2\nfrom the input image and applies full self-attention on top. This model is very similar to ViT,\nbut our work goes further to demonstrate that large scale pre-training makes vanilla transformers\ncompetitive with (or even better than) state-of-the-art CNNs. Moreover, Cordonnier et al. (2020)\nuse a small patch size of 2 x 2 pixels, which makes the model applicable only to small-resolution\nimages, while we handle medium-resolution images as well.\n", "chunk": "Most related to ours is the model of Cordonnier et al.\n\n(2020), which extracts patches of size 2 x 2\nfrom the input image and applies full self-attention on top.\n\nThis model is very similar to ViT,\nbut our work goes further to demonstrate that large scale pre-training makes vanilla transformers\ncompetitive with (or even better than) state-of-the-art CNNs.\n\nMoreover, Cordonnier et al.\n\n(2020)\nuse a small patch size of 2 x 2 pixels, which makes the model applicable only to small-resolution\nimages, while we handle medium-resolution images as well.", "page": 1, "bbox": [305.9466247558594, 1284.3499755859375, 1397.7379150390625, 1464.916259765625]}, "15": {"type": "Text", "content": "There has also been a lot of interest in combining convolutional neural networks (CNNs) with forms\nof self-attention, e.g. by augmenting feature maps for image classification (Bello et al., 2019) or by\nfurther processing the output of a CNN using self-attention, e.g. for object detection (Hu et al., 2018;\nCarion et al., 2020), video processing (Wang et al., 2018; Sun et al., 2019), image classification (Wu\net al., 2020), unsupervised object discovery (Locatello et al., 2020), or unified text-vision tasks (Chen\net al., 2020c; Lu et al., 2019; Li et al., 2019).\n", "chunk": "There has also been a lot of interest in combining convolutional neural networks (CNNs) with forms\nof self-attention, e.g.\n\nby augmenting feature maps for image classification (Bello et al., 2019) or by\nfurther processing the output of a CNN using self-attention, e.g.\n\nfor object detection (Hu et al., 2018;\nCarion et al., 2020), video processing (Wang et al., 2018; Sun et al., 2019), image classification (Wu\net al., 2020), unsupervised object discovery (Locatello et al., 2020), or unified text-vision tasks (Chen\net al., 2020c; Lu et al., 2019; Li et al., 2019).", "page": 1, "bbox": [302.2693176269531, 1482.043212890625, 1401.04150390625, 1670.155517578125]}, "16": {"type": "Text", "content": "Another recent related model is image GPT (iGPT) (Chen et al., 2020a), which applies Transformers\nto image pixels after reducing image resolution and color space. The model is trained in an unsu-\npervised fashion as a generative model, and the resulting representation can then be fine-tuned or\nprobed linearly for classification performance, achieving a maximal accuracy of 72% on ImageNet.\n", "chunk": "Another recent related model is image GPT (iGPT) (Chen et al., 2020a), which applies Transformers\nto image pixels after reducing image resolution and color space.\n\nThe model is trained in an unsu-\npervised fashion as a generative model, and the resulting representation can then be fine-tuned or\nprobed linearly for classification performance, achieving a maximal accuracy of 72% on ImageNet.", "page": 1, "bbox": [293.7473449707031, 1679.6402587890625, 1407.135009765625, 1807.8177490234375]}, "17": {"type": "Text", "content": "Our work adds to the increasing collection of papers that explore image recognition at larger scales\nthan the standard ImageNet dataset. The use of additional data sources allows to achieve state-of-\nthe-art results on standard benchmarks (Mahajan et al., 2018; Touvron et al., 2019; Xie et al., 2020).\nMoreover, Sun et al. (2017) study how CNN performance scales with dataset size, and Kolesnikov\net al. (2020); Djolonga et al. (2020) perform an empirical exploration of CNN transfer learning from\nlarge scale datasets such as ImageNet-21k and JFT-300M. We focus on these two latter datasets as\nwell, but train Transformers instead of ResNet-based models used in prior works.\n", "chunk": "Our work adds to the increasing collection of papers that explore image recognition at larger scales\nthan the standard ImageNet dataset.\n\nThe use of additional data sources allows to achieve state-of-\nthe-art results on standard benchmarks (Mahajan et al., 2018; Touvron et al., 2019; Xie et al., 2020).\n\nMoreover, Sun et al.\n\n(2017) study how CNN performance scales with dataset size, and Kolesnikov\net al.\n\n(2020); Djolonga et al.\n\n(2020) perform an empirical exploration of CNN transfer learning from\nlarge scale datasets such as ImageNet-21k and JFT-300M.\n\nWe focus on these two latter datasets as\nwell, but train Transformers instead of ResNet-based models used in prior works.", "page": 1, "bbox": [300.60992431640625, 1818.3189697265625, 1399.284423828125, 2042.183837890625]}, "18": {"type": "Title", "content": "RELATED WORK\n", "chunk": "RELATED WORK", "page": 1, "bbox": [330.83380126953125, 628.6781616210938, 590.24072265625, 665.4181518554688]}, "19": {"type": "Text", "content": "Figure 1: Model overview. We split an image into fixed-size patches, linearly embed each of them,\nadd position embeddings, and feed the resulting sequence of vectors to a standard Transformer\nencoder. In order to perform classification, we use the standard approach of adding an extra learnable\n\u201cclassification token\u201d to the sequence. The illustration of the Transformer encoder was inspired by\nVaswani et al. (2017).\n", "chunk": "Figure 1: Model overview.\n\nWe split an image into fixed-size patches, linearly embed each of them,\nadd position embeddings, and feed the resulting sequence of vectors to a standard Transformer\nencoder.\n\nIn order to perform classification, we use the standard approach of adding an extra learnable\n\u201cclassification token\u201d to the sequence.\n\nThe illustration of the Transformer encoder was inspired by\nVaswani et al.\n\n(2017).", "page": 2, "bbox": [298.2052307128906, 732.6156616210938, 1400.2398681640625, 894.8108520507812]}, "20": {"type": "Text", "content": "n model design we follow the original Transformer (Vaswani et al., 2017) as closely as possible.\nAn advantage of this intentionally simple setup is that scalable NLP Transformer architectures \u2014 and\nheir efficient implementations \u2014 can be used almost out of the box.\n", "chunk": "n model design we follow the original Transformer (Vaswani et al., 2017) as closely as possible.\n\nAn advantage of this intentionally simple setup is that scalable NLP Transformer architectures \u2014 and\nheir efficient implementations \u2014 can be used almost out of the box.", "page": 2, "bbox": [311.0866394042969, 1097.1317138671875, 1401.644287109375, 1193.96240234375]}, "21": {"type": "Text", "content": "An overview of the model is depicted in Figure 1. The standard Transformer receives as input a 1D\nsequence of token embeddings. To handle 2D images, we reshape the image x \u20ac R?*\"*C into a\nsequence of flattened 2D patches x, \u20ac RN*x(P*-C), where (H, W) is the resolution of the original\nimage, C is the number of channels, (P, P) is the resolution of each image patch, and N = HW/P?\nis the resulting number of patches, which also serves as the effective input sequence length for the\nTransformer. The Transformer uses constant latent vector size D through all of its layers, so we\nflatten the patches and map to D dimensions with a trainable linear projection (Eq. 1). We refer to\nthe output of this projection as the patch embeddings.\n", "chunk": "An overview of the model is depicted in Figure 1.\n\nThe standard Transformer receives as input a 1D\nsequence of token embeddings.\n\nTo handle 2D images, we reshape the image x \u20ac R?\n\n*\"*C into a\nsequence of flattened 2D patches x, \u20ac RN*x(P*-C), where (H, W) is the resolution of the original\nimage, C is the number of channels, (P, P) is the resolution of each image patch, and N = HW/P?\n\nis the resulting number of patches, which also serves as the effective input sequence length for the\nTransformer.\n\nThe Transformer uses constant latent vector size D through all of its layers, so we\nflatten the patches and map to D dimensions with a trainable linear projection (Eq.\n\n1).\n\nWe refer to\nthe output of this projection as the patch embeddings.", "page": 2, "bbox": [292.84619140625, 1361.54638671875, 1399.117919921875, 1621.5]}, "22": {"type": "Text", "content": "Similar to BERT\u2019s [class] token, we prepend a learnable embedding to the sequence of embed-\nded patches (20 = Xclass), Whose state at the output of the Transformer encoder (CAD) serves as the\nimage representation y (Eq. 4). Both during pre-training and fine-tuning, a classification head is at-\ntached to z?.. The classification head is implemented by a MLP with one hidden layer at pre-training\ntime and by a single linear layer at fine-tuning time.\n", "chunk": "Similar to BERT\u2019s [class] token, we prepend a learnable embedding to the sequence of embed-\nded patches (20 = Xclass), Whose state at the output of the Transformer encoder (CAD) serves as the\nimage representation y (Eq.\n\n4).\n\nBoth during pre-training and fine-tuning, a classification head is at-\ntached to z?..\n\nThe classification head is implemented by a MLP with one hidden layer at pre-training\ntime and by a single linear layer at fine-tuning time.", "page": 2, "bbox": [296.7657775878906, 1634.37548828125, 1401.5657958984375, 1788.539306640625]}, "23": {"type": "Text", "content": "Position embeddings are added to the patch embeddings to retain positional information. We use\nstandard learnable 1D position embeddings, since we have not observed significant performance\ngains from using more advanced 2D-aware position embeddings (Appendix D.4). The resulting\nsequence of embedding vectors serves as input to the encoder.\n", "chunk": "Position embeddings are added to the patch embeddings to retain positional information.\n\nWe use\nstandard learnable 1D position embeddings, since we have not observed significant performance\ngains from using more advanced 2D-aware position embeddings (Appendix D.4).\n\nThe resulting\nsequence of embedding vectors serves as input to the encoder.", "page": 2, "bbox": [295.0185241699219, 1805.7003173828125, 1409.3924560546875, 1929.561279296875]}, "24": {"type": "Text", "content": "The Transformer encoder (Vaswani et al., 2017) consists of alternating layers of multiheaded self-\nattention (MSA, see Appendix A) and MLP blocks (Eq. 2, 3). Layernorm (LN) is applied before\nevery block, and residual connections after every block (Wang et al., 2019; Baevski & Auli, 2019).\n", "chunk": "The Transformer encoder (Vaswani et al., 2017) consists of alternating layers of multiheaded self-\nattention (MSA, see Appendix A) and MLP blocks (Eq.\n\n2, 3).\n\nLayernorm (LN) is applied before\nevery block, and residual connections after every block (Wang et al., 2019; Baevski & Auli, 2019).", "page": 2, "bbox": [295.8144836425781, 1942.7457275390625, 1405.68701171875, 2035.9400634765625]}, "25": {"type": "Title", "content": "}.1 VISION TRANSFORMER (VIT)\n", "chunk": "}.1 VISION TRANSFORMER (VIT)", "page": 2, "bbox": [314.5367736816406, 1288.440673828125, 719.3093872070312, 1321.73193359375]}, "26": {"type": "Figure", "content": "Vision Transformer (ViT) Transformer Encode\n\nLx\nMLP\nNorm\n\nTransformer Encoder\n\n:\ni]\n1\nI\n1\nI\nC I\ni]\n7 \\\n\nPatch + Pi i]\n\n\\\nI\n1\ni]\n1\n,\n\n[class] embedding \u2014 a r \u2014 \u2014\n\na _ donne dod \u2014-\u2014\ngas Embedded\n\nPatches\n\n", "chunk": "Vision Transformer (ViT) Transformer Encode\n\nLx\nMLP\nNorm\n\nTransformer Encoder\n\n:\ni]\n1\nI\n1\nI\nC I\ni]\n7 \\\n\nPatch + Pi i]\n\n\\\nI\n1\ni]\n1\n,\n\n[class] embedding \u2014 a r \u2014 \u2014\n\na _ donne dod \u2014-\u2014\ngas Embedded\n\nPatches", "page": 2, "bbox": [406.3650817871094, 186.50482177734375, 1286.098388671875, 698.2489013671875]}, "27": {"type": "Text", "content": "The MLP contains two layers with a GELU non-linearity.\n", "chunk": "The MLP contains two layers with a GELU non-linearity.", "page": 3, "bbox": [297.3045959472656, 233.1939697265625, 942.4744262695312, 263.1510314941406]}, "28": {"type": "Text", "content": "Inductive bias. We note that Vision Transformer has much less image-specific inductive bias than\nCNNs. In CNNs, locality, two-dimensional neighborhood structure, and translation equivariance are\nbaked into each layer throughout the whole model. In ViT, only MLP layers are local and transla-\ntionally equivariant, while the self-attention layers are global. The two-dimensional neighborhood\nstructure is used very sparingly: in the beginning of the model by cutting the image into patches and\nat fine-tuning time for adjusting the position embeddings for images of different resolution (as de-\nscribed below). Other than that, the position embeddings at initialization time carry no information\nabout the 2D positions of the patches and all spatial relations between the patches have to be learned\nfrom scratch.\n", "chunk": "Inductive bias.\n\nWe note that Vision Transformer has much less image-specific inductive bias than\nCNNs.\n\nIn CNNs, locality, two-dimensional neighborhood structure, and translation equivariance are\nbaked into each layer throughout the whole model.\n\nIn ViT, only MLP layers are local and transla-\ntionally equivariant, while the self-attention layers are global.\n\nThe two-dimensional neighborhood\nstructure is used very sparingly: in the beginning of the model by cutting the image into patches and\nat fine-tuning time for adjusting the position embeddings for images of different resolution (as de-\nscribed below).\n\nOther than that, the position embeddings at initialization time carry no information\nabout the 2D positions of the patches and all spatial relations between the patches have to be learned\nfrom scratch.", "page": 3, "bbox": [297.589111328125, 476.5500793457031, 1403.140869140625, 749.5263061523438]}, "29": {"type": "Text", "content": "Hybrid Architecture. As an alternative to raw image patches, the input sequence can be formed\nfrom feature maps of a CNN (LeCun et al., 1989). In this hybrid model, the patch embedding\nprojection E (Eq. 1) is applied to patches extracted from a CNN feature map. As a special case,\nthe patches can have spatial size 1x1, which means that the input sequence is obtained by simply\nflattening the spatial dimensions of the feature map and projecting to the Transformer dimension.\nThe classification input embedding and position embeddings are added as described above.\n", "chunk": "Hybrid Architecture.\n\nAs an alternative to raw image patches, the input sequence can be formed\nfrom feature maps of a CNN (LeCun et al., 1989).\n\nIn this hybrid model, the patch embedding\nprojection E (Eq.\n\n1) is applied to patches extracted from a CNN feature map.\n\nAs a special case,\nthe patches can have spatial size 1x1, which means that the input sequence is obtained by simply\nflattening the spatial dimensions of the feature map and projecting to the Transformer dimension.\n\nThe classification input embedding and position embeddings are added as described above.", "page": 3, "bbox": [303.16436767578125, 793.3269653320312, 1398.170654296875, 971.5714111328125]}, "30": {"type": "Text", "content": "Typically, we pre-train ViT on large datasets, and fine-tune to (smaller) downstream tasks. For\nthis, we remove the pre-trained prediction head and attach a zero-initialized D x K feedforward\nlayer, where K is the number of downstream classes. It is often beneficial to fine-tune at higher\nresolution than pre-training (Touvron et al., 2019; Kolesnikov et al., 2020). When feeding images\nof higher resolution, we keep the patch size the same, which results in a larger effective sequence\nlength. The Vision Transformer can handle arbitrary sequence lengths (up to memory constraints),\nhowever, the pre-trained position embeddings may no longer be meaningful. We therefore perform\n2D interpolation of the pre-trained position embeddings, according to their location in the original\nimage. Note that this resolution adjustment and patch extraction are the only points at which an\ninductive bias about the 2D structure of the images is manually injected into the Vision Transformer.\n", "chunk": "Typically, we pre-train ViT on large datasets, and fine-tune to (smaller) downstream tasks.\n\nFor\nthis, we remove the pre-trained prediction head and attach a zero-initialized D x K feedforward\nlayer, where K is the number of downstream classes.\n\nIt is often beneficial to fine-tune at higher\nresolution than pre-training (Touvron et al., 2019; Kolesnikov et al., 2020).\n\nWhen feeding images\nof higher resolution, we keep the patch size the same, which results in a larger effective sequence\nlength.\n\nThe Vision Transformer can handle arbitrary sequence lengths (up to memory constraints),\nhowever, the pre-trained position embeddings may no longer be meaningful.\n\nWe therefore perform\n2D interpolation of the pre-trained position embeddings, according to their location in the original\nimage.\n\nNote that this resolution adjustment and patch extraction are the only points at which an\ninductive bias about the 2D structure of the images is manually injected into the Vision Transformer.", "page": 3, "bbox": [297.8885192871094, 1059.15576171875, 1407.7777099609375, 1373.30712890625]}, "31": {"type": "Text", "content": "We evaluate the representation learning capabilities of ResNet, Vision Transformer (ViT), and the\nhybrid. To understand the data requirements of each model, we pre-train on datasets of varying size\nand evaluate many benchmark tasks. When considering the computational cost of pre-training the\nmodel, ViT performs very favourably, attaining state of the art on most recognition benchmarks at\na lower pre-training cost. Lastly, we perform a small experiment using self-supervision, and show\nthat self-supervised ViT holds promise for the future.\n", "chunk": "We evaluate the representation learning capabilities of ResNet, Vision Transformer (ViT), and the\nhybrid.\n\nTo understand the data requirements of each model, we pre-train on datasets of varying size\nand evaluate many benchmark tasks.\n\nWhen considering the computational cost of pre-training the\nmodel, ViT performs very favourably, attaining state of the art on most recognition benchmarks at\na lower pre-training cost.\n\nLastly, we perform a small experiment using self-supervision, and show\nthat self-supervised ViT holds promise for the future.", "page": 3, "bbox": [299.4459533691406, 1479.2294921875, 1404.611572265625, 1669.601806640625]}, "32": {"type": "Text", "content": "Datasets. To explore model scalability, we use the ILSVRC-2012 ImageNet dataset with 1k classes\nand 1.3M images (we refer to it as ImageNet in what follows), its superset ImageNet-21k with\n21k classes and 14M images (Deng et al., 2009), and JFT (Sun et al., 2017) with 18k classes and\n303M high-resolution images. We de-duplicate the pre-training datasets w.r.t. the test sets of the\ndownstream tasks following Kolesnikov et al. (2020). We transfer the models trained on these\ndataset to several benchmark tasks: ImageNet on the original validation labels and the cleaned-up\nReaL labels (Beyer et al., 2020), CIFAR-10/100 (Krizhevsky, 2009), Oxford-IIIT Pets (Parkhi et al.,\n2012), and Oxford Flowers-102 (Nilsback & Zisserman, 2008). For these datasets, pre-processing\nfollows Kolesnikov et al. (2020).\n", "chunk": "Datasets.\n\nTo explore model scalability, we use the ILSVRC-2012 ImageNet dataset with 1k classes\nand 1.3M images (we refer to it as ImageNet in what follows), its superset ImageNet-21k with\n21k classes and 14M images (Deng et al., 2009), and JFT (Sun et al., 2017) with 18k classes and\n303M high-resolution images.\n\nWe de-duplicate the pre-training datasets w.r.t.\n\nthe test sets of the\ndownstream tasks following Kolesnikov et al.\n\n(2020).\n\nWe transfer the models trained on these\ndataset to several benchmark tasks: ImageNet on the original validation labels and the cleaned-up\nReaL labels (Beyer et al., 2020), CIFAR-10/100 (Krizhevsky, 2009), Oxford-IIIT Pets (Parkhi et al.,\n2012), and Oxford Flowers-102 (Nilsback & Zisserman, 2008).", "page": 3, "bbox": [305.16485595703125, 1756.924560546875, 1400.248046875, 2031.591064453125]}, "33": {"type": "Text", "content": "Datasets. To explore model scalability, we use the ILSVRC-2012 ImageNet dataset with 1k classes\nand 1.3M images (we refer to it as ImageNet in what follows), its superset ImageNet-21k with\n21k classes and 14M images (Deng et al., 2009), and JFT (Sun et al., 2017) with 18k classes and\n303M high-resolution images. We de-duplicate the pre-training datasets w.r.t. the test sets of the\ndownstream tasks following Kolesnikov et al. (2020). We transfer the models trained on these\ndataset to several benchmark tasks: ImageNet on the original validation labels and the cleaned-up\nReaL labels (Beyer et al., 2020), CIFAR-10/100 (Krizhevsky, 2009), Oxford-IIIT Pets (Parkhi et al.,\n2012), and Oxford Flowers-102 (Nilsback & Zisserman, 2008). For these datasets, pre-processing\nfollows Kolesnikov et al. (2020).\n", "chunk": "For these datasets, pre-processing\nfollows Kolesnikov et al.\n\n(2020).", "page": 3, "bbox": [305.16485595703125, 1756.924560546875, 1400.248046875, 2031.591064453125]}, "34": {"type": "Title", "content": "}.2 FINE-TUNING AND HIGHER RESOLUTION\n", "chunk": "}.2 FINE-TUNING AND HIGHER RESOLUTION", "page": 3, "bbox": [315.1082763671875, 1006.828125, 858.719482421875, 1041.3419189453125]}, "35": {"type": "Title", "content": "Hybrid Architecture.\n", "chunk": "Hybrid Architecture.", "page": 3, "bbox": [297.5550231933594, 786.8626098632812, 555.0343017578125, 818.7116088867188]}, "36": {"type": "Title", "content": "EXPERIMENTS\n", "chunk": "EXPERIMENTS", "page": 3, "bbox": [345.044677734375, 1417.9842529296875, 556.9210815429688, 1449.3145751953125]}, "37": {"type": "Figure", "content": "he MLP contains two layers with a GELU non-linearity.\n\nZo = [Xetas3 XHE; x2E;--- xB) + Epos, Ee ROP'O*? By. ERO EDXP\nZy= MSA(LN(ze_1)) + Ze-1, \u20ac=1...L\nze = MLP(LN(z\u2019:)) + 2\u2019\u00a2, f=1...L\n\ny = LN(@zi)\n", "chunk": "he MLP contains two layers with a GELU non-linearity.\n\nZo = [Xetas3 XHE; x2E;--- xB) + Epos, Ee ROP'O*?\n\nBy.\n\nERO EDXP\nZy= MSA(LN(ze_1)) + Ze-1, \u20ac=1...L\nze = MLP(LN(z\u2019:)) + 2\u2019\u00a2, f=1...L\n\ny = LN(@zi)", "page": 3, "bbox": [323.55792236328125, 216.83433532714844, 1381.494384765625, 449.6582946777344]}, "38": {"type": "Text", "content": "We also evaluate on the 19-task VTAB classification suite (Zhai et al., 2019b). WTAB evaluates\nlow-data transfer to diverse tasks, using 1 000 training examples per task. The tasks are divided into\nthree groups: Natural \u2014 tasks like the above, Pets, CIFAR, etc. Specialized \u2014 medical and satellite\nimagery, and Structured \u2014 tasks that require geometric understanding like localization.\n", "chunk": "We also evaluate on the 19-task VTAB classification suite (Zhai et al., 2019b).\n\nWTAB evaluates\nlow-data transfer to diverse tasks, using 1 000 training examples per task.\n\nThe tasks are divided into\nthree groups: Natural \u2014 tasks like the above, Pets, CIFAR, etc.\n\nSpecialized \u2014 medical and satellite\nimagery, and Structured \u2014 tasks that require geometric understanding like localization.", "page": 4, "bbox": [302.3096618652344, 482.2149658203125, 1401.1441650390625, 606.1834716796875]}, "39": {"type": "Text", "content": "Model Variants. We base ViT configurations on those used for BERT (Devlin et al., 2019), as\nsummarized in Table 1. The \u201cBase\u201d and \u201cLarge\u201d models are directly adopted from BERT and we\nadd the larger \u201cHuge\u201d model. In what follows we use brief notation to indicate the model size and\nthe input patch size: for instance, ViT-L/16 means the \u201cLarge\u201d variant with 16 x 16 input patch size.\nNote that the Transformer\u2019s sequence length is inversely proportional to the square of the patch size,\nthus models with smaller patch size are computationally more expensive.\n", "chunk": "Model Variants.\n\nWe base ViT configurations on those used for BERT (Devlin et al., 2019), as\nsummarized in Table 1.\n\nThe \u201cBase\u201d and \u201cLarge\u201d models are directly adopted from BERT and we\nadd the larger \u201cHuge\u201d model.\n\nIn what follows we use brief notation to indicate the model size and\nthe input patch size: for instance, ViT-L/16 means the \u201cLarge\u201d variant with 16 x 16 input patch size.\n\nNote that the Transformer\u2019s sequence length is inversely proportional to the square of the patch size,\nthus models with smaller patch size are computationally more expensive.", "page": 4, "bbox": [299.8524169921875, 616.8422241210938, 1404.500244140625, 803.1630249023438]}, "40": {"type": "Text", "content": "For the baseline CNNs, we use ResNet (He et al., 2016), but replace the Batch Normalization lay-\ners (loffe & Szegedy, 2015) with Group Normalization (Wu & He, 2018), and used standardized\nconvolutions (Qiao et al., 2019). These modifications improve transfer (Kolesnikov et al., 2020),\nand we denote the modified model \u201cResNet (BiT)\u201d. For the hybrids, we feed the intermediate fea-\nture maps into ViT with patch size of one \u201cpixel\u201d. To experiment with different sequence lengths,\nwe either (i) take the output of stage 4 of a regular ResNet50 or (ii) remove stage 4, place the same\nnumber of layers in stage 3 (keeping the total number of layers), and take the output of this extended\nstage 3. Option (ii) results in a 4x longer sequence length, and a more expensive ViT model.\n", "chunk": "For the baseline CNNs, we use ResNet (He et al., 2016), but replace the Batch Normalization lay-\ners (loffe & Szegedy, 2015) with Group Normalization (Wu & He, 2018), and used standardized\nconvolutions (Qiao et al., 2019).\n\nThese modifications improve transfer (Kolesnikov et al., 2020),\nand we denote the modified model \u201cResNet (BiT)\u201d.\n\nFor the hybrids, we feed the intermediate fea-\nture maps into ViT with patch size of one \u201cpixel\u201d.\n\nTo experiment with different sequence lengths,\nwe either (i) take the output of stage 4 of a regular ResNet50 or (ii) remove stage 4, place the same\nnumber of layers in stage 3 (keeping the total number of layers), and take the output of this extended\nstage 3.\n\nOption (ii) results in a 4x longer sequence length, and a more expensive ViT model.", "page": 4, "bbox": [299.8164978027344, 813.7153930664062, 1404.6732177734375, 1066.510009765625]}, "41": {"type": "Text", "content": "Training & Fine-tuning. We train all models, including ResNets, using Adam (Kingma & Ba,\n2015) with 6; = 0.9, B2 = 0.999, a batch size of 4096 and apply a high weight decay of 0.1, which\nwe found to be useful for transfer of all models (Appendix D.1 shows that, in contrast to common\npractices, Adam works slightly better than SGD for ResNets in our setting). We use a linear learning\nrate warmup and decay, see Appendix B.1 for details. For fine-tuning we use SGD with momentum,\nbatch size 512, for all models, see Appendix B.1.1. For ImageNet results in Table 2, we fine-tuned at\nhigher resolution: 512 for ViT-L/16 and 518 for ViT-H/14, and also used Polyak & Juditsky (1992)\naveraging with a factor of 0.9999 (Ramachandran et al., 2019; Wang et al., 2020b).\n", "chunk": "Training & Fine-tuning.\n\nWe train all models, including ResNets, using Adam (Kingma & Ba,\n2015) with 6; = 0.9, B2 = 0.999, a batch size of 4096 and apply a high weight decay of 0.1, which\nwe found to be useful for transfer of all models (Appendix D.1 shows that, in contrast to common\npractices, Adam works slightly better than SGD for ResNets in our setting).\n\nWe use a linear learning\nrate warmup and decay, see Appendix B.1 for details.\n\nFor fine-tuning we use SGD with momentum,\nbatch size 512, for all models, see Appendix B.1.1.", "page": 4, "bbox": [298.05810546875, 1077.140380859375, 1401.2149658203125, 1327.56005859375]}, "42": {"type": "Text", "content": "Training & Fine-tuning. We train all models, including ResNets, using Adam (Kingma & Ba,\n2015) with 6; = 0.9, B2 = 0.999, a batch size of 4096 and apply a high weight decay of 0.1, which\nwe found to be useful for transfer of all models (Appendix D.1 shows that, in contrast to common\npractices, Adam works slightly better than SGD for ResNets in our setting). We use a linear learning\nrate warmup and decay, see Appendix B.1 for details. For fine-tuning we use SGD with momentum,\nbatch size 512, for all models, see Appendix B.1.1. For ImageNet results in Table 2, we fine-tuned at\nhigher resolution: 512 for ViT-L/16 and 518 for ViT-H/14, and also used Polyak & Juditsky (1992)\naveraging with a factor of 0.9999 (Ramachandran et al., 2019; Wang et al., 2020b).\n", "chunk": "For ImageNet results in Table 2, we fine-tuned at\nhigher resolution: 512 for ViT-L/16 and 518 for ViT-H/14, and also used Polyak & Juditsky (1992)\naveraging with a factor of 0.9999 (Ramachandran et al., 2019; Wang et al., 2020b).", "page": 4, "bbox": [298.05810546875, 1077.140380859375, 1401.2149658203125, 1327.56005859375]}, "43": {"type": "Text", "content": "Metrics. We report results on downstream datasets either through few-shot or fine-tuning accuracy\nFine-tuning accuracies capture the performance of each model after fine-tuning it on the respective\ndataset. Few-shot accuracies are obtained by solving a regularized least-squares regression probler\nthat maps the (frozen) representation of a subset of training images to {\u20141, 1} target vectors. This\nformulation allows us to recover the exact solution in closed form. Though we mainly focus or\n\nfine-tuning performance, we sometimes use linear few-shot accuracies for fast on-the-fly evaluatior\nwhere fine-tuning would be too costly.\n", "chunk": "Metrics.\n\nWe report results on downstream datasets either through few-shot or fine-tuning accuracy\nFine-tuning accuracies capture the performance of each model after fine-tuning it on the respective\ndataset.\n\nFew-shot accuracies are obtained by solving a regularized least-squares regression probler\nthat maps the (frozen) representation of a subset of training images to {\u20141, 1} target vectors.\n\nThis\nformulation allows us to recover the exact solution in closed form.\n\nThough we mainly focus or\n\nfine-tuning performance, we sometimes use linear few-shot accuracies for fast on-the-fly evaluatior\nwhere fine-tuning would be too costly.", "page": 4, "bbox": [300.5799865722656, 1336.404541015625, 1391.468994140625, 1553.8367919921875]}, "44": {"type": "Text", "content": "We first compare our largest models \u2014 ViT-H/14 and ViT-L/16 \u2014 to state-of-the-art CNNs from\nthe literature. The first comparison point is Big Transfer (BiT) (Kolesnikov et al., 2020), which\nperforms supervised transfer learning with large ResNets. The second is Noisy Student (Xie et al.,\n2020), which is a large EfficientNet trained using semi-supervised learning on ImageNet and JFT-\n300M with the labels removed. Currently, Noisy Student is the state of the art on ImageNet and\nBiT-L on the other datasets reported here. All models were trained on TPUv3 hardware, and we\nreport the number of TPUv3-core-days taken to pre-train each of them, that is, the number of TPU\nv3 cores (2 per chip) used for training multiplied by the training time in days.\n", "chunk": "We first compare our largest models \u2014 ViT-H/14 and ViT-L/16 \u2014 to state-of-the-art CNNs from\nthe literature.\n\nThe first comparison point is Big Transfer (BiT) (Kolesnikov et al., 2020), which\nperforms supervised transfer learning with large ResNets.\n\nThe second is Noisy Student (Xie et al.,\n2020), which is a large EfficientNet trained using semi-supervised learning on ImageNet and JFT-\n300M with the labels removed.\n\nCurrently, Noisy Student is the state of the art on ImageNet and\nBiT-L on the other datasets reported here.\n\nAll models were trained on TPUv3 hardware, and we\nreport the number of TPUv3-core-days taken to pre-train each of them, that is, the number of TPU\nv3 cores (2 per chip) used for training multiplied by the training time in days.", "page": 4, "bbox": [294.8798828125, 1649.53955078125, 1403.2611083984375, 1899.675048828125]}, "45": {"type": "Text", "content": "Table 2 shows the results. The smaller ViT-L/16 model pre-trained on JFT-300M outperforms BiT-L\n(which is pre-trained on the same dataset) on all tasks, while requiring substantially less computa-\ntional resources to train. The larger model, ViT-H/14, further improves the performance, especially\non the more challenging datasets \u2014 ImageNet, CIFAR-100, and the VTAB suite. Interestingly, this\n", "chunk": "Table 2 shows the results.\n\nThe smaller ViT-L/16 model pre-trained on JFT-300M outperforms BiT-L\n(which is pre-trained on the same dataset) on all tasks, while requiring substantially less computa-\ntional resources to train.\n\nThe larger model, ViT-H/14, further improves the performance, especially\non the more challenging datasets \u2014 ImageNet, CIFAR-100, and the VTAB suite.\n\nInterestingly, this", "page": 4, "bbox": [298.77545166015625, 1913.5302734375, 1408.7840576171875, 2036.3819580078125]}, "46": {"type": "Title", "content": ".2. COMPARISON TO STATE OF THE ART\n", "chunk": ".2.\n\nCOMPARISON TO STATE OF THE ART", "page": 4, "bbox": [318.32379150390625, 1595.4542236328125, 799.5458984375, 1628.8240966796875]}, "47": {"type": "Table", "content": "Model Layers Hidden sizeD MLPsize Heads Params\n\nViT-Base 12 768 3072 12 86M\nViT-Large 24 1024 4096 16 307M\nViT-Huge 32 1280 5120 16 632M\n\n", "chunk": "Model Layers Hidden sizeD MLPsize Heads Params\n\nViT-Base 12 768 3072 12 86M\nViT-Large 24 1024 4096 16 307M\nViT-Huge 32 1280 5120 16 632M", "page": 4, "bbox": [478.477294921875, 226.56399536132812, 1218.5491943359375, 368.50604248046875]}, "48": {"type": "Text", "content": "Table 2: Comparison with state of the art on popular image classification benchmarks. We re-\nport mean and standard deviation of the accuracies, averaged over three fine-tuning runs. Vision\nTransformer models pre-trained on the JFT-300M dataset outperform ResNet-based baselines on all\ndatasets, while taking substantially less computational resources to pre-train. ViT pre-trained on the\nsmaller public ImageNet-21k dataset performs well too. *Slightly improved 88.5% result reported\nin Touvron et al. (2020).\n", "chunk": "Table 2: Comparison with state of the art on popular image classification benchmarks.\n\nWe re-\nport mean and standard deviation of the accuracies, averaged over three fine-tuning runs.\n\nVision\nTransformer models pre-trained on the JFT-300M dataset outperform ResNet-based baselines on all\ndatasets, while taking substantially less computational resources to pre-train.\n\nViT pre-trained on the\nsmaller public ImageNet-21k dataset performs well too.\n\n*Slightly improved 88.5% result reported\nin Touvron et al.\n\n(2020).", "page": 5, "bbox": [305.31329345703125, 569.2103271484375, 1400.7635498046875, 758.37451171875]}, "49": {"type": "Text", "content": "model still took substantially less compute to pre-train than prior state of the art. However, we note\nthat pre-training efficiency may be affected not only by the architecture choice, but also other pa-\nrameters, such as training schedule, optimizer, weight decay, etc. We provide a controlled study of\nperformance vs. compute for different architectures in Section 4.4. Finally, the ViT-L/16 model\npre-trained on the public ImageNet-21k dataset performs well on most datasets too, while taking\nfewer resources to pre-train: it could be trained using a standard cloud TPUv3 with 8 cores in ap-\nproximately 30 days.\n", "chunk": "model still took substantially less compute to pre-train than prior state of the art.\n\nHowever, we note\nthat pre-training efficiency may be affected not only by the architecture choice, but also other pa-\nrameters, such as training schedule, optimizer, weight decay, etc.\n\nWe provide a controlled study of\nperformance vs. compute for different architectures in Section 4.4.\n\nFinally, the ViT-L/16 model\npre-trained on the public ImageNet-21k dataset performs well on most datasets too, while taking\nfewer resources to pre-train: it could be trained using a standard cloud TPUv3 with 8 cores in ap-\nproximately 30 days.", "page": 5, "bbox": [305.191650390625, 1145.5047607421875, 1401.93115234375, 1362.623046875]}, "50": {"type": "Text", "content": "Figure 2 decomposes the VTAB tasks into their respective groups, and compares to previous SOTA\nmethods on this benchmark: BiT, VIVI\u2014a ResNet co-trained on ImageNet and Youtube (Tschannen\net al., 2020), and S4L \u2014 supervised plus semi-supervised learning on ImageNet (Zhai et al., 2019a).\nViT-H/14 outperforms BiT-R152x4, and other methods, on the Natural and Structured tasks. On the\nSpecialized the performance of the top two models is similar.\n", "chunk": "Figure 2 decomposes the VTAB tasks into their respective groups, and compares to previous SOTA\nmethods on this benchmark: BiT, VIVI\u2014a ResNet co-trained on ImageNet and Youtube (Tschannen\net al., 2020), and S4L \u2014 supervised plus semi-supervised learning on ImageNet (Zhai et al., 2019a).\n\nViT-H/14 outperforms BiT-R152x4, and other methods, on the Natural and Structured tasks.\n\nOn the\nSpecialized the performance of the top two models is similar.", "page": 5, "bbox": [305.6623229980469, 1380.654052734375, 1408.5546875, 1535.2694091796875]}, "51": {"type": "Text", "content": "The Vision Transformer performs well when pre-trained on a large JFT-300M dataset. With fewer\ninductive biases for vision than ResNets, how crucial is the dataset size? We perform two series of\nexperiments.\n", "chunk": "The Vision Transformer performs well when pre-trained on a large JFT-300M dataset.\n\nWith fewer\ninductive biases for vision than ResNets, how crucial is the dataset size?\n\nWe perform two series of\nexperiments.", "page": 5, "bbox": [304.53387451171875, 1629.2569580078125, 1402.927734375, 1723.8128662109375]}, "52": {"type": "Text", "content": "First, we pre-train ViT models on datasets of increasing size: ImageNet, ImageNet-21k, and JFT-\n300M. To boost the performance on the smaller datasets, we optimize three basic regularization\nparameters \u2014 weight decay, dropout, and label smoothing. Figure 3 shows the results after fine-\ntuning to ImageNet (results on other datasets are shown in Table 5)\u2019. When pre-trained on the\nsmallest dataset, ImageNet, ViT-Large models underperform compared to ViT-Base models, despite\n(moderate) regularization. With ImageNet-21k pre-training, their performances are similar. Only\nwith JFT-300M, do we see the full benefit of larger models. Figure 3 also shows the performance\n", "chunk": "First, we pre-train ViT models on datasets of increasing size: ImageNet, ImageNet-21k, and JFT-\n300M.\n\nTo boost the performance on the smaller datasets, we optimize three basic regularization\nparameters \u2014 weight decay, dropout, and label smoothing.\n\nFigure 3 shows the results after fine-\ntuning to ImageNet (results on other datasets are shown in Table 5)\u2019.\n\nWhen pre-trained on the\nsmallest dataset, ImageNet, ViT-Large models underperform compared to ViT-Base models, despite\n(moderate) regularization.\n\nWith ImageNet-21k pre-training, their performances are similar.\n\nOnly\nwith JFT-300M, do we see the full benefit of larger models.\n\nFigure 3 also shows the performance", "page": 5, "bbox": [300.9099426269531, 1737.0577392578125, 1403.4168701171875, 1958.9293212890625]}, "53": {"type": "Text", "content": ">Note that the ImageNet pre-trained models are also fine-tuned, but again on ImageNet. This is because the\nresolution increase during fine-tuning improves the performance.\n", "chunk": ">Note that the ImageNet pre-trained models are also fine-tuned, but again on ImageNet.\n\nThis is because the\nresolution increase during fine-tuning improves the performance.", "page": 5, "bbox": [305.5257568359375, 1974.988525390625, 1396.9827880859375, 2032.6920166015625]}, "54": {"type": "Title", "content": "|.3. PRE-TRAINING DATA REQUIREMENTS\n", "chunk": "|.3.\n\nPRE-TRAINING DATA REQUIREMENTS", "page": 5, "bbox": [313.9588928222656, 1574.492431640625, 814.69873046875, 1606.2252197265625]}, "55": {"type": "Table", "content": "Ours-JFT Ours-JFT Ours-I21k BiT-L Noisy Student\n\n(ViT-H/14) \u2014 (ViT-L/16) \u2014 (ViT-L/16)  (ResNet152x4) _(EfficientNet-L2)\nImageNet 88.55+0.04 87.76+0.03 85.30 40.02 87.54 + 0.02 88.4/88.5*\nImageNet ReaL 90.72+0.05 90.54+0.03 88.62 40.05 90.54 90.55\nCIFAR-10 99.50+0.06 99.42+0.03 99.15+0.03 99.37 + 0.06 _\nCIFAR-100 94.55+0.04 93.90+0.05  93.25+0.05 93.51 + 0.08 _\nOxford-IIIT Pets 97.56+0.03 97.32+4011 94.67+0.15 96.62 + 0.23 _\nOxford Flowers-102 99.68+0.02 99.74+0.00 99.61 +0.02 99.63 + 0.03 _\nVTAB (19 tasks) 77.63+40.23 76.284+0.46 72.72+0.21 76.29 + 1.70 -\nTPUv3-core-days 2.5k 0.68k 0.23k 9.9k 12.3k\n\n", "chunk": "Ours-JFT Ours-JFT Ours-I21k BiT-L Noisy Student\n\n(ViT-H/14) \u2014 (ViT-L/16) \u2014 (ViT-L/16)  (ResNet152x4) _(EfficientNet-L2)\nImageNet 88.55+0.04 87.76+0.03 85.30 40.02 87.54 + 0.02 88.4/88.5*\nImageNet ReaL 90.72+0.05 90.54+0.03 88.62 40.05 90.54 90.55\nCIFAR-10 99.50+0.06 99.42+0.03 99.15+0.03 99.37 + 0.06 _\nCIFAR-100 94.55+0.04 93.90+0.05  93.25+0.05 93.51 + 0.08 _\nOxford-IIIT Pets 97.56+0.03 97.32+4011 94.67+0.15 96.62 + 0.23 _\nOxford Flowers-102 99.68+0.02 99.74+0.00 99.61 +0.02 99.63 + 0.03 _\nVTAB (19 tasks) 77.63+40.23 76.284+0.46 72.72+0.21 76.29 + 1.70 -\nTPUv3-core-days 2.5k 0.68k 0.23k 9.9k 12.3k", "page": 5, "bbox": [304.0660095214844, 219.9905242919922, 1389.142578125, 551.989013671875]}, "56": {"type": "Figure", "content": "ey\n6\n\nME ViT-H/14 MM OBIT-L(R1S2x4) MM \u00abVIVI-Ex-100% (R50x3) Ml. S4L (RS5Ox1)\n\n88\n80 85 60\n: \u2018in \u201cTl\n= 70 =a 80 50 |\n\nVTAB (19 tasks) Natural (7 tasks) Specialized (4 tasks) Structured (8 tasks)\n\nx\nOr\n\nx\nS\n\nAccuracy [%]\nN\n", "chunk": "ey\n6\n\nME ViT-H/14 MM OBIT-L(R1S2x4) MM \u00abVIVI-Ex-100% (R50x3) Ml.\n\nS4L (RS5Ox1)\n\n88\n80 85 60\n: \u2018in \u201cTl\n= 70 =a 80 50 |\n\nVTAB (19 tasks) Natural (7 tasks) Specialized (4 tasks) Structured (8 tasks)\n\nx\nOr\n\nx\nS\n\nAccuracy [%]\nN", "page": 5, "bbox": [279.1900329589844, 792.5089721679688, 1379.59716796875, 1049.0904541015625]}, "57": {"type": "Text", "content": "Figure 3: Transfer to ImageNet. While\nlarge ViT models perform worse than BiT\nResNets (shaded area) when pre-trained on\nsmall datasets, they shine when pre-trained on\nlarger datasets. Similarly, larger ViT variants\novertake smaller ones as the dataset grows.\n", "chunk": "Figure 3: Transfer to ImageNet.\n\nWhile\nlarge ViT models perform worse than BiT\nResNets (shaded area) when pre-trained on\nsmall datasets, they shine when pre-trained on\nlarger datasets.\n\nSimilarly, larger ViT variants\novertake smaller ones as the dataset grows.", "page": 6, "bbox": [300.79559326171875, 628.646240234375, 817.439208984375, 807.6524658203125]}, "58": {"type": "Text", "content": "Figure 5: Performance versus pre-training compute for different architectures: Vision Transformers,\nResNets, and hybrids. Vision Transformers generally outperform ResNets with the same compu-\ntational budget. Hybrids improve upon pure Transformers for smaller model sizes, but the gap\nvanishes for larger models.\n", "chunk": "Figure 5: Performance versus pre-training compute for different architectures: Vision Transformers,\nResNets, and hybrids.\n\nVision Transformers generally outperform ResNets with the same compu-\ntational budget.\n\nHybrids improve upon pure Transformers for smaller model sizes, but the gap\nvanishes for larger models.", "page": 6, "bbox": [299.89459228515625, 1317.6890869140625, 1411.361572265625, 1439.9727783203125]}, "59": {"type": "Text", "content": "region spanned by BiT models of different sizes. The BiT CNNs outperform ViT on ImageNet, but\nwith the larger datasets, ViT overtakes.\n", "chunk": "region spanned by BiT models of different sizes.\n\nThe BiT CNNs outperform ViT on ImageNet, but\nwith the larger datasets, ViT overtakes.", "page": 6, "bbox": [301.7517395019531, 1514.587158203125, 1398.996337890625, 1578.1865234375]}, "60": {"type": "Text", "content": "Second, we train our models on random subsets of 9M, 30M, and 90M as well as the full JFT-\n300M dataset. We do not perform additional regularization on the smaller subsets and use the same\nhyper-parameters for all settings. This way, we assess the intrinsic model properties, and not the\neffect of regularization. We do, however, use early-stopping, and report the best validation accuracy\nachieved during training. To save compute, we report few-shot linear accuracy instead of full fine-\ntuning accuracy. Figure 4 contains the results. Vision Transformers overfit more than ResNets with\ncomparable computational cost on smaller datasets. For example, ViT-B/32 is slightly faster than\nResNet50; it performs much worse on the 9M subset, but better on 90M+ subsets. The same is true\nfor ResNet152x2 and ViT-L/16. This result reinforces the intuition that the convolutional inductive\nbias is useful for smaller datasets, but for larger ones, learning the relevant patterns directly from\ndata is sufficient, even beneficial.\n", "chunk": "Second, we train our models on random subsets of 9M, 30M, and 90M as well as the full JFT-\n300M dataset.\n\nWe do not perform additional regularization on the smaller subsets and use the same\nhyper-parameters for all settings.\n\nThis way, we assess the intrinsic model properties, and not the\neffect of regularization.\n\nWe do, however, use early-stopping, and report the best validation accuracy\nachieved during training.\n\nTo save compute, we report few-shot linear accuracy instead of full fine-\ntuning accuracy.\n\nFigure 4 contains the results.\n\nVision Transformers overfit more than ResNets with\ncomparable computational cost on smaller datasets.\n\nFor example, ViT-B/32 is slightly faster than\nResNet50; it performs much worse on the 9M subset, but better on 90M+ subsets.\n\nThe same is true\nfor ResNet152x2 and ViT-L/16.\n\nThis result reinforces the intuition that the convolutional inductive\nbias is useful for smaller datasets, but for larger ones, learning the relevant patterns directly from\ndata is sufficient, even beneficial.", "page": 6, "bbox": [304.88555908203125, 1587.2518310546875, 1405.3458251953125, 1926.2518310546875]}, "61": {"type": "Text", "content": "Overall, the few-shot results on ImageNet (Figure 4), as well as the low-data results on VTAB\n(Table 2) seem promising for very low-data transfer. Further analysis of few-shot properties of ViT\nis an exciting direction of future work.\n", "chunk": "Overall, the few-shot results on ImageNet (Figure 4), as well as the low-data results on VTAB\n(Table 2) seem promising for very low-data transfer.\n\nFurther analysis of few-shot properties of ViT\nis an exciting direction of future work.", "page": 6, "bbox": [293.98260498046875, 1944.096923828125, 1426.6317138671875, 2033.69091796875]}, "62": {"type": "Text", "content": "Figure 4: Linear few-shot evaluation on Ima-\ngeNet versus pre-training size. ResNets per-\nform better with smaller pre-training datasets\nbut plateau sooner than ViT, which performs\nbetter with larger pre-training. ViT-b is ViT-B\nwith all hidden dimensions halved.\n", "chunk": "Figure 4: Linear few-shot evaluation on Ima-\ngeNet versus pre-training size.\n\nResNets per-\nform better with smaller pre-training datasets\nbut plateau sooner than ViT, which performs\nbetter with larger pre-training.\n\nViT-b is ViT-B\nwith all hidden dimensions halved.", "page": 6, "bbox": [856.1768798828125, 623.4476318359375, 1371.28125, 808.9805297851562]}, "63": {"type": "Figure", "content": "Average-5 ImageNet\n\n\u20180\na\n\nTransfer accuracy [%]\n\nR-}\nSs\n\n90\ne e\noe * e*\nft 85 * *\n\u2018ee.\ne\n80\n\u00a9 Transformer (ViT) @ Transformer (ViT)\nResNet (BiT) ResNet (BiT)\nHybrid \u00a9 Hybrid\n- 15\n102 108 102 103\n\nTatal nre-trainine comnite JexaFl OPe\u00abl]\n", "chunk": "Average-5 ImageNet\n\n\u20180\na\n\nTransfer accuracy [%]\n\nR-}\nSs\n\n90\ne e\noe * e*\nft 85 * *\n\u2018ee.\n\ne\n80\n\u00a9 Transformer (ViT) @ Transformer (ViT)\nResNet (BiT) ResNet (BiT)\nHybrid \u00a9 Hybrid\n- 15\n102 108 102 103\n\nTatal nre-trainine comnite JexaFl OPe\u00abl]", "page": 6, "bbox": [353.60101318359375, 854.1980590820312, 1337.7183837890625, 1270.17529296875]}, "64": {"type": "Figure", "content": "ImageNet Top! Accuracy [%]\n\n85\n\n80\n\n75\n\n70\n\n$ \u00b0\n\nLJ e\n\nBiT \u00a9 ViT-L32\n\n\u00b0 \u00a9 ViT-B/32 \u00a9) ViT-L/16\n\ne ViT-B/16 @ ViT-H/14\nImageNet ImageNet-21k JET-300M\n\nPre-training dataset\n\n& 3 3 3\n\nLinear 5-shot ImageNet Top! [%\nw\n3\n\n\u00a9 ViT-L/16 -\u00ae ViT-B/32 -* ResNet50x1 (BiT)\n~* ViT-L/32 -\u00ae ViT-b/32  -\u00aeResNet152x2 (BiT)\n\n10M 30M 100M 300M\nNumber of JFT pre-training samples\n", "chunk": "ImageNet Top!\n\nAccuracy [%]\n\n85\n\n80\n\n75\n\n70\n\n$ \u00b0\n\nLJ e\n\nBiT \u00a9 ViT-L32\n\n\u00b0 \u00a9 ViT-B/32 \u00a9) ViT-L/16\n\ne ViT-B/16 @ ViT-H/14\nImageNet ImageNet-21k JET-300M\n\nPre-training dataset\n\n& 3 3 3\n\nLinear 5-shot ImageNet Top!\n\n[%\nw\n3\n\n\u00a9 ViT-L/16 -\u00ae ViT-B/32 -* ResNet50x1 (BiT)\n~* ViT-L/32 -\u00ae ViT-b/32  -\u00aeResNet152x2 (BiT)\n\n10M 30M 100M 300M\nNumber of JFT pre-training samples", "page": 6, "bbox": [303.1015319824219, 217.43128967285156, 1353.7882080078125, 600.2957153320312]}, "65": {"type": "Figure", "content": "ImageNet Top! Accuracy [%]\n\n90.\n\n85\n\n80\n\n75\n\n70\n\n$ \u00b0\n\nLJ e\n+\nBiT \u00a9 ViT-L32\n\u00b0 \u00a9 ViT-B/32 \u00a9) ViT-L/16\ne ViT-B/16 @ ViT-H/14\nImageNet ImageNet-21k JET-300M\n\nPre-training dataset\n", "chunk": "ImageNet Top!\n\nAccuracy [%]\n\n90.\n\n85\n\n80\n\n75\n\n70\n\n$ \u00b0\n\nLJ e\n+\nBiT \u00a9 ViT-L32\n\u00b0 \u00a9 ViT-B/32 \u00a9) ViT-L/16\ne ViT-B/16 @ ViT-H/14\nImageNet ImageNet-21k JET-300M\n\nPre-training dataset", "page": 6, "bbox": [313.1439514160156, 224.60658264160156, 841.0975341796875, 600.0446166992188]}, "66": {"type": "Figure", "content": "S$ gs 3\n\nLinear 5-shot ImageNet Top! [%\n&\n\nwe\n&\n\n\u00a9 ViT-L/16 -\u00ae ViT-B/32 -* ResNet50x1 (BiT)\n~* ViT-L/32 -\u00ae ViT-b/32  -\u00aeResNet152x2 (BiT)\n\n10M 30M 100M 300M\nNumber of JFT pre-training samples\n", "chunk": "S$ gs 3\n\nLinear 5-shot ImageNet Top!\n\n[%\n&\n\nwe\n&\n\n\u00a9 ViT-L/16 -\u00ae ViT-B/32 -* ResNet50x1 (BiT)\n~* ViT-L/32 -\u00ae ViT-b/32  -\u00aeResNet152x2 (BiT)\n\n10M 30M 100M 300M\nNumber of JFT pre-training samples", "page": 6, "bbox": [840.44775390625, 237.9980010986328, 1356.578857421875, 593.0863037109375]}, "67": {"type": "Text", "content": "We perform a controlled scaling study of different models by evaluating transfer performance from\nJFT-300M. In this setting data size does not bottleneck the models\u2019 performances, and we assess\nperformance versus pre-training cost of each model. The model set includes: 7 ResNets, R50x1,\nR50x2 R101x1, R152x1, R152x2, pre-trained for 7 epochs, plus R152x2 and R200x3 pre-trained\nfor 14 epochs; 6 Vision Transformers, ViT-B/32, B/16, L/32, L/16, pre-trained for 7 epochs, plus\nL/16 and H/14 pre-trained for 14 epochs; and 5 hybrids, R50+ViT-B/32, B/16, L/32, L/16 pre-\ntrained for 7 epochs, plus R50+ViT-L/16 pre-trained for 14 epochs (for hybrids, the number at the\nend of the model name stands not for the patch size, but for the total dowsampling ratio in the ResNet\nbackbone).\n", "chunk": "We perform a controlled scaling study of different models by evaluating transfer performance from\nJFT-300M.\n\nIn this setting data size does not bottleneck the models\u2019 performances, and we assess\nperformance versus pre-training cost of each model.", "page": 7, "bbox": [295.8568420410156, 285.8457336425781, 1408.8583984375, 569.0543823242188]}, "68": {"type": "Text", "content": "We perform a controlled scaling study of different models by evaluating transfer performance from\nJFT-300M. In this setting data size does not bottleneck the models\u2019 performances, and we assess\nperformance versus pre-training cost of each model. The model set includes: 7 ResNets, R50x1,\nR50x2 R101x1, R152x1, R152x2, pre-trained for 7 epochs, plus R152x2 and R200x3 pre-trained\nfor 14 epochs; 6 Vision Transformers, ViT-B/32, B/16, L/32, L/16, pre-trained for 7 epochs, plus\nL/16 and H/14 pre-trained for 14 epochs; and 5 hybrids, R50+ViT-B/32, B/16, L/32, L/16 pre-\ntrained for 7 epochs, plus R50+ViT-L/16 pre-trained for 14 epochs (for hybrids, the number at the\nend of the model name stands not for the patch size, but for the total dowsampling ratio in the ResNet\nbackbone).\n", "chunk": "The model set includes: 7 ResNets, R50x1,\nR50x2 R101x1, R152x1, R152x2, pre-trained for 7 epochs, plus R152x2 and R200x3 pre-trained\nfor 14 epochs; 6 Vision Transformers, ViT-B/32, B/16, L/32, L/16, pre-trained for 7 epochs, plus\nL/16 and H/14 pre-trained for 14 epochs; and 5 hybrids, R50+ViT-B/32, B/16, L/32, L/16 pre-\ntrained for 7 epochs, plus R50+ViT-L/16 pre-trained for 14 epochs (for hybrids, the number at the\nend of the model name stands not for the patch size, but for the total dowsampling ratio in the ResNet\nbackbone).", "page": 7, "bbox": [295.8568420410156, 285.8457336425781, 1408.8583984375, 569.0543823242188]}, "69": {"type": "Text", "content": "Figure 5 contains the transfer performance versus total pre-training compute (see Appendix D.5\nfor details on computational costs). Detailed results per model are provided in Table 6 in the Ap-\npendix. A few patterns can be observed. First, Vision Transformers dominate ResNets on the\nperformance/compute trade-off. ViT uses approximately 2 \u2014 4x less compute to attain the same\nperformance (average over 5 datasets). Second, hybrids slightly outperform ViT at small compu-\ntational budgets, but the difference vanishes for larger models. This result is somewhat surprising,\nsince one might expect convolutional local feature processing to assist ViT at any size. Third, Vision\nTransformers appear not to saturate within the range tried, motivating future scaling efforts.\n", "chunk": "Figure 5 contains the transfer performance versus total pre-training compute (see Appendix D.5\nfor details on computational costs).\n\nDetailed results per model are provided in Table 6 in the Ap-\npendix.\n\nA few patterns can be observed.\n\nFirst, Vision Transformers dominate ResNets on the\nperformance/compute trade-off.\n\nViT uses approximately 2 \u2014 4x less compute to attain the same\nperformance (average over 5 datasets).\n\nSecond, hybrids slightly outperform ViT at small compu-\ntational budgets, but the difference vanishes for larger models.\n\nThis result is somewhat surprising,\nsince one might expect convolutional local feature processing to assist ViT at any size.\n\nThird, Vision\nTransformers appear not to saturate within the range tried, motivating future scaling efforts.", "page": 7, "bbox": [306.2226257324219, 577.0025024414062, 1398.74462890625, 831.510986328125]}, "70": {"type": "Text", "content": "To begin to understand how the Vision Transformer processes im-\nage data, we analyze its internal representations. The first layer of\nthe Vision Transformer linearly projects the flattened patches into a\nlower-dimensional space (Eq. 1). Figure 7 (left) shows the top prin-\ncipal components of the the learned embedding filters. The com-\nponents resemble plausible basis functions for a low-dimensional\nrepresentation of the fine structure within each patch.\n", "chunk": "To begin to understand how the Vision Transformer processes im-\nage data, we analyze its internal representations.\n\nThe first layer of\nthe Vision Transformer linearly projects the flattened patches into a\nlower-dimensional space (Eq.\n\n1).\n\nFigure 7 (left) shows the top prin-\ncipal components of the the learned embedding filters.\n\nThe com-\nponents resemble plausible basis functions for a low-dimensional\nrepresentation of the fine structure within each patch.", "page": 7, "bbox": [302.7666320800781, 925.5695190429688, 1047.4749755859375, 1139.30712890625]}, "71": {"type": "Text", "content": "After the projection, a learned position embedding is added to the\npatch representations. Figure 7 (center) shows that the model learns\nto encode distance within the image in the similarity of position em-\nbeddings, i.e. closer patches tend to have more similar position em-\nbeddings. Further, the row-column structure appears; patches in the\nsame row/column have similar embeddings. Finally, a sinusoidal\nstructure is sometimes apparent for larger grids (Appendix D). That\nthe position embeddings learn to represent 2D image topology ex-\nplains why hand-crafted 2D-aware embedding variants do not yield\nimprovements (Appendix D.4).\n", "chunk": "After the projection, a learned position embedding is added to the\npatch representations.\n\nFigure 7 (center) shows that the model learns\nto encode distance within the image in the similarity of position em-\nbeddings, i.e.\n\ncloser patches tend to have more similar position em-\nbeddings.\n\nFurther, the row-column structure appears; patches in the\nsame row/column have similar embeddings.\n\nFinally, a sinusoidal\nstructure is sometimes apparent for larger grids (Appendix D).\n\nThat\nthe position embeddings learn to represent 2D image topology ex-\nplains why hand-crafted 2D-aware embedding variants do not yield\nimprovements (Appendix D.4).", "page": 7, "bbox": [298.1349182128906, 1151.1461181640625, 1047.146484375, 1461.72216796875]}, "72": {"type": "Text", "content": "Self-attention allows ViT to integrate information across the entire\nimage even in the lowest layers. We investigate to what degree\nthe network makes use of this capability. Specifically, we compute\nthe average distance in image space across which information is\nintegrated, based on the attention weights (Figure 7, right). This\n\u201cattention distance\u201d is analogous to receptive field size in CNNS.\n", "chunk": "Self-attention allows ViT to integrate information across the entire\nimage even in the lowest layers.\n\nWe investigate to what degree\nthe network makes use of this capability.\n\nSpecifically, we compute\nthe average distance in image space across which information is\nintegrated, based on the attention weights (Figure 7, right).\n\nThis\n\u201cattention distance\u201d is analogous to receptive field size in CNNS.", "page": 7, "bbox": [304.0452575683594, 1475.1290283203125, 1043.155029296875, 1648.894775390625]}, "73": {"type": "Text", "content": "rr. re\n\nWe \u2018find \u2018that some e heads attend to most of the image already in the lowest layers, showing that\nhe ability to integrate information globally is indeed used by the model. Other attention heads\n1ave consistently small attention distances in the low layers. This highly localized attention is\nless pronounced in hybrid models that apply a ResNet before the Transformer (Figure 7, right),\nsuggesting that it may serve a similar function as early convolutional layers in CNNs. Further, the\nuttention distance increases with network depth. Globally, we find that the model attends to image\negions that are semantically relevant for classification (Figure 6).\n\n", "chunk": "rr.\n\nre\n\nWe \u2018find \u2018that some e heads attend to most of the image already in the lowest layers, showing that\nhe ability to integrate information globally is indeed used by the model.\n\nOther attention heads\n1ave consistently small attention distances in the low layers.\n\nThis highly localized attention is\nless pronounced in hybrid models that apply a ResNet before the Transformer (Figure 7, right),\nsuggesting that it may serve a similar function as early convolutional layers in CNNs.\n\nFurther, the\nuttention distance increases with network depth.\n\nGlobally, we find that the model attends to image\negions that are semantically relevant for classification (Figure 6).", "page": 7, "bbox": [309.81719970703125, 1655.7645263671875, 1402.31982421875, 1870.2667236328125]}, "74": {"type": "Text", "content": "Transformers show impressive performance on NLP tasks. However, much of their success stems\nnot only from their excellent scalability but also from large scale self-supervised pre-training (Devlin\n", "chunk": "Transformers show impressive performance on NLP tasks.\n\nHowever, much of their success stems\nnot only from their excellent scalability but also from large scale self-supervised pre-training (Devlin", "page": 7, "bbox": [297.3446960449219, 1974.83447265625, 1406.5404052734375, 2037.1241455078125]}, "75": {"type": "Text", "content": "Figure 6: Representative ex-\namples of attention from the\noutput token to the input\nspace. See Appendix D.7 for\ndetails.\n", "chunk": "Figure 6: Representative ex-\namples of attention from the\noutput token to the input\nspace.\n\nSee Appendix D.7 for\ndetails.", "page": 7, "bbox": [1055.1280517578125, 1481.758544921875, 1400.1802978515625, 1633.8453369140625]}, "76": {"type": "Title", "content": "4.5 INSPECTING VISION TRANSFORMER\n", "chunk": "4.5 INSPECTING VISION TRANSFORMER", "page": 7, "bbox": [307.69195556640625, 869.7534790039062, 798.97705078125, 902.0302734375]}, "77": {"type": "Title", "content": "4.6 SELF-SUPERVISION\n", "chunk": "4.6 SELF-SUPERVISION", "page": 7, "bbox": [301.7727966308594, 1915.18994140625, 597.3540649414062, 1948.602294921875]}, "78": {"type": "Title", "content": "4.4 SCALING STUDY\n", "chunk": "4.4 SCALING STUDY", "page": 7, "bbox": [294.68133544921875, 232.2562713623047, 563.807373046875, 264.8756103515625]}, "79": {"type": "Figure", "content": "Input Attention\n\nDersins\n\n", "chunk": "Input Attention\n\nDersins", "page": 7, "bbox": [1116.90478515625, 948.6978759765625, 1372.548828125, 1428.4805908203125]}, "80": {"type": "Text", "content": "Figure 7: Left: Filters of the initial linear embedding of RGB values of ViT-L/32. Center: Sim-\nlarity of position embeddings of ViT-L/32. Tiles show the cosine similarity between the position\n>mbedding of the patch with the indicated row and column and the position embeddings of all other\nyatches. Right: Size of attended area by head and network depth. Each dot shows the mean attention\nlistance across images for one of 16 heads at one layer. See Appendix D.7 for details.\n", "chunk": "Figure 7: Left: Filters of the initial linear embedding of RGB values of ViT-L/32.\n\nCenter: Sim-\nlarity of position embeddings of ViT-L/32.\n\nTiles show the cosine similarity between the position\n>mbedding of the patch with the indicated row and column and the position embeddings of all other\nyatches.\n\nRight: Size of attended area by head and network depth.\n\nEach dot shows the mean attention\nlistance across images for one of 16 heads at one layer.\n\nSee Appendix D.7 for details.", "page": 8, "bbox": [310.56488037109375, 605.5543823242188, 1397.4598388671875, 763.5322875976562]}, "81": {"type": "Text", "content": "et al., 2019; Radford et al., 2018). We also perform a preliminary exploration on masked patch\nprediction for self-supervision, mimicking the masked language modeling task used in BERT. With\nself-supervised pre-training, our smaller ViT-B/16 model achieves 79.9% accuracy on ImageNet, a\nsignificant improvement of 2% to training from scratch, but still 4% behind supervised pre-training.\nAppendix B.1.2 contains further details. We leave exploration of contrastive pre-training (Chen\net al., 2020b; He et al., 2020; Bachman et al., 2019; H\u00e9naff et al., 2020) to future work.\n", "chunk": "et al., 2019; Radford et al., 2018).\n\nWe also perform a preliminary exploration on masked patch\nprediction for self-supervision, mimicking the masked language modeling task used in BERT.\n\nWith\nself-supervised pre-training, our smaller ViT-B/16 model achieves 79.9% accuracy on ImageNet, a\nsignificant improvement of 2% to training from scratch, but still 4% behind supervised pre-training.\n\nAppendix B.1.2 contains further details.\n\nWe leave exploration of contrastive pre-training (Chen\net al., 2020b; He et al., 2020; Bachman et al., 2019; H\u00e9naff et al., 2020) to future work.", "page": 8, "bbox": [301.0882568359375, 850.4146118164062, 1402.399169921875, 1039.9256591796875]}, "82": {"type": "Text", "content": "We have explored the direct application of Transformers to image recognition. Unlike prior works\nusing self-attention in computer vision, we do not introduce image-specific inductive biases into\nthe architecture apart from the initial patch extraction step. Instead, we interpret an image as a\nsequence of patches and process it by a standard Transformer encoder as used in NLP. This simple,\nyet scalable, strategy works surprisingly well when coupled with pre-training on large datasets.\nThus, Vision Transformer matches or exceeds the state of the art on many image classification\ndatasets, whilst being relatively cheap to pre-train.\n", "chunk": "We have explored the direct application of Transformers to image recognition.\n\nUnlike prior works\nusing self-attention in computer vision, we do not introduce image-specific inductive biases into\nthe architecture apart from the initial patch extraction step.\n\nInstead, we interpret an image as a\nsequence of patches and process it by a standard Transformer encoder as used in NLP.\n\nThis simple,\nyet scalable, strategy works surprisingly well when coupled with pre-training on large datasets.\n\nThus, Vision Transformer matches or exceeds the state of the art on many image classification\ndatasets, whilst being relatively cheap to pre-train.", "page": 8, "bbox": [300.0313415527344, 1146.4471435546875, 1412.639404296875, 1365.279052734375]}, "83": {"type": "Text", "content": "While these initial results are encouraging, many challenges remain. One is to apply ViT to other\ncomputer vision tasks, such as detection and segmentation. Our results, coupled with those in Carion\net al. (2020), indicate the promise of this approach. Another challenge is to continue exploring self-\nsupervised pre-training methods. Our initial experiments show improvement from self-supervised\npre-training, but there is still large gap between self-supervised and large-scale supervised pre-\ntraining. Finally, further scaling of ViT would likely lead to improved performance.\n", "chunk": "While these initial results are encouraging, many challenges remain.\n\nOne is to apply ViT to other\ncomputer vision tasks, such as detection and segmentation.\n\nOur results, coupled with those in Carion\net al.\n\n(2020), indicate the promise of this approach.\n\nAnother challenge is to continue exploring self-\nsupervised pre-training methods.\n\nOur initial experiments show improvement from self-supervised\npre-training, but there is still large gap between self-supervised and large-scale supervised pre-\ntraining.\n\nFinally, further scaling of ViT would likely lead to improved performance.", "page": 8, "bbox": [299.9452819824219, 1378.47216796875, 1404.1336669921875, 1563.906982421875]}, "84": {"type": "Text", "content": "The work was performed in Berlin, Ziirich, and Amsterdam. We thank many colleagues at Google\nfor their help, in particular Andreas Steiner for crucial help with the infrastructure and the open-\nsource release of the code; Joan Puigcerver and Maxim Neumann for help with the large-scale\nraining infrastructure; Dmitry Lepikhin, Aravindh Mahendran, Daniel Keysers, Mario Lu\u00a2i\u00a2, Noam\nShazeer, Ashish Vaswani, and Colin Raffel for useful discussions.\n", "chunk": "The work was performed in Berlin, Ziirich, and Amsterdam.\n\nWe thank many colleagues at Google\nfor their help, in particular Andreas Steiner for crucial help with the infrastructure and the open-\nsource release of the code; Joan Puigcerver and Maxim Neumann for help with the large-scale\nraining infrastructure; Dmitry Lepikhin, Aravindh Mahendran, Daniel Keysers, Mario Lu\u00a2i\u00a2, Noam\nShazeer, Ashish Vaswani, and Colin Raffel for useful discussions.", "page": 8, "bbox": [308.05126953125, 1674.242919921875, 1401.5521240234375, 1830.0443115234375]}, "85": {"type": "Text", "content": "Samira Abnar and Willem Zuidema. Quantifying attention flow in transformers. In ACL, 2020.\n", "chunk": "Samira Abnar and Willem Zuidema.\n\nQuantifying attention flow in transformers.\n\nIn ACL, 2020.", "page": 8, "bbox": [302.9676818847656, 1925.3868408203125, 1359.3883056640625, 1955.6083984375]}, "86": {"type": "Text", "content": "lip Bachman, R Devon Hjelm, and William Buchwalter. Learning representations by maximizing\nmutual information across views. In NeurIPS, 2019.\n", "chunk": "lip Bachman, R Devon Hjelm, and William Buchwalter.\n\nLearning representations by maximizing\nmutual information across views.\n\nIn NeurIPS, 2019.", "page": 8, "bbox": [329.8736572265625, 1976.3033447265625, 1391.48828125, 2033.6715087890625]}, "87": {"type": "Title", "content": "ACKNOWLEDGEMENTS\n", "chunk": "ACKNOWLEDGEMENTS", "page": 8, "bbox": [302.1977844238281, 1608.090087890625, 626.729248046875, 1642.734130859375]}, "88": {"type": "Title", "content": "REFERENCES\n", "chunk": "REFERENCES", "page": 8, "bbox": [300.328857421875, 1876.1558837890625, 488.0536804199219, 1907.9805908203125]}, "89": {"type": "Title", "content": "CONCLUSION\n", "chunk": "CONCLUSION", "page": 8, "bbox": [335.4420166015625, 1082.6458740234375, 544.8648681640625, 1115.8797607421875]}, "90": {"type": "Figure", "content": "RGB embedding filters\nfirst 28 principal components)\n\nPosition embedding similarity | ViT-L/16\n{BRE\n>Re\nSEER Ee\n\u2018EEEREREE\nsSERRRRE\nEERE\nmap\n\n* Head 1\n\u00a9 Head 2\n\u00b0 Head 3\n\nInput patch row\nCosine similarity\nMean attention distance (pixels)\n\n123 45 67 7 0 5 1 15 20\nInput patch column Network depth (layer)\n", "chunk": "RGB embedding filters\nfirst 28 principal components)\n\nPosition embedding similarity | ViT-L/16\n{BRE\n>Re\nSEER Ee\n\u2018EEEREREE\nsSERRRRE\nEERE\nmap\n\n* Head 1\n\u00a9 Head 2\n\u00b0 Head 3\n\nInput patch row\nCosine similarity\nMean attention distance (pixels)\n\n123 45 67 7 0 5 1 15 20\nInput patch column Network depth (layer)", "page": 8, "bbox": [307.24798583984375, 191.3851318359375, 1399.212158203125, 587.025390625]}, "91": {"type": "Text", "content": "Alexei Baevski and Michael Auli. Adaptive input representations for neural language modeling. In\nICLR, 2019.\n", "chunk": "Alexei Baevski and Michael Auli.\n\nAdaptive input representations for neural language modeling.\n\nIn\nICLR, 2019.", "page": 9, "bbox": [305.362060546875, 232.12820434570312, 1402.8297119140625, 294.2264404296875]}, "92": {"type": "Text", "content": "sucas Beyer, Olivier J. H\u00e9naff, Alexander Kolesnikov, Xiaohua Zhai, and Aaron van den Oord. Are\nwe done with imagenet? arXiv, 2020.\n", "chunk": "sucas Beyer, Olivier J. H\u00e9naff, Alexander Kolesnikov, Xiaohua Zhai, and Aaron van den Oord.\n\nAre\nwe done with imagenet?\n\narXiv, 2020.", "page": 9, "bbox": [314.5700378417969, 403.99652099609375, 1398.1329345703125, 462.43072509765625]}, "93": {"type": "Text", "content": "fom B Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla Dhariwal,\nArvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, et al. Language models are\nfew-shot learners. arXiv, 2020.\n", "chunk": "fom B Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla Dhariwal,\nArvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, et al.\n\nLanguage models are\nfew-shot learners.\n\narXiv, 2020.", "page": 9, "bbox": [314.82073974609375, 488.0602722167969, 1397.49853515625, 584.7572631835938]}, "94": {"type": "Text", "content": "Nicolas Carion, Francisco Massa, Gabriel Synnaeve, Nicolas Usunier, Alexander Kirillov, and\nSergey Zagoruyko. End-to-end object detection with transformers. In ECCV, 2020.\n", "chunk": "Nicolas Carion, Francisco Massa, Gabriel Synnaeve, Nicolas Usunier, Alexander Kirillov, and\nSergey Zagoruyko.\n\nEnd-to-end object detection with transformers.\n\nIn ECCV, 2020.", "page": 9, "bbox": [313.137451171875, 605.6348876953125, 1399.9329833984375, 665.32275390625]}, "95": {"type": "Text", "content": "Mark Chen, Alec Radford, Rewon Child, Jeff Wu, and Heewoo Jun. Generative pretraining fror\npixels. In JCML, 2020a.\n", "chunk": "Mark Chen, Alec Radford, Rewon Child, Jeff Wu, and Heewoo Jun.\n\nGenerative pretraining fror\npixels.\n\nIn JCML, 2020a.", "page": 9, "bbox": [313.2896423339844, 690.5657958984375, 1383.29931640625, 748.49072265625]}, "96": {"type": "Text", "content": "Ting Chen, Simon Kornblith, Mohammad Norouzi, and Geoffrey E. Hinton. A simple framework\nfor contrastive learning of visual representations. In JCML, 2020b.\n", "chunk": "Ting Chen, Simon Kornblith, Mohammad Norouzi, and Geoffrey E. Hinton.\n\nA simple framework\nfor contrastive learning of visual representations.\n\nIn JCML, 2020b.", "page": 9, "bbox": [303.24420166015625, 775.2911987304688, 1410.9776611328125, 836.686279296875]}, "97": {"type": "Text", "content": "Yen-Chun Chen, Linjie Li, Licheng Yu, Ahmed El Kholy, Faisal Anmed, Zhe Gan, Yu Cheng, and\nJingjing Liu. UNITER: UNiversal Image-TExt Representation Learning. In ECCV, 2020c.\n", "chunk": "Yen-Chun Chen, Linjie Li, Licheng Yu, Ahmed El Kholy, Faisal Anmed, Zhe Gan, Yu Cheng, and\nJingjing Liu.\n\nUNITER: UNiversal Image-TExt Representation Learning.\n\nIn ECCV, 2020c.", "page": 9, "bbox": [298.27947998046875, 859.9207763671875, 1422.230224609375, 920.4227294921875]}, "98": {"type": "Text", "content": "ewon Child, Scott Gray, Alec Radford, and Ilya Sutskever. Generating long sequences with sparse\ntransformers. arXiv, 2019.\n", "chunk": "ewon Child, Scott Gray, Alec Radford, and Ilya Sutskever.\n\nGenerating long sequences with sparse\ntransformers.\n\narXiv, 2019.", "page": 9, "bbox": [317.8808898925781, 945.9495849609375, 1392.342041015625, 1007.0634155273438]}, "99": {"type": "Text", "content": "ewon Child, Scott t Gray, Alec Radford, and Iya Sutskever. Generating long sequences with sparse\n", "chunk": "ewon Child, Scott t Gray, Alec Radford, and Iya Sutskever.\n\nGenerating long sequences with sparse", "page": 9, "bbox": [325.6439514160156, 946.584716796875, 1392.990234375, 976.6065673828125]}, "100": {"type": "Text", "content": "-an-Baptiste Cordonnier, Andreas Loukas, and Martin Jaggi. On the relationship between self-\nattention and convolutional layers. In JCLR, 2020.\n", "chunk": "-an-Baptiste Cordonnier, Andreas Loukas, and Martin Jaggi.\n\nOn the relationship between self-\nattention and convolutional layers.\n\nIn JCLR, 2020.", "page": 9, "bbox": [321.0652770996094, 1030.058837890625, 1395.1441650390625, 1089.197509765625]}, "101": {"type": "Text", "content": "J. Deng, W. Dong, R. Socher, L. Li, Kai Li, and Li Fei-Fei. Imagenet: A large-scale hierarchical\nimage database. In CVPR, 2009.\n", "chunk": "J. Deng, W. Dong, R. Socher, L. Li, Kai Li, and Li Fei-Fei.\n\nImagenet: A large-scale hierarchical\nimage database.\n\nIn CVPR, 2009.", "page": 9, "bbox": [298.4480285644531, 1115.4202880859375, 1396.3634033203125, 1175.846923828125]}, "102": {"type": "Text", "content": "jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. BERT: Pre-training of deep\nbidirectional transformers for language understanding. In NAACL, 2019.\n", "chunk": "jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova.\n\nBERT: Pre-training of deep\nbidirectional transformers for language understanding.\n\nIn NAACL, 2019.", "page": 9, "bbox": [310.7279968261719, 1201.1353759765625, 1394.98681640625, 1260.314453125]}, "103": {"type": "Text", "content": "Josip Djolonga, Jessica Yung, Michael Tschannen, Rob Romijnders, Lucas Beyer, Alexander\nKolesnikov, Joan Puigcerver, Matthias Minderer, Alexander D\u2019 Amour, Dan Moldovan, Sylvan\nGelly, Neil Houlsby, Xiaohua Zhai, and Mario Lucic. On robustness and transferability of convo-\nlutional neural networks. arXiv, 2020.\n", "chunk": "Josip Djolonga, Jessica Yung, Michael Tschannen, Rob Romijnders, Lucas Beyer, Alexander\nKolesnikov, Joan Puigcerver, Matthias Minderer, Alexander D\u2019 Amour, Dan Moldovan, Sylvan\nGelly, Neil Houlsby, Xiaohua Zhai, and Mario Lucic.\n\nOn robustness and transferability of convo-\nlutional neural networks.\n\narXiv, 2020.", "page": 9, "bbox": [305.1754455566406, 1285.896240234375, 1398.170166015625, 1411.9967041015625]}, "104": {"type": "Text", "content": "Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image recog.\nnition. In CVPR, 2016.\n", "chunk": "Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.\n\nDeep residual learning for image recog.\n\nnition.\n\nIn CVPR, 2016.", "page": 9, "bbox": [305.476806640625, 1434.101318359375, 1390.05029296875, 1492.08837890625]}, "105": {"type": "Text", "content": "\u2018aiming He, Haoqi Fan, Yuxin Wu, Saining Xie, and Ross Girshick. Momentum contrast for\nunsupervised visual representation learning. In CVPR, 2020.\n", "chunk": "\u2018aiming He, Haoqi Fan, Yuxin Wu, Saining Xie, and Ross Girshick.\n\nMomentum contrast for\nunsupervised visual representation learning.\n\nIn CVPR, 2020.", "page": 9, "bbox": [317.36810302734375, 1515.455322265625, 1417.229248046875, 1580.73046875]}, "106": {"type": "Text", "content": "Jonathan Ho, Nal Kalchbrenner, Dirk Weissenborn, and Tim Salimans. Axial attention in multidi-\nmensional transformers. arXiv, 2019.\n", "chunk": "Jonathan Ho, Nal Kalchbrenner, Dirk Weissenborn, and Tim Salimans.\n\nAxial attention in multidi-\nmensional transformers.\n\narXiv, 2019.", "page": 9, "bbox": [302.166259765625, 1604.31201171875, 1399.035400390625, 1662.6112060546875]}, "107": {"type": "Text", "content": "dan Hu, Jiayuan Gu, Zheng Zhang, Jifeng Dai, and Yichen Wei. Relation networks for object\ndetection. In CVPR, 2018.\n", "chunk": "dan Hu, Jiayuan Gu, Zheng Zhang, Jifeng Dai, and Yichen Wei.\n\nRelation networks for object\ndetection.\n\nIn CVPR, 2018.", "page": 9, "bbox": [312.3311767578125, 1686.9583740234375, 1393.7314453125, 1743.93212890625]}, "108": {"type": "Text", "content": "dan Hu, Zheng Zhang, Zhenda Xie, and Stephen Lin. Local relation networks for image recogniti\nIn CCV, 2019.\n", "chunk": "dan Hu, Zheng Zhang, Zhenda Xie, and Stephen Lin.\n\nLocal relation networks for image recogniti\nIn CCV, 2019.", "page": 9, "bbox": [312.106201171875, 1775.0782470703125, 1362.2225341796875, 1832.141845703125]}, "109": {"type": "Text", "content": "\u2018ilong Huang, Xinggang Wang, Yunchao Wei, Lichao Huang, Humphrey Shi, Wenyu Liu, and\nThomas S. Huang. Ccnet: Criss-cross attention for semantic segmentation. In JCCV, 2020.\n", "chunk": "\u2018ilong Huang, Xinggang Wang, Yunchao Wei, Lichao Huang, Humphrey Shi, Wenyu Liu, and\nThomas S. Huang.\n\nCcnet: Criss-cross attention for semantic segmentation.\n\nIn JCCV, 2020.", "page": 9, "bbox": [316.9725341796875, 1858.5087890625, 1399.6429443359375, 1921.8162841796875]}, "110": {"type": "Text", "content": "Dlivier J. H\u00e9naff, Aravind Srinivas, Jeffrey De Fauw, Ali Razavi, Carl Doersch, S. M. Ali Eslami,\nand Aaron van den Oord. Data-efficient image recognition with contrastive predictive coding. In\nICML, 2020.\n", "chunk": "Dlivier J. H\u00e9naff, Aravind Srinivas, Jeffrey De Fauw, Ali Razavi, Carl Doersch, S. M. Ali Eslami,\nand Aaron van den Oord.\n\nData-efficient image recognition with contrastive predictive coding.\n\nIn\nICML, 2020.", "page": 9, "bbox": [311.86114501953125, 1940.0673828125, 1402.2850341796875, 2033.8994140625]}, "111": {"type": "Text", "content": "Sergey loffe and Christian Szegedy. Batch normalization: Accelerating deep network training by\nreducing internal covariate shift. 2015.\n", "chunk": "Sergey loffe and Christian Szegedy.\n\nBatch normalization: Accelerating deep network training by\nreducing internal covariate shift.\n\n2015.", "page": 10, "bbox": [302.9188537597656, 231.8460235595703, 1421.5576171875, 293.2525329589844]}, "112": {"type": "Text", "content": "Diederik P. Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In JCLR, 2015.\n", "chunk": "Diederik P. Kingma and Jimmy Ba.\n\nAdam: A method for stochastic optimization.\n\nIn JCLR, 2015.", "page": 10, "bbox": [295.796142578125, 317.7603454589844, 1383.69580078125, 347.54791259765625]}, "113": {"type": "Text", "content": "lexander Kolesnikov, Lucas Beyer, Xiaohua Zhai, Joan Puigcerver, Jessica Yung, Sylvain Gelly,\nand Neil Houlsby. Big transfer (BiT): General visual representation learning. In ECCV, 2020.\n", "chunk": "lexander Kolesnikov, Lucas Beyer, Xiaohua Zhai, Joan Puigcerver, Jessica Yung, Sylvain Gelly,\nand Neil Houlsby.\n\nBig transfer (BiT): General visual representation learning.\n\nIn ECCV, 2020.", "page": 10, "bbox": [322.2196044921875, 373.7082214355469, 1408.829345703125, 432.8775634765625]}, "114": {"type": "Text", "content": "Alex Krizhevsky. Learning multiple layers of features from tiny images. Technical report, 2009.\n", "chunk": "Alex Krizhevsky.\n\nLearning multiple layers of features from tiny images.\n\nTechnical report, 2009.", "page": 10, "bbox": [307.21356201171875, 456.2727355957031, 1359.0072021484375, 485.9119567871094]}, "115": {"type": "Text", "content": "Alex Krizhevsky, Iya Sutskever, and Geoffrey E. Hinton. Imagenet classification with deep convo\nlutional neural networks. In NJPS, 2012.\n", "chunk": "Alex Krizhevsky, Iya Sutskever, and Geoffrey E. Hinton.\n\nImagenet classification with deep convo\nlutional neural networks.\n\nIn NJPS, 2012.", "page": 10, "bbox": [302.7423095703125, 511.4466552734375, 1388.1357421875, 568.2937622070312]}, "116": {"type": "Text", "content": "\u2019. LeCun, B. Boser, J. Denker, D. Henderson, R. Howard, W. Hubbard, and L. Jackel. Backpropa-\ngation applied to handwritten zip code recognition. Neural Computation, 1:541-551, 1989.\n", "chunk": "\u2019.\n\nLeCun, B. Boser, J. Denker, D. Henderson, R. Howard, W. Hubbard, and L. Jackel.\n\nBackpropa-\ngation applied to handwritten zip code recognition.\n\nNeural Computation, 1:541-551, 1989.", "page": 10, "bbox": [313.88494873046875, 591.6602172851562, 1406.5230712890625, 653.941162109375]}, "117": {"type": "Text", "content": "Dmitry Lepikhin, HyoukJoong Lee, Yuanzhong Xu, Dehao Chen, Orhan Firat, Yanping Huang,\nMaxim Krikun, Noam Shazeer, and Zhifeng Chen. Gshard: Scaling giant models with conditional\ncomputation and automatic sharding. arXiv, 2020.\n", "chunk": "Dmitry Lepikhin, HyoukJoong Lee, Yuanzhong Xu, Dehao Chen, Orhan Firat, Yanping Huang,\nMaxim Krikun, Noam Shazeer, and Zhifeng Chen.\n\nGshard: Scaling giant models with conditional\ncomputation and automatic sharding.\n\narXiv, 2020.", "page": 10, "bbox": [302.3375244140625, 676.2763061523438, 1398.902587890625, 761.8812866210938]}, "118": {"type": "Text", "content": "iunian Harold Li, Mark Yatskar, Da Yin, Cho-Jui Hsieh, and Kai-Wei Chang. VisualBERT: A\nSimple and Performant Baseline for Vision and Language. In Arxiv, 2019.\n", "chunk": "iunian Harold Li, Mark Yatskar, Da Yin, Cho-Jui Hsieh, and Kai-Wei Chang.\n\nVisualBERT: A\nSimple and Performant Baseline for Vision and Language.\n\nIn Arxiv, 2019.", "page": 10, "bbox": [318.29693603515625, 788.5316162109375, 1396.264892578125, 849.3350830078125]}, "119": {"type": "Text", "content": "\u201crancesco Locatello, Dirk Weissenborn, Thomas Unterthiner, Aravindh Mahendran, Georg Heigold,\nJakob Uszkoreit, Alexey Dosovitskiy, and Thomas Kipf. Object-centric learning with slot atten-\ntion. arXiv, 2020.\n", "chunk": "\u201crancesco Locatello, Dirk Weissenborn, Thomas Unterthiner, Aravindh Mahendran, Georg Heigold,\nJakob Uszkoreit, Alexey Dosovitskiy, and Thomas Kipf.\n\nObject-centric learning with slot atten-\ntion.\n\narXiv, 2020.", "page": 10, "bbox": [311.9802551269531, 875.6161499023438, 1403.200439453125, 964.1464233398438]}, "120": {"type": "Text", "content": "Jiasen Lu, Dhruv Batra, Devi Parikh, and Stefan Lee. ViLBERT: Pretraining Task-Agnostic Visi-\nolinguistic Representations for Vision-and-Language Tasks. In NeurIPS. 2019.\n", "chunk": "Jiasen Lu, Dhruv Batra, Devi Parikh, and Stefan Lee.\n\nViLBERT: Pretraining Task-Agnostic Visi-\nolinguistic Representations for Vision-and-Language Tasks.\n\nIn NeurIPS.\n\n2019.", "page": 10, "bbox": [305.4535827636719, 989.439453125, 1397.5118408203125, 1050.2213134765625]}, "121": {"type": "Text", "content": "Dhruv Mahajan, Ross Girshick, Vignesh Ramanathan, Kaiming He, Manohar Paluri, Yixuan Li,\nAshwin Bharambe, and Laurens van der Maaten. Exploring the limits of weakly supervised\npretraining. In ECCV, 2018.\n", "chunk": "Dhruv Mahajan, Ross Girshick, Vignesh Ramanathan, Kaiming He, Manohar Paluri, Yixuan Li,\nAshwin Bharambe, and Laurens van der Maaten.\n\nExploring the limits of weakly supervised\npretraining.\n\nIn ECCV, 2018.", "page": 10, "bbox": [294.8495178222656, 1074.568115234375, 1416.747802734375, 1160.68212890625]}, "122": {"type": "Text", "content": "iki Parmar, Ashish Vaswani, Jakob Uszkoreit, Lukasz Kaiser, Noam Shazeer, Alexander Ku, and\nDustin Tran. Image transformer. In JCML, 2018.\n", "chunk": "iki Parmar, Ashish Vaswani, Jakob Uszkoreit, Lukasz Kaiser, Noam Shazeer, Alexander Ku, and\nDustin Tran.\n\nImage transformer.\n\nIn JCML, 2018.", "page": 10, "bbox": [324.75128173828125, 1357.089111328125, 1406.2081298828125, 1415.2894287109375]}, "123": {"type": "Text", "content": "Siyuan Qiao, Huiyu Wang, Chenxi Liu, Wei Shen, and Alan Yuille. Weight standardization. arXiv\npreprint arXiv:1903.10520, 2019.\n", "chunk": "Siyuan Qiao, Huiyu Wang, Chenxi Liu, Wei Shen, and Alan Yuille.\n\nWeight standardization.\n\narXiv\npreprint arXiv:1903.10520, 2019.", "page": 10, "bbox": [302.2445983886719, 1553.9486083984375, 1421.30517578125, 1615.010986328125]}, "124": {"type": "Text", "content": "\\lec Radford, Karthik Narasimhan, Tim Salimans, and Ilya Sutskever. Improving language under-\nstanding with unsupervised learning. Technical Report, 2018.\n", "chunk": "\\lec Radford, Karthik Narasimhan, Tim Salimans, and Ilya Sutskever.\n\nImproving language under-\nstanding with unsupervised learning.\n\nTechnical Report, 2018.", "page": 10, "bbox": [317.5162048339844, 1637.721435546875, 1395.626708984375, 1696.6939697265625]}, "125": {"type": "Text", "content": "\\lec Radford, Jeff Wu, Rewon Child, David Luan, Dario Amodei, and Ilya Sutskever. Language\nmodels are unsupervised multitask learners. Technical Report, 2019.\n", "chunk": "\\lec Radford, Jeff Wu, Rewon Child, David Luan, Dario Amodei, and Ilya Sutskever.\n\nLanguage\nmodels are unsupervised multitask learners.\n\nTechnical Report, 2019.", "page": 10, "bbox": [313.8739013671875, 1723.886962890625, 1393.2366943359375, 1781.2073974609375]}, "126": {"type": "Text", "content": "Prajit Ramachandran, Niki Parmar, Ashish Vaswani, Irwan Bello, Anselm Levskaya, and Jon Shlens.\nStand-alone self-attention in vision models. In NeurIPS, 2019.\n", "chunk": "Prajit Ramachandran, Niki Parmar, Ashish Vaswani, Irwan Bello, Anselm Levskaya, and Jon Shlens.\n\nStand-alone self-attention in vision models.\n\nIn NeurIPS, 2019.", "page": 10, "bbox": [285.9634094238281, 1807.65380859375, 1399.04248046875, 1867.4208984375]}, "127": {"type": "Text", "content": "Chen Sun, Austin Myers, Carl Vondrick, Kevin Murphy, and Cordelia Schmid. Videobert: A joint\nmodel for video and language representation learning. In JCCV, 2019.\n", "chunk": "Chen Sun, Austin Myers, Carl Vondrick, Kevin Murphy, and Cordelia Schmid.\n\nVideobert: A joint\nmodel for video and language representation learning.\n\nIn JCCV, 2019.", "page": 10, "bbox": [308.61968994140625, 1973.968505859375, 1401.697509765625, 2036.0484619140625]}, "128": {"type": "Text", "content": "Hugo Touvron, Andrea Vedaldi, Matthijs Douze, and Herve Jegou. Fixing the train-test resolution\ndiscrepancy. In NeurIPS. 2019.\n", "chunk": "Hugo Touvron, Andrea Vedaldi, Matthijs Douze, and Herve Jegou.\n\nFixing the train-test resolution\ndiscrepancy.\n\nIn NeurIPS.\n\n2019.", "page": 11, "bbox": [299.67498779296875, 231.5064697265625, 1417.10888671875, 294.28302001953125]}, "129": {"type": "Text", "content": "Hugo Touvron, Andrea Vedaldi, Matthijs Douze, and Herve Jegou. Fixing the train-test resolution\ndiscrepancy: Fixefficientnet. arXiv preprint arXiv:2003.08237, 2020.\n", "chunk": "Hugo Touvron, Andrea Vedaldi, Matthijs Douze, and Herve Jegou.\n\nFixing the train-test resolution\ndiscrepancy: Fixefficientnet.\n\narXiv preprint arXiv:2003.08237, 2020.", "page": 11, "bbox": [294.7736511230469, 316.2967834472656, 1409.7603759765625, 377.19525146484375]}, "130": {"type": "Text", "content": "Michael Tschannen, Josip Djolonga, Marvin Ritter, Aravindh Mahendran, Neil Houlsby, Sylvain\nGelly, and Mario Lucic. Self-supervised learning of video-induced visual invariances. In Pro-\n\nceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), June\nANI\n", "chunk": "Michael Tschannen, Josip Djolonga, Marvin Ritter, Aravindh Mahendran, Neil Houlsby, Sylvain\nGelly, and Mario Lucic.\n\nSelf-supervised learning of video-induced visual invariances.\n\nIn Pro-\n\nceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), June\nANI", "page": 11, "bbox": [301.650634765625, 396.7801513671875, 1400.3441162109375, 501.96795654296875]}, "131": {"type": "Text", "content": "Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez,\nLukasz Kaiser, and Illia Polosukhin. Attention is all you need. In N/PS, 2017.\n", "chunk": "Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez,\nLukasz Kaiser, and Illia Polosukhin.\n\nAttention is all you need.\n\nIn N/PS, 2017.", "page": 11, "bbox": [312.632080078125, 542.8453369140625, 1398.2100830078125, 601.7119140625]}, "132": {"type": "Text", "content": "Huiyu Wang, Yukun Zhu, Bradley Green, Hartwig Adam, Alan Yuille, and Liang-Chieh Cl\nAxial-deeplab: Stand-alone axial-attention for panoptic segmentation. In ECCV, 2020a.\n", "chunk": "Huiyu Wang, Yukun Zhu, Bradley Green, Hartwig Adam, Alan Yuille, and Liang-Chieh Cl\nAxial-deeplab: Stand-alone axial-attention for panoptic segmentation.\n\nIn ECCV, 2020a.", "page": 11, "bbox": [309.6607971191406, 624.8391723632812, 1357.3480224609375, 684.4832763671875]}, "133": {"type": "Text", "content": "luiyu Wang, Yukun Zhu, Bradley Green, Hartwig Adam, Alan Yuille, and Liang-Chieh\nChen. Axial-deeplab: Stand-alone axial-attention for panoptic segmentation. arXiv preprint\narXiv:2003.07853, 2020b.\n", "chunk": "luiyu Wang, Yukun Zhu, Bradley Green, Hartwig Adam, Alan Yuille, and Liang-Chieh\nChen.\n\nAxial-deeplab: Stand-alone axial-attention for panoptic segmentation.\n\narXiv preprint\narXiv:2003.07853, 2020b.", "page": 11, "bbox": [320.33135986328125, 711.3490600585938, 1410.05712890625, 801.5831298828125]}, "134": {"type": "Text", "content": "Jiang Wang, Bei Li, Tong Xiao, Jingbo Zhu, Changliang Li, Derek F. Wong, and Lidia S. Chao.\nLearning deep transformer models for machine translation. In ACL, 2019.\n", "chunk": "Jiang Wang, Bei Li, Tong Xiao, Jingbo Zhu, Changliang Li, Derek F. Wong, and Lidia S. Chao.\n\nLearning deep transformer models for machine translation.\n\nIn ACL, 2019.", "page": 11, "bbox": [311.2361145019531, 821.2322998046875, 1394.38330078125, 881.9940185546875]}, "135": {"type": "Text", "content": "iaolong Wang, Ross Girshick, Abhinav Gupta, and Kaiming He. Non-local neural networks. Ir\n", "chunk": "iaolong Wang, Ross Girshick, Abhinav Gupta, and Kaiming He.\n\nNon-local neural networks.\n\nIr", "page": 11, "bbox": [324.0533142089844, 906.3036499023438, 1389.4351806640625, 935.779296875]}, "136": {"type": "Text", "content": "iaolong Wang, Ross Girshick, Abhinav Gupta, and Kaiming He. Non-local neural networks.\nCVPR, 2018.\n", "chunk": "iaolong Wang, Ross Girshick, Abhinav Gupta, and Kaiming He.\n\nNon-local neural networks.\n\nCVPR, 2018.", "page": 11, "bbox": [323.5283508300781, 906.6820068359375, 1370.069091796875, 965.5972290039062]}, "137": {"type": "Text", "content": "3ichen Wu, Chenfeng Xu, Xiaoliang Dai, Alvin Wan, Peizhao Zhang, Masayoshi Tomizuka, Kurt\nKeutzer, and Peter Vajda. Visual transformers: Token-based image representation and processing\nfor computer vision. arxiv, 2020.\n", "chunk": "3ichen Wu, Chenfeng Xu, Xiaoliang Dai, Alvin Wan, Peizhao Zhang, Masayoshi Tomizuka, Kurt\nKeutzer, and Peter Vajda.\n\nVisual transformers: Token-based image representation and processing\nfor computer vision.\n\narxiv, 2020.", "page": 11, "bbox": [313.50726318359375, 1068.6683349609375, 1397.1363525390625, 1161.40380859375]}, "138": {"type": "Text", "content": "Qizhe Xie, Minh-Thang Luong, Eduard Hovy, and Quoc V. Le. Self-training with noisy studen\nimproves imagenet classification. In CVPR, 2020.\n", "chunk": "Qizhe Xie, Minh-Thang Luong, Eduard Hovy, and Quoc V. Le.\n\nSelf-training with noisy studen\nimproves imagenet classification.\n\nIn CVPR, 2020.", "page": 11, "bbox": [307.8417663574219, 1238.28955078125, 1390.2257080078125, 1297.79150390625]}, "139": {"type": "Text", "content": "Xiaohua Zhai, Avital Oliver, Alexander Kolesnikov, and Lucas Beyer. S4L: Self-Supervised Semi-\nSupervised Learning. In JCCV, 2019a.\n", "chunk": "Xiaohua Zhai, Avital Oliver, Alexander Kolesnikov, and Lucas Beyer.\n\nS4L: Self-Supervised Semi-\nSupervised Learning.\n\nIn JCCV, 2019a.", "page": 11, "bbox": [302.4049072265625, 1320.1739501953125, 1402.9578857421875, 1380.2052001953125]}, "140": {"type": "Text", "content": "Xiaohua Zhai, Joan Puigcerver, Alexander Kolesnikov, Pierre Ruyssen, Carlos Riquelme, Mario\nLucic, Josip Djolonga, Andre Susano Pinto, Maxim Neumann, Alexey Dosovitskiy, et al. A\nlarge-scale study of representation learning with the visual task adaptation benchmark. arXiv\npreprint arXiv:1910.04867, 2019b.\n", "chunk": "Xiaohua Zhai, Joan Puigcerver, Alexander Kolesnikov, Pierre Ruyssen, Carlos Riquelme, Mario\nLucic, Josip Djolonga, Andre Susano Pinto, Maxim Neumann, Alexey Dosovitskiy, et al.\n\nA\nlarge-scale study of representation learning with the visual task adaptation benchmark.\n\narXiv\npreprint arXiv:1910.04867, 2019b.", "page": 11, "bbox": [305.38153076171875, 1401.87060546875, 1401.4813232421875, 1532.4730224609375]}, "141": {"type": "Text", "content": "Hengshuang Zhao, Jiaya Jia, and Vladlen Koltun. Exploring self-attention for image recognition. In\nCVPR, 2020.\n", "chunk": "Hengshuang Zhao, Jiaya Jia, and Vladlen Koltun.\n\nExploring self-attention for image recognition.\n\nIn\nCVPR, 2020.", "page": 11, "bbox": [301.43341064453125, 1548.1871337890625, 1403.771484375, 1604.3341064453125]}, "142": {"type": "Text", "content": "Table 3: Hyperparameters for training. All models are trained with a batch size of 4096 and learn-\ning rate warmup of 10k steps. For ImageNet we found it beneficial to additionally apply gradient\nclipping at global norm 1. Training resolution is 224.\n", "chunk": "Table 3: Hyperparameters for training.\n\nAll models are trained with a batch size of 4096 and learn-\ning rate warmup of 10k steps.\n\nFor ImageNet we found it beneficial to additionally apply gradient\nclipping at global norm 1.\n\nTraining resolution is 224.", "page": 12, "bbox": [306.0784606933594, 696.0006103515625, 1399.221923828125, 791.2332153320312]}, "143": {"type": "Text", "content": "Standard qkv self-attention (SA, Vaswani et al. (2017)) is a popular building block for neural archi-\nfectures. For each element in an input sequence z \u20ac R\u201c*\u201d, we compute a weighted sum over all\nvalues v in the sequence. The attention weights A;; are based on the pairwise similarity between\ntwo elements of the sequence and their respective query q' and key k\u2019 representations.\n", "chunk": "Standard qkv self-attention (SA, Vaswani et al.\n\n(2017)) is a popular building block for neural archi-\nfectures.\n\nFor each element in an input sequence z \u20ac R\u201c*\u201d, we compute a weighted sum over all\nvalues v in the sequence.\n\nThe attention weights A;; are based on the pairwise similarity between\ntwo elements of the sequence and their respective query q' and key k\u2019 representations.", "page": 12, "bbox": [307.25048828125, 980.5921630859375, 1399.8507080078125, 1110.2730712890625]}, "144": {"type": "Text", "content": "Multihead self-attention (MSA) is an extension of SA in which we run k self-attention operations,\ncalled \u201cheads\u201d, in parallel, and project their concatenated outputs. To keep compute and number of\nparameters constant when changing k, D), (Eq. 5) is typically set to D/k.\n", "chunk": "Multihead self-attention (MSA) is an extension of SA in which we run k self-attention operations,\ncalled \u201cheads\u201d, in parallel, and project their concatenated outputs.\n\nTo keep compute and number of\nparameters constant when changing k, D), (Eq.\n\n5) is typically set to D/k.", "page": 12, "bbox": [300.44598388671875, 1296.3121337890625, 1404.7677001953125, 1387.7802734375]}, "145": {"type": "Text", "content": "MSA(z) = [SAi(z);SAo(z);--- ;SAx(2)] Usa\n", "chunk": "MSA(z) = [SAi(z);SAo(z);--- ;SAx(2)] Usa", "page": 12, "bbox": [408.0628967285156, 1406.5426025390625, 968.468994140625, 1442.555908203125]}, "146": {"type": "Text", "content": "Table 3 summarizes our training setups for our different models. We found strong regularization\nto be key when training models from scratch on ImageNet. Dropout, when used, is applied after\nevery dense layer except for the the qkv-projections and directly after adding positional- to patch\nembeddings. Hybrid models are trained with the exact setup as their ViT counterparts. Finally, all\ntraining is done on resolution 224.\n", "chunk": "Table 3 summarizes our training setups for our different models.\n\nWe found strong regularization\nto be key when training models from scratch on ImageNet.\n\nDropout, when used, is applied after\nevery dense layer except for the the qkv-projections and directly after adding positional- to patch\nembeddings.\n\nHybrid models are trained with the exact setup as their ViT counterparts.\n\nFinally, all\ntraining is done on resolution 224.", "page": 12, "bbox": [305.7555847167969, 1608.677978515625, 1401.6014404296875, 1769.235107421875]}, "147": {"type": "Text", "content": "We fine-tune all ViT models using SGD with a momentum of 0.9. We run a small grid search over\nlearning rates, see learning rate ranges in Table 4. To do so, we use small sub-splits from the training\nset (10% for Pets and Flowers, 2% for CIFAR, 1% ImageNet) as development set and train on the\nremaining data. For final results we train on the entire training set and evaluate on the respective\ntest data. For fine-tuning ResNets and hybrid models we use the exact same setup, with the only\nexception of ImageNet where we add another value 0.06 to the learning rate sweep. Additionally,\n", "chunk": "We fine-tune all ViT models using SGD with a momentum of 0.9.\n\nWe run a small grid search over\nlearning rates, see learning rate ranges in Table 4.\n\nTo do so, we use small sub-splits from the training\nset (10% for Pets and Flowers, 2% for CIFAR, 1% ImageNet) as development set and train on the\nremaining data.\n\nFor final results we train on the entire training set and evaluate on the respective\ntest data.\n\nFor fine-tuning ResNets and hybrid models we use the exact same setup, with the only\nexception of ImageNet where we add another value 0.06 to the learning rate sweep.\n\nAdditionally,", "page": 12, "bbox": [303.53271484375, 1849.8763427734375, 1402.0462646484375, 2037.11865234375]}, "148": {"type": "Title", "content": "B.1.1 FINE-TUNING\n", "chunk": "B.1.1 FINE-TUNING", "page": 12, "bbox": [298.97467041015625, 1798.82080078125, 561.3041381835938, 1832.133056640625]}, "149": {"type": "Title", "content": "MULTIHEAD SELF-ATTENTION\n", "chunk": "MULTIHEAD SELF-ATTENTION", "page": 12, "bbox": [334.32000732421875, 915.794921875, 794.61572265625, 952.7708740234375]}, "150": {"type": "Title", "content": "APPENDIX\n", "chunk": "APPENDIX", "page": 12, "bbox": [305.0352478027344, 845.3150634765625, 450.64666748046875, 877.919677734375]}, "151": {"type": "Table", "content": "Models Dataset Epochs Base LR LRdecay Weightdecay Dropout\nViT-B/{ 16,32} JFT-300M 7 8.1074 linear 0.1 0.0\nViT-L/32 JFT-300M 7 6-104 linear 0.1 0.0\nViT-L/16 JFT-300M T4 4.10-4 linear 0.1 0.0\nViT-H/14 JFT-300M 14 3-104 linear 0.1 0.0\nR50x{1,2} JFT-300M 7 10-* linear 0.1 0.0\nRIOIx1 JFT-300M 7 8.1074 linear 0.1 0.0\nR152x{1,2} JFT-300M 7 6-104 linear 0.1 0.0\nR50+ViT-B/{16,32} JFT-300M 7 8.1074 linear 0.1 0.0\nR50+ViT-L/32 JFT-300M 7 2-104 linear 0.1 0.0\nR50+ViT-L/16 JFT-300M T4 4.10-4 linear 0.1 0.0\nViT-B/{ 16,32} ImageNet-21k 90 10-* linear 0.03 0.1\nViT-L/{16,32} ImageNet-21k 30/90 10-* linear 0.03 0.1\nViT-* ImageNet 300 3.107% cosine 0.3 0.1\n", "chunk": "Models Dataset Epochs Base LR LRdecay Weightdecay Dropout\nViT-B/{ 16,32} JFT-300M 7 8.1074 linear 0.1 0.0\nViT-L/32 JFT-300M 7 6-104 linear 0.1 0.0\nViT-L/16 JFT-300M T4 4.10-4 linear 0.1 0.0\nViT-H/14 JFT-300M 14 3-104 linear 0.1 0.0\nR50x{1,2} JFT-300M 7 10-* linear 0.1 0.0\nRIOIx1 JFT-300M 7 8.1074 linear 0.1 0.0\nR152x{1,2} JFT-300M 7 6-104 linear 0.1 0.0\nR50+ViT-B/{16,32} JFT-300M 7 8.1074 linear 0.1 0.0\nR50+ViT-L/32 JFT-300M 7 2-104 linear 0.1 0.0\nR50+ViT-L/16 JFT-300M T4 4.10-4 linear 0.1 0.0\nViT-B/{ 16,32} ImageNet-21k 90 10-* linear 0.03 0.1\nViT-L/{16,32} ImageNet-21k 30/90 10-* linear 0.03 0.1\nViT-* ImageNet 300 3.107% cosine 0.3 0.1", "page": 12, "bbox": [314.6497802734375, 226.44747924804688, 1395.6591796875, 673.1580200195312]}, "152": {"type": "Text", "content": "Table 4: Hyperparameters for fine-tuning. All models are fine-tuned with cosine learning rate decay,\na batch size of 512, no weight decay, and grad clipping at global norm 1. If not mentioned otherwise,\nfine-tuning resolution is 384.\n", "chunk": "Table 4: Hyperparameters for fine-tuning.\n\nAll models are fine-tuned with cosine learning rate decay,\na batch size of 512, no weight decay, and grad clipping at global norm 1.\n\nIf not mentioned otherwise,\nfine-tuning resolution is 384.", "page": 13, "bbox": [298.90185546875, 476.4926452636719, 1408.140625, 568.1829833984375]}, "153": {"type": "Text", "content": "for ResNets we also run the setup of Kolesnikov et al. (2020) and select the best results across\nthis run and our sweep. Finally, if not mentioned otherwise, all fine-tuning experiments run at 384\nresolution (running fine-tuning at different resolution than training is common practice (Kolesnikov\net al., 2020)).\n", "chunk": "for ResNets we also run the setup of Kolesnikov et al.\n\n(2020) and select the best results across\nthis run and our sweep.\n\nFinally, if not mentioned otherwise, all fine-tuning experiments run at 384\nresolution (running fine-tuning at different resolution than training is common practice (Kolesnikov\net al., 2020)).", "page": 13, "bbox": [296.7345886230469, 640.3866577148438, 1404.1080322265625, 760.5717163085938]}, "154": {"type": "Text", "content": "When transferring ViT models to another dataset, we remove the whole head (two linear layers) and\nreplace it by a single, zero-initialized linear layer outputting the number of classes required by the\ntarget dataset. We found this to be a little more robust than simply re-initializing the very last layer.\n", "chunk": "When transferring ViT models to another dataset, we remove the whole head (two linear layers) and\nreplace it by a single, zero-initialized linear layer outputting the number of classes required by the\ntarget dataset.\n\nWe found this to be a little more robust than simply re-initializing the very last layer.", "page": 13, "bbox": [297.41485595703125, 776.80712890625, 1430.32421875, 870.9312133789062]}, "155": {"type": "Text", "content": "For VTAB we follow the protocol in Kolesnikov et al. (2020), and use the same hyperparameter\nsetting for all tasks. We use a learning rate of 0.01 and train for 2500 steps (Tab. 4). We chose this\nsetting by running a small sweep over two learning rates and two schedules, and selecting the setting\nwith the highest VTAB score on the 200-example validation sets. We follow the pre-processing used\nin Kolesnikov et al. (2020), except that we do not use task-specific input resolutions. Instead we find\nthat Vision Transformer benefits most from a high resolution (384 x 384) for all tasks.\n", "chunk": "For VTAB we follow the protocol in Kolesnikov et al.\n\n(2020), and use the same hyperparameter\nsetting for all tasks.\n\nWe use a learning rate of 0.01 and train for 2500 steps (Tab.\n\n4).\n\nWe chose this\nsetting by running a small sweep over two learning rates and two schedules, and selecting the setting\nwith the highest VTAB score on the 200-example validation sets.\n\nWe follow the pre-processing used\nin Kolesnikov et al.\n\n(2020), except that we do not use task-specific input resolutions.\n\nInstead we find\nthat Vision Transformer benefits most from a high resolution (384 x 384) for all tasks.", "page": 13, "bbox": [299.43927001953125, 883.521484375, 1403.531005859375, 1069.6641845703125]}, "156": {"type": "Text", "content": "We employ the masked patch prediction objective for preliminary self-supervision experiments. To\ndo so we corrupt 50% of patch embeddings by either replacing their embeddings with a learnable\n[mask] embedding (80%), a random other patch embedding (10%) or just keeping them as is\n(10%). This setup is very similar to the one used for language by Devlin et al. (2019). Finally, we\npredict the 3-bit, mean color (i.e., 512 colors in total) of every corrupted patch using their respective\npatch representations.\n", "chunk": "We employ the masked patch prediction objective for preliminary self-supervision experiments.\n\nTo\ndo so we corrupt 50% of patch embeddings by either replacing their embeddings with a learnable\n[mask] embedding (80%), a random other patch embedding (10%) or just keeping them as is\n(10%).\n\nThis setup is very similar to the one used for language by Devlin et al.\n\n(2019).\n\nFinally, we\npredict the 3-bit, mean color (i.e., 512 colors in total) of every corrupted patch using their respective\npatch representations.", "page": 13, "bbox": [299.9913330078125, 1168.00634765625, 1405.206298828125, 1352.8994140625]}, "157": {"type": "Text", "content": "We trained our self-supervised model for 1M steps (ca. 14 epochs) with batch size 4096 on JFT. We\nuse Adam, with a base learning rate of 2- 10~+, warmup of 10k steps and cosine learning rate decay.\nAs prediction targets for pretraining we tried the following settings: 1) predicting only the mean,\n3bit color (i.e., 1 prediction of 512 colors), 2) predicting a 4 x 4 downsized version of the 16 x 16\npatch with 3bit colors in parallel (i.e., 16 predictions of 512 colors), 3) regression on the full patch\nusing L2 (i.e., 256 regressions on the 3 RGB channels). Surprisingly, we found that all worked quite\nwell, though L2 was slightly worse. We report final results only for option 1) because it has shown\nbest few-shot performance. We also experimented with 15% corruption rate as used by Devlin et al.\n(2019) but results were also slightly worse on our few-shot metrics.\n", "chunk": "We trained our self-supervised model for 1M steps (ca.\n\n14 epochs) with batch size 4096 on JFT.\n\nWe\nuse Adam, with a base learning rate of 2- 10~+, warmup of 10k steps and cosine learning rate decay.\n\nAs prediction targets for pretraining we tried the following settings: 1) predicting only the mean,\n3bit color (i.e., 1 prediction of 512 colors), 2) predicting a 4 x 4 downsized version of the 16 x 16\npatch with 3bit colors in parallel (i.e., 16 predictions of 512 colors), 3) regression on the full patch\nusing L2 (i.e., 256 regressions on the 3 RGB channels).\n\nSurprisingly, we found that all worked quite\nwell, though L2 was slightly worse.\n\nWe report final results only for option 1) because it has shown\nbest few-shot performance.\n\nWe also experimented with 15% corruption rate as used by Devlin et al.", "page": 13, "bbox": [300.8984680175781, 1365.708251953125, 1405.6309814453125, 1649.027587890625]}, "158": {"type": "Text", "content": "We trained our self-supervised model for 1M steps (ca. 14 epochs) with batch size 4096 on JFT. We\nuse Adam, with a base learning rate of 2- 10~+, warmup of 10k steps and cosine learning rate decay.\nAs prediction targets for pretraining we tried the following settings: 1) predicting only the mean,\n3bit color (i.e., 1 prediction of 512 colors), 2) predicting a 4 x 4 downsized version of the 16 x 16\npatch with 3bit colors in parallel (i.e., 16 predictions of 512 colors), 3) regression on the full patch\nusing L2 (i.e., 256 regressions on the 3 RGB channels). Surprisingly, we found that all worked quite\nwell, though L2 was slightly worse. We report final results only for option 1) because it has shown\nbest few-shot performance. We also experimented with 15% corruption rate as used by Devlin et al.\n(2019) but results were also slightly worse on our few-shot metrics.\n", "chunk": "(2019) but results were also slightly worse on our few-shot metrics.", "page": 13, "bbox": [300.8984680175781, 1365.708251953125, 1405.6309814453125, 1649.027587890625]}, "159": {"type": "Text", "content": "Lastly, we would like to remark that our instantiation of masked patch prediction doesn\u2019t require\nsuch an enormous amount of pretraining nor a large dataset such as JFT in order to lead to sim-\nilar performance gains on ImageNet classification. That is, we observed diminishing returns on\ndownstream performance after 100k pretraining steps, and see similar gains when pretraining on\nImageNet.\n", "chunk": "Lastly, we would like to remark that our instantiation of masked patch prediction doesn\u2019t require\nsuch an enormous amount of pretraining nor a large dataset such as JFT in order to lead to sim-\nilar performance gains on ImageNet classification.\n\nThat is, we observed diminishing returns on\ndownstream performance after 100k pretraining steps, and see similar gains when pretraining on\nImageNet.", "page": 13, "bbox": [304.06610107421875, 1658.4989013671875, 1403.3291015625, 1814.6939697265625]}, "160": {"type": "Text", "content": "We report detailed results corresponding to the figures presented in the paper. Table 5 corresponds\nto Figure 3 from the paper and shows transfer performance of different ViT models pre-trained\non datasets of increasing size: ImageNet, ImageNet-21k, and JFT-300M. Table 6 corresponds to\n", "chunk": "We report detailed results corresponding to the figures presented in the paper.\n\nTable 5 corresponds\nto Figure 3 from the paper and shows transfer performance of different ViT models pre-trained\non datasets of increasing size: ImageNet, ImageNet-21k, and JFT-300M.\n\nTable 6 corresponds to", "page": 13, "bbox": [297.40972900390625, 1943.2288818359375, 1406.4642333984375, 2037.6468505859375]}, "161": {"type": "Title", "content": "B.1.2  SELF-SUPERVISION\n", "chunk": "B.1.2  SELF-SUPERVISION", "page": 13, "bbox": [300.31085205078125, 1110.0650634765625, 625.5448608398438, 1145.985595703125]}, "162": {"type": "Title", "content": "ADDITIONAL RESULTS\n", "chunk": "ADDITIONAL RESULTS", "page": 13, "bbox": [339.2394104003906, 1870.418701171875, 679.3681030273438, 1905.810302734375]}, "163": {"type": "Figure", "content": "Dataset\n\nSteps\n\nBase LR\n\nImageNet\n\nCIFAR 100\nCIFAR10\nOxford-IIIT Pets\nOxford Flowers-102\nVTAB (19 tasks)\n\n20000\n10000\n10000\n500\n500\n2500\n\n{0.003, 0.01, 0.03, 0.06}\n\n{0.001, 0.003, 0.01, 0.03}\n\n{0.001, 0.003, 0.01, 0.03}\n\n{0.001, 0.003, 0.01, 0.03}\n\n{0.001, 0.003, 0.01, 0.03}\n0.01\n\n", "chunk": "Dataset\n\nSteps\n\nBase LR\n\nImageNet\n\nCIFAR 100\nCIFAR10\nOxford-IIIT Pets\nOxford Flowers-102\nVTAB (19 tasks)\n\n20000\n10000\n10000\n500\n500\n2500\n\n{0.003, 0.01, 0.03, 0.06}\n\n{0.001, 0.003, 0.01, 0.03}\n\n{0.001, 0.003, 0.01, 0.03}\n\n{0.001, 0.003, 0.01, 0.03}\n\n{0.001, 0.003, 0.01, 0.03}\n0.01", "page": 13, "bbox": [524.9080200195312, 210.67193603515625, 1181.40185546875, 455.2314147949219]}, "164": {"type": "Text", "content": "Table 5: Top! accuracy (in %) of Vision Transformer on various datasets when pre-trained on Im-\nageNet, ImageNet-21k or JFT300M. These values correspond to Figure 3 in the main text. Models\nare fine-tuned at 384 resolution. Note that the ImageNet results are computed without additional\ntechniques (Polyak averaging and 512 resolution images) used to achieve results in Table 2.\n", "chunk": "Table 5: Top!\n\naccuracy (in %) of Vision Transformer on various datasets when pre-trained on Im-\nageNet, ImageNet-21k or JFT300M.\n\nThese values correspond to Figure 3 in the main text.\n\nModels\nare fine-tuned at 384 resolution.\n\nNote that the ImageNet results are computed without additional\ntechniques (Polyak averaging and 512 resolution images) used to achieve results in Table 2.", "page": 14, "bbox": [301.16595458984375, 865.5574340820312, 1406.455078125, 993.4539184570312]}, "165": {"type": "Text", "content": "fable 6: Detailed results of model scaling experiments. These correspond to Figure 5 in the mai\nyaper. We show transfer accuracy on several datasets, as well as the pre-training compute (in ex\n\\FLOPs).\n", "chunk": "fable 6: Detailed results of model scaling experiments.\n\nThese correspond to Figure 5 in the mai\nyaper.\n\nWe show transfer accuracy on several datasets, as well as the pre-training compute (in ex\n\\FLOPs).", "page": 14, "bbox": [312.0493469238281, 1576.46875, 1383.697998046875, 1674.56982421875]}, "166": {"type": "Text", "content": "Figure 5 from the paper and shows the transfer performance of ViT, ResNet, and hybrid models of\nvarying size, as well as the estimated computational cost of their pre-training.\n", "chunk": "Figure 5 from the paper and shows the transfer performance of ViT, ResNet, and hybrid models of\nvarying size, as well as the estimated computational cost of their pre-training.", "page": 14, "bbox": [297.8818359375, 1735.617431640625, 1395.60400390625, 1795.3284912109375]}, "167": {"type": "Text", "content": "ResNets are typically trained with SGD and our use of Adam as optimizer is quite unconventional.\nHere we show the experiments that motivated this choice. Namely, we compare the fine-tuning\n", "chunk": "ResNets are typically trained with SGD and our use of Adam as optimizer is quite unconventional.\n\nHere we show the experiments that motivated this choice.\n\nNamely, we compare the fine-tuning", "page": 14, "bbox": [298.89959716796875, 1974.4605712890625, 1396.406005859375, 2035.7650146484375]}, "168": {"type": "Title", "content": "SGD vs. ADAM FOR RESNETS\n", "chunk": "SGD vs. ADAM FOR RESNETS", "page": 14, "bbox": [323.9072570800781, 1914.19091796875, 740.931884765625, 1947.6025390625]}, "169": {"type": "Table", "content": "Epochs ImageNet ImageNet ReaL CIFAR-10 CIFAR-100 Pets Flowers exaFLOPs\n\nname\n\nViT-B/32 7 80.73 86.27 98.61 90.49 93.40 99.27 55\nViT-B/16 7 84.15 88.85 99.00 91.87 95.80 99.56 224\nViT-L/32 7 84.37 88.28 99.19 92.52 95.83 99.45 196\nViT-L/16 7 86.30 89.43 99.38 93.46 96.81 99.66 783\nViT-L/16 14 87.12 89.99 99.38 94.04 97.11 99.56 1567\nViT-H/14 14 88.08 90.36 99.50 94.71 97.11 99.71 4262\nResNet50x1 7 71.54 84.56 97.67 86.07 91.11 94.26 50\nResNet50x2 7 82.12 87.94 98.29 89.20 93.43 97.02 199\nResNet101x1 7 80.67 87.07 98.48 89.17 94.08 95.95 96\nResNet152x1 7 81.88 87.96 98.82 90.22 94.17 96.94 141\nResNet152x2 7 84.97 89.69 99.06 92.05 95.37 98.62 563\nResNet152x2 14 85.56 89.89 99.24 91.92 95.75 98.75 1126\nResNet200x3 14 87.22 90.15 99.34 93.53 96.32 99.04 3306\nR50x1+ViT-B/32 7 84.90 89.15 99.01 92.24 95.75 99.46 106\nR50x1+ViT-B/16 7 85.58 89.65 99.14 92.63 96.65 99.40 274\nR50x1+ViT-L/32 7 85.68 89.04 99.24 92.93 96.97 99.43 246\nR50x1+ViT-L/16 7 86.60 89.72 99.18 93.64 97.03 99.40 859\nR50x1+ViT-L/16 14 87.12 89.76 99.31 93.89 97.36 99.11 1668\n\n", "chunk": "Epochs ImageNet ImageNet ReaL CIFAR-10 CIFAR-100 Pets Flowers exaFLOPs\n\nname\n\nViT-B/32 7 80.73 86.27 98.61 90.49 93.40 99.27 55\nViT-B/16 7 84.15 88.85 99.00 91.87 95.80 99.56 224\nViT-L/32 7 84.37 88.28 99.19 92.52 95.83 99.45 196\nViT-L/16 7 86.30 89.43 99.38 93.46 96.81 99.66 783\nViT-L/16 14 87.12 89.99 99.38 94.04 97.11 99.56 1567\nViT-H/14 14 88.08 90.36 99.50 94.71 97.11 99.71 4262\nResNet50x1 7 71.54 84.56 97.67 86.07 91.11 94.26 50\nResNet50x2 7 82.12 87.94 98.29 89.20 93.43 97.02 199\nResNet101x1 7 80.67 87.07 98.48 89.17 94.08 95.95 96\nResNet152x1 7 81.88 87.96 98.82 90.22 94.17 96.94 141\nResNet152x2 7 84.97 89.69 99.06 92.05 95.37 98.62 563\nResNet152x2 14 85.56 89.89 99.24 91.92 95.75 98.75 1126\nResNet200x3 14 87.22 90.15 99.34 93.53 96.32 99.04 3306\nR50x1+ViT-B/32 7 84.90 89.15 99.01 92.24 95.75 99.46 106\nR50x1+ViT-B/16 7 85.58 89.65 99.14 92.63 96.65 99.40 274\nR50x1+ViT-L/32 7 85.68 89.04 99.24 92.93 96.97 99.43 246\nR50x1+ViT-L/16 7 86.60 89.72 99.18 93.64 97.03 99.40 859\nR50x1+ViT-L/16 14 87.12 89.76 99.31 93.89 97.36 99.11 1668", "page": 14, "bbox": [299.84796142578125, 1015.1350708007812, 1402.312255859375, 1563.3712158203125]}, "170": {"type": "Text", "content": "Table 7: Fine-tuning ResNet models pre-trained with Adam and SGD\n", "chunk": "Table 7: Fine-tuning ResNet models pre-trained with Adam and SGD", "page": 15, "bbox": [458.71563720703125, 505.84735107421875, 1229.16796875, 535.9833374023438]}, "171": {"type": "Text", "content": "performance of two ResNets \u2014 50x1 and 152x2 \u2014 pre-trained on JFT with SGD and Adam. For\nSGD, we use the hyperparameters recommended by Kolesnikov et al. (2020). Results are presented\nin Table 7. Adam pre-training outperforms SGD pre-training on most datasets and on average.\nThis justifies the choice of Adam as the optimizer used to pre-train ResNets on JFT. Note that the\nabsolute numbers are lower than those reported by Kolesnikov et al. (2020), since we pre-train only\nfor 7 epochs, not 30.\n", "chunk": "performance of two ResNets \u2014 50x1 and 152x2 \u2014 pre-trained on JFT with SGD and Adam.\n\nFor\nSGD, we use the hyperparameters recommended by Kolesnikov et al.\n\n(2020).\n\nResults are presented\nin Table 7.\n\nAdam pre-training outperforms SGD pre-training on most datasets and on average.\n\nThis justifies the choice of Adam as the optimizer used to pre-train ResNets on JFT.\n\nNote that the\nabsolute numbers are lower than those reported by Kolesnikov et al.\n\n(2020), since we pre-train only\nfor 7 epochs, not 30.", "page": 15, "bbox": [306.2642517089844, 1054.777587890625, 1404.5634765625, 1243.392578125]}, "172": {"type": "Text", "content": "We ran ablations on scaling different dimensions of the Transformer architecture to find out which\nare best suited for scaling to very large models. Figure 8 shows 5-shot performance on ImageNet\nfor different configurations. All configurations are based on a ViT model with 8 layers, D = 1024,\nDyrp = 2048 and a patch size of 32, the intersection of all lines. We can see that scaling the\ndepth results in the biggest improvements which are clearly visible up until 64 layers. However,\ndiminishing returns are already visible after 16 layers. Interestingly, scaling the width of the net-\nwork seems to result in the smallest changes. Decreasing the patch size and thus increasing the\neffective sequence length shows surprisingly robust improvements without introducing parameters.\nThese findings suggest that compute might be a better predictor of performance than the number of\nparameters, and that scaling should emphasize depth over width if any. Overall, we find that scaling\nall dimensions proportionally results in robust improvements.\n", "chunk": "We ran ablations on scaling different dimensions of the Transformer architecture to find out which\nare best suited for scaling to very large models.\n\nFigure 8 shows 5-shot performance on ImageNet\nfor different configurations.\n\nAll configurations are based on a ViT model with 8 layers, D = 1024,\nDyrp = 2048 and a patch size of 32, the intersection of all lines.\n\nWe can see that scaling the\ndepth results in the biggest improvements which are clearly visible up until 64 layers.\n\nHowever,\ndiminishing returns are already visible after 16 layers.\n\nInterestingly, scaling the width of the net-\nwork seems to result in the smallest changes.\n\nDecreasing the patch size and thus increasing the\neffective sequence length shows surprisingly robust improvements without introducing parameters.\n\nThese findings suggest that compute might be a better predictor of performance than the number of\nparameters, and that scaling should emphasize depth over width if any.\n\nOverall, we find that scaling\nall dimensions proportionally results in robust improvements.", "page": 15, "bbox": [305.186767578125, 1334.767578125, 1401.5804443359375, 1683.0609130859375]}, "173": {"type": "Text", "content": "In order to stay as close as possible to the original Transformer model, we made use of an additional\n\n[class] token, which is taken as image representation. The output of this token is then trans-\nformed into a class prediction via a small multi-layer perceptron (MLP) with tanh as non-linearity\nin the single hidden layer.\n", "chunk": "In order to stay as close as possible to the original Transformer model, we made use of an additional\n\n[class] token, which is taken as image representation.\n\nThe output of this token is then trans-\nformed into a class prediction via a small multi-layer perceptron (MLP) with tanh as non-linearity\nin the single hidden layer.", "page": 15, "bbox": [303.8602294921875, 1772.33203125, 1400.0115966796875, 1899.2979736328125]}, "174": {"type": "Text", "content": "This design is inherited from the Transformer model for text, and we use it throughout the mai\npaper. An initial attempt at using only image-patch embeddings, globally average-pooling (GAP\nthem, followed by a linear classifier\u2014just like ResNet\u2019s final feature map\u2014performed very poorly\nHowever, we found that this is neither due to the extra token, nor to the GAP operation. Instead\n", "chunk": "This design is inherited from the Transformer model for text, and we use it throughout the mai\npaper.\n\nAn initial attempt at using only image-patch embeddings, globally average-pooling (GAP\nthem, followed by a linear classifier\u2014just like ResNet\u2019s final feature map\u2014performed very poorly\nHowever, we found that this is neither due to the extra token, nor to the GAP operation.\n\nInstead", "page": 15, "bbox": [305.5595397949219, 1911.849853515625, 1386.0107421875, 2037.18603515625]}, "175": {"type": "Title", "content": "D.3. HEAD TYPE AND CLASS TOKEN\n", "chunk": "D.3.\n\nHEAD TYPE AND CLASS TOKEN", "page": 15, "bbox": [302.0489501953125, 1718.6141357421875, 754.4906005859375, 1751.6826171875]}, "176": {"type": "Title", "content": "D.2. TRANSFORMER SHAPE\n", "chunk": "D.2.\n\nTRANSFORMER SHAPE", "page": 15, "bbox": [303.59320068359375, 1281.2918701171875, 640.4990234375, 1315.038330078125]}, "177": {"type": "Figure", "content": "0.6\n\n0.5\n\nae\n-\u00a2-\n\n\u00bb Patch size\n\nModels\nAll\nDepth\n\nWidth MLP\nWidth\n\nAverage 5shot\n\nModels\n\u2014e All\n\nDepth\nPatch size\nWidth MLP\nWidth\n\n10\u00b0\nRelative Compute\n\n10%\n\n10\u00b0 10\nRelative Compute\n\n", "chunk": "0.6\n\n0.5\n\nae\n-\u00a2-\n\n\u00bb Patch size\n\nModels\nAll\nDepth\n\nWidth MLP\nWidth\n\nAverage 5shot\n\nModels\n\u2014e All\n\nDepth\nPatch size\nWidth MLP\nWidth\n\n10\u00b0\nRelative Compute\n\n10%\n\n10\u00b0 10\nRelative Compute", "page": 15, "bbox": [329.2093200683594, 561.79443359375, 1341.6151123046875, 926.9450073242188]}, "178": {"type": "Figure", "content": "ResNet152x2\n\nResNet50\nDataset Adam SGD Adam SGD\nImageNet 77.54 78.24 84.97 84.37\nCIFARIO 97.67 97.46 99.06 99.07\nCIFAR100 86.07 85.17 92.05 91.06\nOxford-IIIT Pets 91.11 91.00 95.37 94.79\nOxford Flowers-102 94.26 92.06 98.62 99.32\nAverage 89.33 88.79 94.01 93.72\n", "chunk": "ResNet152x2\n\nResNet50\nDataset Adam SGD Adam SGD\nImageNet 77.54 78.24 84.97 84.37\nCIFARIO 97.67 97.46 99.06 99.07\nCIFAR100 86.07 85.17 92.05 91.06\nOxford-IIIT Pets 91.11 91.00 95.37 94.79\nOxford Flowers-102 94.26 92.06 98.62 99.32\nAverage 89.33 88.79 94.01 93.72", "page": 15, "bbox": [542.1007690429688, 214.9519805908203, 1156.75537109375, 490.5387268066406]}, "179": {"type": "Text", "content": "Figure 9: Comparison of class-token and global average pooling classifiers. Both work similarly\nwell, but require different learning-rates.\n", "chunk": "Figure 9: Comparison of class-token and global average pooling classifiers.\n\nBoth work similarly\nwell, but require different learning-rates.", "page": 16, "bbox": [305.76031494140625, 689.063720703125, 1395.2479248046875, 749.3203735351562]}, "180": {"type": "Text", "content": "Table 8: Results of the ablation study on positional embeddings with ViT-B/16 model evaluated c\nImageNet 5-shot linear.\n", "chunk": "Table 8: Results of the ablation study on positional embeddings with ViT-B/16 model evaluated c\nImageNet 5-shot linear.", "page": 16, "bbox": [301.1533203125, 992.4457397460938, 1378.6640625, 1051.2191162109375]}, "181": {"type": "Text", "content": "he difference in performance is fully explained by the requirement for a different learning-rate, see\nFigure 9.\n", "chunk": "he difference in performance is fully explained by the requirement for a different learning-rate, see\nFigure 9.", "page": 16, "bbox": [310.16455078125, 1112.31640625, 1394.144287109375, 1172.1759033203125]}, "182": {"type": "Text", "content": "the difference in performance is fully explained by the requirement for a different learning-rate, see\n", "chunk": "the difference in performance is fully explained by the requirement for a different learning-rate, see", "page": 16, "bbox": [277.4381103515625, 1112.8603515625, 1393.1878662109375, 1142.500732421875]}, "183": {"type": "Text", "content": "We ran ablations on different ways of encoding spatial information using positional embedding. We\ntried the following cases:\n", "chunk": "We ran ablations on different ways of encoding spatial information using positional embedding.\n\nWe\ntried the following cases:", "page": 16, "bbox": [301.169189453125, 1273.779052734375, 1412.85205078125, 1331.998046875]}, "184": {"type": "Text", "content": "1-dimensional positional embedding: Considering the inputs as a sequence of patches it\nthe raster order (default across all other experiments in this paper).\n", "chunk": "1-dimensional positional embedding: Considering the inputs as a sequence of patches it\nthe raster order (default across all other experiments in this paper).", "page": 16, "bbox": [395.8040466308594, 1406.59814453125, 1389.0838623046875, 1464.6160888671875]}, "185": {"type": "Text", "content": "In addition to different ways of encoding spatial information, we also tried different ways of in-\ncorporating this information in our model. For the 1-dimensional and 2-dimensional positional\nembeddings, we tried three different cases: (1) add positional embeddings to the inputs right after\n", "chunk": "In addition to different ways of encoding spatial information, we also tried different ways of in-\ncorporating this information in our model.\n\nFor the 1-dimensional and 2-dimensional positional\nembeddings, we tried three different cases: (1) add positional embeddings to the inputs right after", "page": 16, "bbox": [292.6195983886719, 1944.20751953125, 1409.8720703125, 2035.066162109375]}, "186": {"type": "Title", "content": "D.4 POSITIONAL EMBEDDING\n", "chunk": "D.4 POSITIONAL EMBEDDING", "page": 16, "bbox": [305.9517517089844, 1212.869384765625, 676.3846435546875, 1246.7215576171875]}, "187": {"type": "List", "content": "Providing no positional information: Considering the inputs as a bag of patches.\n\n1-dimensional positional embedding: Considering the inputs as a sequence of patches ir\nthe raster order (default across all other experiments in this paper).\n\n2-dimensional positional embedding: Considering the inputs as a grid of patches in twc\ndimensions. In this case, two sets of embeddings are learned, each for one of the axes\nX-embedding, and Y-embedding, each with size D/2. Then, based on the coordinate or\nthe path in the input, we concatenate the X and Y embedding to get the final positiona\nembedding for that patch.\n\nRelative positional embeddings: Considering the relative distance between patches to en.\ncode the spatial information as instead of their absolute position. To do so, we use 1.\ndimensional Relative Attention, in which we define the relative distance all possible pair:\nof patches. Thus, for every given pair (one as query, and the other as key/value in the at.\ntention mechanism), we have an offset p, \u2014 px, where each offset is associated with ar\nembedding. Then, we simply run extra attention, where we use the original query (the\ncontent of query), but use relative positional embeddings as keys. We then use the log.\nits from the relative attention as a bias term and add it to the logits of the main attentior\n(content-based attention) before applying the softmax.\n", "chunk": "Providing no positional information: Considering the inputs as a bag of patches.\n\n1-dimensional positional embedding: Considering the inputs as a sequence of patches ir\nthe raster order (default across all other experiments in this paper).\n\n2-dimensional positional embedding: Considering the inputs as a grid of patches in twc\ndimensions.\n\nIn this case, two sets of embeddings are learned, each for one of the axes\nX-embedding, and Y-embedding, each with size D/2.\n\nThen, based on the coordinate or\nthe path in the input, we concatenate the X and Y embedding to get the final positiona\nembedding for that patch.\n\nRelative positional embeddings: Considering the relative distance between patches to en.\n\ncode the spatial information as instead of their absolute position.\n\nTo do so, we use 1.\ndimensional Relative Attention, in which we define the relative distance all possible pair:\nof patches.\n\nThus, for every given pair (one as query, and the other as key/value in the at.\n\ntention mechanism), we have an offset p, \u2014 px, where each offset is associated with ar\nembedding.", "page": 16, "bbox": [372.1587829589844, 1364.0712890625, 1390.8895263671875, 1919.60400390625]}, "188": {"type": "List", "content": "Providing no positional information: Considering the inputs as a bag of patches.\n\n1-dimensional positional embedding: Considering the inputs as a sequence of patches ir\nthe raster order (default across all other experiments in this paper).\n\n2-dimensional positional embedding: Considering the inputs as a grid of patches in twc\ndimensions. In this case, two sets of embeddings are learned, each for one of the axes\nX-embedding, and Y-embedding, each with size D/2. Then, based on the coordinate or\nthe path in the input, we concatenate the X and Y embedding to get the final positiona\nembedding for that patch.\n\nRelative positional embeddings: Considering the relative distance between patches to en.\ncode the spatial information as instead of their absolute position. To do so, we use 1.\ndimensional Relative Attention, in which we define the relative distance all possible pair:\nof patches. Thus, for every given pair (one as query, and the other as key/value in the at.\ntention mechanism), we have an offset p, \u2014 px, where each offset is associated with ar\nembedding. Then, we simply run extra attention, where we use the original query (the\ncontent of query), but use relative positional embeddings as keys. We then use the log.\nits from the relative attention as a bias term and add it to the logits of the main attentior\n(content-based attention) before applying the softmax.\n", "chunk": "Then, we simply run extra attention, where we use the original query (the\ncontent of query), but use relative positional embeddings as keys.\n\nWe then use the log.\n\nits from the relative attention as a bias term and add it to the logits of the main attentior\n(content-based attention) before applying the softmax.", "page": 16, "bbox": [372.1587829589844, 1364.0712890625, 1390.8895263671875, 1919.60400390625]}, "189": {"type": "Table", "content": "Pos. Emb.\n\nDefault/Stem Every Layer\n\nEvery Layer-Shared\n\nNo Pos. Emb.\n1-D Pos. Emb.\n2-D Pos. Emb.\n\nRel. Pos. Emb.\n\n0.61382 N/A\n0.64206 0.63964\n0.64001 0.64046\n0.64032 N/A\n\nN/A\n0.64292\n0.64022\n\nN/A\n\n", "chunk": "Pos.\n\nEmb.\n\nDefault/Stem Every Layer\n\nEvery Layer-Shared\n\nNo Pos.\n\nEmb.\n\n1-D Pos.\n\nEmb.\n\n2-D Pos.\n\nEmb.\n\nRel.\n\nPos.\n\nEmb.\n\n0.61382 N/A\n0.64206 0.63964\n0.64001 0.64046\n0.64032 N/A\n\nN/A\n0.64292\n0.64022\n\nN/A", "page": 16, "bbox": [436.6253662109375, 783.5515747070312, 1257.7452392578125, 963.3359985351562]}, "190": {"type": "Figure", "content": "MMASCINGE DMCAL J-StOl dlCurdey Lol\n\n60\n\n55\n\n50\n\n45\n\n40\n\n35\n\n30\n\n25\n\n\u2014\u2014 CLS-Token, Ir=8e-4\n\u2014\u2014 GAP, Ir=8e-4\n\u2014\u2014 GAP, Ir=3e-4\n\n1 2 3 4 5 6 7\nEpochs of training\n", "chunk": "MMASCINGE DMCAL J-StOl dlCurdey Lol\n\n60\n\n55\n\n50\n\n45\n\n40\n\n35\n\n30\n\n25\n\n\u2014\u2014 CLS-Token, Ir=8e-4\n\u2014\u2014 GAP, Ir=8e-4\n\u2014\u2014 GAP, Ir=3e-4\n\n1 2 3 4 5 6 7\nEpochs of training", "page": 16, "bbox": [484.0550842285156, 195.8353271484375, 1247.9520263671875, 654.2337646484375]}, "191": {"type": "Text", "content": "Figure 10: Position embeddings of models trained with different hyperparameters.\n", "chunk": "Figure 10: Position embeddings of models trained with different hyperparameters.", "page": 17, "bbox": [382.0305480957031, 624.6220703125, 1302.0079345703125, 653.905029296875]}, "192": {"type": "Text", "content": "the stem of them model and before feeding the inputs to the Transformer encoder (default across\nall other experiments in this paper); (2) learn and add positional embeddings to the inputs at the\nbeginning of each layer; (3) add a learned positional embeddings to the inputs at the beginning of\neach layer (shared between layers).\n", "chunk": "the stem of them model and before feeding the inputs to the Transformer encoder (default across\nall other experiments in this paper); (2) learn and add positional embeddings to the inputs at the\nbeginning of each layer; (3) add a learned positional embeddings to the inputs at the beginning of\neach layer (shared between layers).", "page": 17, "bbox": [292.2285461425781, 713.7245483398438, 1401.3438720703125, 838.6392211914062]}, "193": {"type": "Text", "content": "Table 8 summarizes the results from this ablation study on a ViT-B/16 model. As we can see, while\nthere is a large gap between the performances of the model with no positional embedding and mod-\nels with positional embedding, there is little to no difference between different ways of encoding\npositional information. We speculate that since our Transformer encoder operates on patch-level\ninputs, as opposed to pixel-level, the differences in how to encode spatial information is less impor-\ntant. More precisely, in patch-level inputs, the spatial dimensions are much smaller than the original\npixel-level inputs, e.g., 14 x 14 as opposed to 224 x 224, and learning to represent the spatial re-\nlations in this resolution is equally easy for these different positional encoding strategies. Even so,\nthe specific pattern of position embedding similarity learned by the network depends on the training\nhvpnernarameters (Ficure 10).\n", "chunk": "Table 8 summarizes the results from this ablation study on a ViT-B/16 model.\n\nAs we can see, while\nthere is a large gap between the performances of the model with no positional embedding and mod-\nels with positional embedding, there is little to no difference between different ways of encoding\npositional information.\n\nWe speculate that since our Transformer encoder operates on patch-level\ninputs, as opposed to pixel-level, the differences in how to encode spatial information is less impor-\ntant.\n\nMore precisely, in patch-level inputs, the spatial dimensions are much smaller than the original\npixel-level inputs, e.g., 14 x 14 as opposed to 224 x 224, and learning to represent the spatial re-\nlations in this resolution is equally easy for these different positional encoding strategies.\n\nEven so,\nthe specific pattern of position embedding similarity learned by the network depends on the training\nhvpnernarameters (Ficure 10).", "page": 17, "bbox": [302.4027099609375, 847.6278686523438, 1398.43603515625, 1143.49853515625]}, "194": {"type": "Text", "content": "Figure 11: Size of attended area by head and network depth. Attention distance was computed fo:\n128 example images by averaging the distance between the query pixel and all other pixels, weightec\nby the attention weight. Each dot shows the mean attention distance across images for one of I\u00a2\nheads at one layer. Image width is 224 pixels.\n", "chunk": "Figure 11: Size of attended area by head and network depth.\n\nAttention distance was computed fo:\n128 example images by averaging the distance between the query pixel and all other pixels, weightec\nby the attention weight.\n\nEach dot shows the mean attention distance across images for one of I\u00a2\nheads at one layer.\n\nImage width is 224 pixels.", "page": 17, "bbox": [304.26776123046875, 1736.1451416015625, 1389.7686767578125, 1858.8538818359375]}, "195": {"type": "Text", "content": "We are also interested in real-world speed of the architectures on our hardware, which is not always\nwell predicted by theoretical FLOPs due to details like lane widths and cache sizes. For this purpose,\n", "chunk": "We are also interested in real-world speed of the architectures on our hardware, which is not always\nwell predicted by theoretical FLOPs due to details like lane widths and cache sizes.\n\nFor this purpose,", "page": 17, "bbox": [294.3713073730469, 1974.379638671875, 1399.2735595703125, 2036.04541015625]}, "196": {"type": "Title", "content": ").5 EMPIRICAL COMPUTATIONAL COSTS\n", "chunk": ").5 EMPIRICAL COMPUTATIONAL COSTS", "page": 17, "bbox": [320.0989990234375, 1916.2191162109375, 807.84033203125, 1950.3013916015625]}, "197": {"type": "Figure", "content": "R50x1 + ViT-L/16\n\nViT-L/16\n\no aam\nom voD\nBBS\n. ooo\nowe: rImer\n-\n-\no\n=\na\n\u00b0 \u00b0 \u00b0 2 2 \u00b0\n& Ss 3 S + x\ns Ey\naam\nvoD\nBBS\nooo\nrIsr\n\u00b0 2 \u00b0 2 \u00b0 \u00b0\ni s & Ss bd a\nsq a\n\n(sjaxid) a2ueysip uonUane UeDW\n\n15 20\n\n10\nNetwork depth (layer)\n\n15 20\n\n10\nNetwork depth (layer)\n", "chunk": "R50x1 + ViT-L/16\n\nViT-L/16\n\no aam\nom voD\nBBS\n.\n\nooo\nowe: rImer\n-\n-\no\n=\na\n\u00b0 \u00b0 \u00b0 2 2 \u00b0\n& Ss 3 S + x\ns Ey\naam\nvoD\nBBS\nooo\nrIsr\n\u00b0 2 \u00b0 2 \u00b0 \u00b0\ni s & Ss bd a\nsq a\n\n(sjaxid) a2ueysip uonUane UeDW\n\n15 20\n\n10\nNetwork depth (layer)\n\n15 20\n\n10\nNetwork depth (layer)", "page": 17, "bbox": [386.78997802734375, 1190.674072265625, 1302.8287353515625, 1700.9583740234375]}, "198": {"type": "Figure", "content": "ViT-L16\n\n7 epochs, LR=0.0002, WD=0.01\n\n1: SEER\n\n7 epochs, LR=0.0004, WD=0.1\n\n1: BREE\n\n| SERRE RREEEEs\n\u2018BREE ERREEEEEEe\nA\nassess\nSEER EEEREEEEES\n\u00bb SEER\n1 SBE\n\u00bb BE\n3. SSR\null Pt\n\n12345 67 8 9 1011121314\nInput patch column\n\nInput patch row\n\nViT-L16\n.0004, WD=0.1\n\n14 epochs,\n\nInput patch row\n\nInput patch column\n", "chunk": "ViT-L16\n\n7 epochs, LR=0.0002, WD=0.01\n\n1: SEER\n\n7 epochs, LR=0.0004, WD=0.1\n\n1: BREE\n\n| SERRE RREEEEs\n\u2018BREE ERREEEEEEe\nA\nassess\nSEER EEEREEEEES\n\u00bb SEER\n1 SBE\n\u00bb BE\n3.\n\nSSR\null Pt\n\n12345 67 8 9 1011121314\nInput patch column\n\nInput patch row\n\nViT-L16\n.0004, WD=0.1\n\n14 epochs,\n\nInput patch row\n\nInput patch column", "page": 17, "bbox": [316.4112854003906, 209.27024841308594, 1377.8299560546875, 597.2922973632812]}, "199": {"type": "Text", "content": "we perform timing of inference speed for the main models of interest, on a TPUv3 accelerator; the\ndifference between inference and backprop speed is a constant model-independent factor.\n", "chunk": "we perform timing of inference speed for the main models of interest, on a TPUv3 accelerator; the\ndifference between inference and backprop speed is a constant model-independent factor.", "page": 18, "bbox": [293.8638610839844, 232.80642700195312, 1414.098388671875, 294.18304443359375]}, "200": {"type": "Text", "content": "Figure 12 (left) shows how many images one core can handle per second, across various input sizes.\nEvery single point refers to the peak performance measured across a wide range of batch-sizes. As\ncan be seen, the theoretical bi-quadratic scaling of ViT with image size only barely starts happening\nfor the largest models at the largest resolutions.\n", "chunk": "Figure 12 (left) shows how many images one core can handle per second, across various input sizes.\n\nEvery single point refers to the peak performance measured across a wide range of batch-sizes.\n\nAs\ncan be seen, the theoretical bi-quadratic scaling of ViT with image size only barely starts happening\nfor the largest models at the largest resolutions.", "page": 18, "bbox": [292.9806823730469, 311.1744384765625, 1399.4512939453125, 432.0323791503906]}, "201": {"type": "Text", "content": "Another quantity of interest is the largest batch-size each model can fit onto a core, larger being\nbetter for scaling to large datasets. Figure 12 (right) shows this quantity for the same set of models.\nThis shows that large ViT models have a clear advantage in terms of memory-efficiency over ResNet\n\nmodels.\n", "chunk": "Another quantity of interest is the largest batch-size each model can fit onto a core, larger being\nbetter for scaling to large datasets.\n\nFigure 12 (right) shows this quantity for the same set of models.\n\nThis shows that large ViT models have a clear advantage in terms of memory-efficiency over ResNet\n\nmodels.", "page": 18, "bbox": [291.882568359375, 447.5191650390625, 1401.911376953125, 573.2955932617188]}, "202": {"type": "Text", "content": "Figure 12: Left: Real wall-clock timings of various architectures across input sizes. ViT models\nhave speed comparable to similar ResNets. Right: Largest per-core batch-size fitting on device with\nvarious architectures across input sizes. ViT models are clearly more memory-efficient.\n", "chunk": "Figure 12: Left: Real wall-clock timings of various architectures across input sizes.\n\nViT models\nhave speed comparable to similar ResNets.\n\nRight: Largest per-core batch-size fitting on device with\nvarious architectures across input sizes.\n\nViT models are clearly more memory-efficient.", "page": 18, "bbox": [304.94781494140625, 1097.8580322265625, 1394.908935546875, 1191.6317138671875]}, "203": {"type": "Text", "content": "Axial Attention (Huang et al., 2020; Ho et al., 2019) is a simple, yet effective technique to run self-\nattention on large inputs that are organized as multidimensional tensors. The general idea of axial\nattention is to perform multiple attention operations, each along a single axis of the input tensor,\ninstead of applying 1-dimensional attention to the flattened version of the input. In axial attention,\neach attention mixes information along a particular axis, while keeping information along the other\naxes independent. Along this line, Wang et al. (2020b) proposed the AxialResNet model in which\nall the convolutions with kernel size 3 x 3 in a ResNet5O are replaced by axial self-attention, i.e.\na row and column attention, augmented by relative positional encoding. We have implemented\nAxialResNet as a baseline model.>.\n", "chunk": "Axial Attention (Huang et al., 2020; Ho et al., 2019) is a simple, yet effective technique to run self-\nattention on large inputs that are organized as multidimensional tensors.\n\nThe general idea of axial\nattention is to perform multiple attention operations, each along a single axis of the input tensor,\ninstead of applying 1-dimensional attention to the flattened version of the input.\n\nIn axial attention,\neach attention mixes information along a particular axis, while keeping information along the other\naxes independent.\n\nAlong this line, Wang et al.\n\n(2020b) proposed the AxialResNet model in which\nall the convolutions with kernel size 3 x 3 in a ResNet5O are replaced by axial self-attention, i.e.\n\na row and column attention, augmented by relative positional encoding.\n\nWe have implemented\nAxialResNet as a baseline model.>.", "page": 18, "bbox": [301.880615234375, 1309.1236572265625, 1400.7979736328125, 1596.3902587890625]}, "204": {"type": "Text", "content": "Moreover, we have modified ViT to process inputs in the 2-dimensional shape, instead of a 1-\ndimensional sequence of patches, and incorporate Axial Transformer blocks, in which instead of\na self-attention followed by an MLP, we have a a row-self-attention plus an MLP followed by a\ncolumn-self-attention plus an MLP.\n", "chunk": "Moreover, we have modified ViT to process inputs in the 2-dimensional shape, instead of a 1-\ndimensional sequence of patches, and incorporate Axial Transformer blocks, in which instead of\na self-attention followed by an MLP, we have a a row-self-attention plus an MLP followed by a\ncolumn-self-attention plus an MLP.", "page": 18, "bbox": [301.7151184082031, 1606.1064453125, 1408.9730224609375, 1726.9171142578125]}, "205": {"type": "Text", "content": "Figure 13, present the performance of Axial ResNet, Axial- ViT-B/32 and Axial-ViT-B/16 on Ima-\ngeNet Sshot linear, when pretrained on JFT dataset, verses the pretraining compute, both in terms of\nnumber of FLOPs and inference time (example per seconds). As we can see, both Axial-ViT-B/32\nand Axial-ViT-B/16 do better than their ViT-B counterpart in terms of performance, but it comes at\n", "chunk": "Figure 13, present the performance of Axial ResNet, Axial- ViT-B/32 and Axial-ViT-B/16 on Ima-\ngeNet Sshot linear, when pretrained on JFT dataset, verses the pretraining compute, both in terms of\nnumber of FLOPs and inference time (example per seconds).\n\nAs we can see, both Axial-ViT-B/32\nand Axial-ViT-B/16 do better than their ViT-B counterpart in terms of performance, but it comes at", "page": 18, "bbox": [295.86590576171875, 1743.576171875, 1394.3511962890625, 1872.073486328125]}, "206": {"type": "Text", "content": "3Our implementation is based on the open-sourced PyTorch implementation in https: //github.com/\ncsrhddlam/axial-deeplab. In our experiments, we reproduced the scores reported in (Wang et al.,\n2020b) in terms of accuracy, however, our implementation, similar to the open-source implementation, is very\nslow on TPUs. Therefore, we were not able to use it for extensive large-scale experiments. These may be\nunlocked by a carefully optimized implementation.\n", "chunk": "3Our implementation is based on the open-sourced PyTorch implementation in https: //github.com/\ncsrhddlam/axial-deeplab.\n\nIn our experiments, we reproduced the scores reported in (Wang et al.,\n2020b) in terms of accuracy, however, our implementation, similar to the open-source implementation, is very\nslow on TPUs.\n\nTherefore, we were not able to use it for extensive large-scale experiments.\n\nThese may be\nunlocked by a carefully optimized implementation.", "page": 18, "bbox": [296.9746398925781, 1892.3829345703125, 1399.5670166015625, 2033.72314453125]}, "207": {"type": "Title", "content": "D.6 AXIAL ATTENTION\n", "chunk": "D.6 AXIAL ATTENTION", "page": 18, "bbox": [302.0700988769531, 1258.903076171875, 601.8644409179688, 1291.3721923828125]}, "208": {"type": "Figure", "content": "Peak inference speed [img/sec/core]\n\n104\n\n103\n\nR50x1 ViT-B/32 ViT-B/16 ViT-H/14\n\u00a9 R50x2 - VAT-LI32. > ViT-LII6. \u2014 RIS2x4\n10\u00b0\n\n8\na\n2\na\n2\n5\n5\n2\nis}\n8\nBa\ng 2\nS107\nPA\na\n2\nI\n4\n64 128 224 384 512 64 128 224 384512\n\nInput size [px]\n\nInput size [px]\n\n", "chunk": "Peak inference speed [img/sec/core]\n\n104\n\n103\n\nR50x1 ViT-B/32 ViT-B/16 ViT-H/14\n\u00a9 R50x2 - VAT-LI32.\n\n> ViT-LII6.\n\n\u2014 RIS2x4\n10\u00b0\n\n8\na\n2\na\n2\n5\n5\n2\nis}\n8\nBa\ng 2\nS107\nPA\na\n2\nI\n4\n64 128 224 384 512 64 128 224 384512\n\nInput size [px]\n\nInput size [px]", "page": 18, "bbox": [343.7774353027344, 629.006591796875, 1357.7152099609375, 1062.3597412109375]}, "209": {"type": "Text", "content": "Figure 13: Performance of Axial-Attention based models, in terms of top-1 accuracy on ImageNet\n5-shot linear, versus their speed in terms of number of FLOPs (left) and inference time (left).\n", "chunk": "Figure 13: Performance of Axial-Attention based models, in terms of top-1 accuracy on ImageNet\n5-shot linear, versus their speed in terms of number of FLOPs (left) and inference time (left).", "page": 19, "bbox": [307.9905700683594, 693.2430419921875, 1398.445556640625, 756.453857421875]}, "210": {"type": "Text", "content": "the cost of more compute. This is because in Axial-ViT models, each Transformer block with global\nself-attention is replaced by two Axial Transformer blocks, one with row and one with column self.\nattention and although the sequence length that self-attention operates on is smaller in axial case.\nthere is a extra MLP per Axial-ViT block. For the AxialResNet, although it looks reasonable ir\nterms of accuracy/compute trade-off (Figure 13, left), the naive implementation is extremely slow\non TPUs (Figure 13, right).\n", "chunk": "the cost of more compute.\n\nThis is because in Axial-ViT models, each Transformer block with global\nself-attention is replaced by two Axial Transformer blocks, one with row and one with column self.\n\nattention and although the sequence length that self-attention operates on is smaller in axial case.\n\nthere is a extra MLP per Axial-ViT block.\n\nFor the AxialResNet, although it looks reasonable ir\nterms of accuracy/compute trade-off (Figure 13, left), the naive implementation is extremely slow\non TPUs (Figure 13, right).", "page": 19, "bbox": [303.811767578125, 809.0020141601562, 1392.900390625, 1002.0604248046875]}, "211": {"type": "Text", "content": "To understand how ViT uses self-attention to integrate information across the image, we analyzed\nthe average distance spanned by attention weights at different layers (Figure 11). This \u201cattention\ndistance\u201d is analogous to receptive field size in CNNs. Average attention distance is highly variable\nacross heads in lower layers, with some heads attending to much of the image, while others attend\nto small regions at or near the query location. As depth increases, attention distance increases for all\nheads. In the second half of the network, most heads attend widely across tokens.\n", "chunk": "To understand how ViT uses self-attention to integrate information across the image, we analyzed\nthe average distance spanned by attention weights at different layers (Figure 11).\n\nThis \u201cattention\ndistance\u201d is analogous to receptive field size in CNNs.\n\nAverage attention distance is highly variable\nacross heads in lower layers, with some heads attending to much of the image, while others attend\nto small regions at or near the query location.\n\nAs depth increases, attention distance increases for all\nheads.\n\nIn the second half of the network, most heads attend widely across tokens.", "page": 19, "bbox": [302.955810546875, 1092.0433349609375, 1400.27490234375, 1277.8309326171875]}, "212": {"type": "Text", "content": "To compute maps of the attention from the output token to the input space (Figures 6 and 14), we\nused Attention Rollout (Abnar & Zuidema, 2020). Briefly, we averaged attention weights of ViT-\nL/16 across all heads and then recursively multiplied the weight matrices of all layers. This account:\nfor the mixing of attention across tokens through all layers.\n", "chunk": "To compute maps of the attention from the output token to the input space (Figures 6 and 14), we\nused Attention Rollout (Abnar & Zuidema, 2020).\n\nBriefly, we averaged attention weights of ViT-\nL/16 across all heads and then recursively multiplied the weight matrices of all layers.\n\nThis account:\nfor the mixing of attention across tokens through all layers.", "page": 19, "bbox": [298.8843994140625, 1369.7122802734375, 1390.1365966796875, 1496.9210205078125]}, "213": {"type": "Text", "content": "We also evaluate our flagship ViT-H/14 model on the ObjectNet benchmark following the evaluation\nsetup in Kolesnikov et al. (2020), resulting in 82.1% top-5 accuracy and 61.7% top-1 accuracy.\n", "chunk": "We also evaluate our flagship ViT-H/14 model on the ObjectNet benchmark following the evaluation\nsetup in Kolesnikov et al.\n\n(2020), resulting in 82.1% top-5 accuracy and 61.7% top-1 accuracy.", "page": 19, "bbox": [295.97882080078125, 1588.3675537109375, 1409.518310546875, 1652.984130859375]}, "214": {"type": "Text", "content": "Table 9 shows the scores attained on each of the VTAB-1k tasks.\n", "chunk": "Table 9 shows the scores attained on each of the VTAB-1k tasks.", "page": 19, "bbox": [293.0312194824219, 1746.093017578125, 1013.2276000976562, 1777.25341796875]}, "215": {"type": "Title", "content": "D.7 ATTENTION DISTANCE\n", "chunk": "D.7 ATTENTION DISTANCE", "page": 19, "bbox": [302.5240783691406, 1036.0426025390625, 644.9839477539062, 1068.8114013671875]}, "216": {"type": "Title", "content": "D.8 ATTENTION MAPS\n", "chunk": "D.8 ATTENTION MAPS", "page": 19, "bbox": [298.80126953125, 1311.534423828125, 592.3593139648438, 1348.3690185546875]}, "217": {"type": "Title", "content": "D.9 OBJECTNET RESULTS\n", "chunk": "D.9 OBJECTNET RESULTS", "page": 19, "bbox": [302.5496520996094, 1528.2275390625, 634.0192260742188, 1566.7449951171875]}, "218": {"type": "Title", "content": "D.10 VTAB BREAKDOWN\n", "chunk": "D.10 VTAB BREAKDOWN", "page": 19, "bbox": [300.7660217285156, 1686.5045166015625, 639.2625732421875, 1722.4290771484375]}, "219": {"type": "Figure", "content": "Axial ViT-B/16 @ @  Axalvit-Bn6\n650 0.650\n@iTBI6\n\n625 30025\n\n8\n600 = 0.600.\n\n=\n\n@Axalvir-B32 5 @ Axialvir-Bs2\n75 20575\n@ ViT-BA2 2 @vit-B32\nAxialResNet50 4 AxialResNet50,\nsof 5 0550 e\n525 5 52s\n00 0.500 |qResnewso\n10 1 ft\n\nTotal compute [exaFLOPS] Peak inference speed [img/sec/core]\n", "chunk": "Axial ViT-B/16 @ @  Axalvit-Bn6\n650 0.650\n@iTBI6\n\n625 30025\n\n8\n600 = 0.600.\n\n=\n\n@Axalvir-B32 5 @ Axialvir-Bs2\n75 20575\n@ ViT-BA2 2 @vit-B32\nAxialResNet50 4 AxialResNet50,\nsof 5 0550 e\n525 5 52s\n00 0.500 |qResnewso\n10 1 ft\n\nTotal compute [exaFLOPS] Peak inference speed [img/sec/core]", "page": 19, "bbox": [366.7463073730469, 214.40545654296875, 1363.7574462890625, 659.8864135742188]}, "220": {"type": "Text", "content": "Figure 14: Further example attention maps as in Figure 6 (random selection).\n", "chunk": "Figure 14: Further example attention maps as in Figure 6 (random selection).", "page": 20, "bbox": [419.9060363769531, 1853.3450927734375, 1274.4144287109375, 1882.31005859375]}, "221": {"type": "Text", "content": "Table 9: Breakdown of VTAB-1k performance across task:\n\n", "chunk": "Table 9: Breakdown of VTAB-1k performance across task:", "page": 21, "bbox": [517.5061645507812, 1005.1558227539062, 1174.7413330078125, 1035.35302734375]}, "222": {"type": "Text", "content": "ViT-H/14 (JFT) 95.3 85.5 75.2 99.7 97.2 65.0 88.9 83.3 96.7 91.4 76.6 91.7 63.8 53.1 79.4 63.3 84.5 33.2 51.2 77.6\nViT-L/16 (JFT) 95.4 81.9 74.3 99.7 96.7 63.5 87.4 83.6 96.5 89.7 77.1 86.4 63.1 49.7 74.5 60.5 82.2 36.2 51.1 76.3\nViT-L/16 (121k) 90.8 84.1 74.1 99.3 92.7 61.0 80.9 82.5 95.6 85.2 75.3 70.3 56.1 41.9 74.7 64.9 79.9 30.5 41.7 72.7\n", "chunk": "ViT-H/14 (JFT) 95.3 85.5 75.2 99.7 97.2 65.0 88.9 83.3 96.7 91.4 76.6 91.7 63.8 53.1 79.4 63.3 84.5 33.2 51.2 77.6\nViT-L/16 (JFT) 95.4 81.9 74.3 99.7 96.7 63.5 87.4 83.6 96.5 89.7 77.1 86.4 63.1 49.7 74.5 60.5 82.2 36.2 51.1 76.3\nViT-L/16 (121k) 90.8 84.1 74.1 99.3 92.7 61.0 80.9 82.5 95.6 85.2 75.3 70.3 56.1 41.9 74.7 64.9 79.9 30.5 41.7 72.7", "page": 21, "bbox": [308.05072021484375, 1188.5277099609375, 1393.99951171875, 1266.203857421875]}, "223": {"type": "Figure", "content": "table 7: Breakdown of V 1AbB-1k performance across tasks.\n\n\u00a9 Caltech101\n\u00a9 CIFAR-100\neDTD\n\n\u00a9 Flowers102\n\n\u00a9 Pets\n\n\u00a9 Sun397\n\ne SVHN\n\n\u00a9 Camelyon\n\n\u00a9 EuroSAT\n\n\u00a9 Resise45\n\n\u00a9 Retinopathy\n\n\u00a9 Clevr-Count\n\u00a9 Clevr-Dist\n DMLab\n\n\u00a9 dSpr-Loc\n dSpr-Ori\n\n\u00a9 KITTI-Dist\n\n\u00a9 sNORB-Azim\n sNORB-Elev\n\u00a9 Mean\n\nViT-H/14 (JFT) 95.3 85.5 75.2 99.7 97.2 65.0 88.9 83.3 96.7 91.4 76.6 91.7 63.8 53.1 79.4 63.3 84.5 33.2 51.2 77.6\nViT-L/16 (JFT) 95.4 81.9 74.3 99.7 96.7 63.5 87.4 83.6 96.5 89.7 77.1 86.4 63.1 49.7 74.5 60.5 82.2 36.2 51.1 76.3\n", "chunk": "table 7: Breakdown of V 1AbB-1k performance across tasks.", "page": 21, "bbox": [292.37445068359375, 1016.861572265625, 1410.1922607421875, 1239.290283203125]}, "224": {"type": "Figure", "content": "table 7: Breakdown of V 1AbB-1k performance across tasks.\n\n\u00a9 Caltech101\n\u00a9 CIFAR-100\neDTD\n\n\u00a9 Flowers102\n\n\u00a9 Pets\n\n\u00a9 Sun397\n\ne SVHN\n\n\u00a9 Camelyon\n\n\u00a9 EuroSAT\n\n\u00a9 Resise45\n\n\u00a9 Retinopathy\n\n\u00a9 Clevr-Count\n\u00a9 Clevr-Dist\n DMLab\n\n\u00a9 dSpr-Loc\n dSpr-Ori\n\n\u00a9 KITTI-Dist\n\n\u00a9 sNORB-Azim\n sNORB-Elev\n\u00a9 Mean\n\nViT-H/14 (JFT) 95.3 85.5 75.2 99.7 97.2 65.0 88.9 83.3 96.7 91.4 76.6 91.7 63.8 53.1 79.4 63.3 84.5 33.2 51.2 77.6\nViT-L/16 (JFT) 95.4 81.9 74.3 99.7 96.7 63.5 87.4 83.6 96.5 89.7 77.1 86.4 63.1 49.7 74.5 60.5 82.2 36.2 51.1 76.3\n", "chunk": "\u00a9 Caltech101\n\u00a9 CIFAR-100\neDTD\n\n\u00a9 Flowers102\n\n\u00a9 Pets\n\n\u00a9 Sun397\n\ne SVHN\n\n\u00a9 Camelyon\n\n\u00a9 EuroSAT\n\n\u00a9 Resise45\n\n\u00a9 Retinopathy\n\n\u00a9 Clevr-Count\n\u00a9 Clevr-Dist\n DMLab\n\n\u00a9 dSpr-Loc\n dSpr-Ori\n\n\u00a9 KITTI-Dist\n\n\u00a9 sNORB-Azim\n sNORB-Elev\n\u00a9 Mean\n\nViT-H/14 (JFT) 95.3 85.5 75.2 99.7 97.2 65.0 88.9 83.3 96.7 91.4 76.6 91.7 63.8 53.1 79.4 63.3 84.5 33.2 51.2 77.6\nViT-L/16 (JFT) 95.4 81.9 74.3 99.7 96.7 63.5 87.4 83.6 96.5 89.7 77.1 86.4 63.1 49.7 74.5 60.5 82.2 36.2 51.1 76.3", "page": 21, "bbox": [292.37445068359375, 1016.861572265625, 1410.1922607421875, 1239.290283203125]}}