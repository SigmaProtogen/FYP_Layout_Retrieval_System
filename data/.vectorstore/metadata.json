{"0": {"type": "Text", "content": "The dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder. The best\nperforming models also connect the encoder and decoder through an attention\nmechanism. We propose a new simple network architecture, the Transformer,", "page": 0, "bbox": [598.13232421875, 1704.216064453125, 1954.327392578125, 2412.140625]}, "1": {"type": "Text", "content": "based solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely. Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring significantly\nless time to train. Our model achieves 28.4 BLEU on the WMT 2014 English-", "page": 0, "bbox": [598.13232421875, 1704.216064453125, 1954.327392578125, 2412.140625]}, "2": {"type": "Text", "content": "to-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.8 after", "page": 0, "bbox": [598.13232421875, 1704.216064453125, 1954.327392578125, 2412.140625]}, "3": {"type": "Text", "content": "training for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature. We show that the Transformer generalizes well to\nother tasks by applying it successfully to English constituency parsing both with\nlarge and limited training data.", "page": 0, "bbox": [598.13232421875, 1704.216064453125, 1954.327392578125, 2412.140625]}, "4": {"type": "Text", "content": "*Equal contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea. Ashish, with Illia, designed and implemented the first Transformer models and\nhas been crucially involved in every aspect of this work. Noam proposed scaled dot-product attention, multi-head", "page": 0, "bbox": [456.1231994628906, 2488.559326171875, 2111.495849609375, 2869.421630859375]}, "5": {"type": "Text", "content": "attention and the parameter-free position representation and became the other person involved in nearly every\ndetail. Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor. Llion also experimented with novel model variants, was responsible for our initial codebase, and", "page": 0, "bbox": [456.1231994628906, 2488.559326171875, 2111.495849609375, 2869.421630859375]}, "6": {"type": "Text", "content": "efficient inference and visualizations. Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.", "page": 0, "bbox": [456.1231994628906, 2488.559326171875, 2111.495849609375, 2869.421630859375]}, "7": {"type": "Text", "content": "} 1st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.", "page": 0, "bbox": [465.0729064941406, 3052.039794921875, 1928.0086669921875, 3093.298583984375]}, "8": {"type": "Text", "content": "Recurrent neural networks, long short-term memory [13] and gated recurrent [7] neural networks\nin particular, have been firmly established as state of the art approaches in sequence modeling anc\ntransduction problems such as language modeling and machine translation [35, 2, 5]. Numerous", "page": 1, "bbox": [452.2400817871094, 408.4581604003906, 2091.18408203125, 643.624267578125]}, "9": {"type": "Text", "content": "efforts have since continued to push the boundaries of recurrent language models and encoder-decodet\narchitectures [38, 24, 15].", "page": 1, "bbox": [452.2400817871094, 408.4581604003906, 2091.18408203125, 643.624267578125]}, "10": {"type": "Text", "content": "Recurrent models typically factor computation along the symbol positions of the input and output\nsequences. Aligning the positions to steps in computation time, they generate a sequence of hidden\nstates h;, as a function of the previous hidden state h,_, and the input for position t. This inherently", "page": 1, "bbox": [453.22674560546875, 658.2290649414062, 2107.561767578125, 1025.9375]}, "11": {"type": "Text", "content": "sequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples. Recent work has achieved\nsignificant improvements in computational efficiency through factorization tricks [21] and conditional", "page": 1, "bbox": [453.22674560546875, 658.2290649414062, 2107.561767578125, 1025.9375]}, "12": {"type": "Text", "content": "computation [32], while also improving model performance in case of the latter. The fundamental\nconstraint of sequential computation, however, remains.", "page": 1, "bbox": [453.22674560546875, 658.2290649414062, 2107.561767578125, 1025.9375]}, "13": {"type": "Text", "content": "Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\n\nthe input or output sequences [2, 19]. In all but a few cases [27], however, such attention mechanisms\nare used in conjunction with a recurrent network.", "page": 1, "bbox": [449.95928955078125, 1050.6971435546875, 2109.36962890625, 1231.57470703125]}, "14": {"type": "Text", "content": "In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output\nThe Transformer allows for significantly more parallelization and can reach a new state of the art in", "page": 1, "bbox": [446.4571838378906, 1251.7435302734375, 2097.9697265625, 1439.41943359375]}, "15": {"type": "Text", "content": "translation quality after being trained for as little as twelve hours on eight P100 GPUs.", "page": 1, "bbox": [446.4571838378906, 1251.7435302734375, 2097.9697265625, 1439.41943359375]}, "16": {"type": "Text", "content": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[16], ByteNet [18] and ConvS2S [9], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions. In these models,", "page": 1, "bbox": [450.40130615234375, 1614.4937744140625, 2103.35205078125, 2032.34375]}, "17": {"type": "Text", "content": "the number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes\nit more difficult to learn dependencies between distant positions [12]. In the Transformer this is", "page": 1, "bbox": [450.40130615234375, 1614.4937744140625, 2103.35205078125, 2032.34375]}, "18": {"type": "Text", "content": "reduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.", "page": 1, "bbox": [450.40130615234375, 1614.4937744140625, 2103.35205078125, 2032.34375]}, "19": {"type": "Text", "content": "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence. Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,", "page": 1, "bbox": [456.63671875, 2044.2752685546875, 2100.362060546875, 2232.21435546875]}, "20": {"type": "Text", "content": "textual entailment and learning task-independent sentence representations [4, 27, 28, 22].", "page": 1, "bbox": [456.63671875, 2044.2752685546875, 2100.362060546875, 2232.21435546875]}, "21": {"type": "Text", "content": "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [34].", "page": 1, "bbox": [450.80072021484375, 2258.646484375, 2090.50146484375, 2392.1025390625]}, "22": {"type": "Text", "content": "To the best of our knowledge, however, the Transformer is the first transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution. In the following sections, we will describe the Transformer, motivate", "page": 1, "bbox": [455.5078430175781, 2412.51611328125, 2113.541015625, 2598.93115234375]}, "23": {"type": "Text", "content": "self-attention and discuss its advantages over models such as [17, 18] and [9].", "page": 1, "bbox": [455.5078430175781, 2412.51611328125, 2113.541015625, 2598.93115234375]}, "24": {"type": "Text", "content": "Most competitive neural sequence transduction models have an encoder-decoder structure [5, 2, 35]\nHere, the encoder maps an input sequence of symbol representations (21,...,2,) to a sequence", "page": 1, "bbox": [451.687744140625, 2781.875732421875, 2096.9951171875, 3014.149169921875]}, "25": {"type": "Text", "content": "of continuous representations z = (21,...,2n). Given z, the decoder then generates an output\nsequence (\u00a51, ..., Ym) of symbols one element at a time. At each step the model is auto-regressive\n[10], consuming the previously generated symbols as additional input when generating the next.", "page": 1, "bbox": [451.687744140625, 2781.875732421875, 2096.9951171875, 3014.149169921875]}, "26": {"type": "Text", "content": "The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.", "page": 2, "bbox": [455.88214111328125, 1814.378173828125, 2102.344482421875, 1956.3299560546875]}, "27": {"type": "Text", "content": "Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two\nsub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-", "page": 2, "bbox": [444.6194763183594, 2092.66455078125, 2104.171630859375, 2418.09912109375]}, "28": {"type": "Text", "content": "wise fully connected feed-forward network. We employ a residual connection [11] around each of\nthe two sub-layers, followed by layer normalization [1]. That is, the output of each sub-layer is", "page": 2, "bbox": [444.6194763183594, 2092.66455078125, 2104.171630859375, 2418.09912109375]}, "29": {"type": "Text", "content": "LayerNorm(x + Sublayer(\u00ab)), where Sublayer() is the function implemented by the sub-layer\nitself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension diode} = 512.", "page": 2, "bbox": [444.6194763183594, 2092.66455078125, 2104.171630859375, 2418.09912109375]}, "30": {"type": "Text", "content": "Decoder: The decoder is also composed of a stack of N = 6 identical layers. In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head", "page": 2, "bbox": [452.18707275390625, 2462.096435546875, 2105.268798828125, 2792.881591796875]}, "31": {"type": "Text", "content": "attention over the output of the encoder stack. Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. This", "page": 2, "bbox": [452.18707275390625, 2462.096435546875, 2105.268798828125, 2792.881591796875]}, "32": {"type": "Text", "content": "masking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position 2 can depend only on the known outputs at positions less than 7.", "page": 2, "bbox": [452.18707275390625, 2462.096435546875, 2105.268798828125, 2792.881591796875]}, "33": {"type": "Text", "content": "An attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. The output is computed as a weighted sum", "page": 2, "bbox": [435.6171875, 2923.4462890625, 2115.73388671875, 3012.38330078125]}, "34": {"type": "Figure", "content": "Figure", "page": 2, "bbox": [835.8128051757812, 312.9929504394531, 1702.123046875, 1632.054443359375]}}