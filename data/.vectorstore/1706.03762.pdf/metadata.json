{"0": {"type": "Text", "content": "The dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder. The best\nperforming models also connect the encoder and decoder through an attention\nmechanism. We propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely. Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring significantly\nless time to train. Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.8 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature. We show that the Transformer generalizes well to\nother tasks by applying it successfully to English constituency parsing both with\nlarge and limited training data.\n", "chunk": "The dominant sequence transduction models are based on complex recurrent or\nconvolutional neural networks that include an encoder and a decoder.\n\nThe best\nperforming models also connect the encoder and decoder through an attention\nmechanism.\n\nWe propose a new simple network architecture, the Transformer,\nbased solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely.\n\nExperiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring significantly\nless time to train.\n\nOur model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU.\n\nOn the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.8 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature.\n\nWe show that the Transformer generalizes well to\nother tasks by applying it successfully to English constituency parsing both with\nlarge and limited training data.", "page": 0, "bbox": [399.3802185058594, 1135.9677734375, 1302.9542236328125, 1609.6142578125]}, "1": {"type": "Text", "content": "\u201cEqual contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea. Ashish, with Illia, designed and implemented the first Transformer models and\nhas been crucially involved in every aspect of this work. Noam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail. Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor. Llion also experimented with novel model variants, was responsible for our initial codebase, and\nefficient inference and visualizations. Lukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.\n", "chunk": "\u201cEqual contribution.\n\nListing order is random.\n\nJakob proposed replacing RNNs with self-attention and started\nthe effort to evaluate this idea.\n\nAshish, with Illia, designed and implemented the first Transformer models and\nhas been crucially involved in every aspect of this work.\n\nNoam proposed scaled dot-product attention, multi-head\nattention and the parameter-free position representation and became the other person involved in nearly every\ndetail.\n\nNiki designed, implemented, tuned and evaluated countless model variants in our original codebase and\ntensor2tensor.\n\nLlion also experimented with novel model variants, was responsible for our initial codebase, and\nefficient inference and visualizations.\n\nLukasz and Aidan spent countless long days designing various parts of and\nimplementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating\nour research.", "page": 0, "bbox": [303.6634521484375, 1659.4560546875, 1411.9486083984375, 1912.21142578125]}, "2": {"type": "Text", "content": "sing Systems (NIPS 2017), Long Beach, CA, USA\n", "chunk": "sing Systems (NIPS 2017), Long Beach, CA, USA", "page": 0, "bbox": [308.73162841796875, 2034.29931640625, 1269.898193359375, 2061.9130859375]}, "3": {"type": "Title", "content": "Provided proper attribution is provided, Google hereby grants permission to\nreproduce the tables and figures in this paper solely for use in journalistic or\nscholarly works.\n", "chunk": "Provided proper attribution is provided, Google hereby grants permission to\nreproduce the tables and figures in this paper solely for use in journalistic or\nscholarly works.", "page": 0, "bbox": [329.41375732421875, 204.88162231445312, 1369.584716796875, 312.81048583984375]}, "4": {"type": "Title", "content": "Attention Is All You Need\n", "chunk": "Attention Is All You Need", "page": 0, "bbox": [584.6090087890625, 410.8117370605469, 1117.1234130859375, 461.4506530761719]}, "5": {"type": "Text", "content": "Recurrent neural networks, long short-term memory [13] and gated recurrent [7] neural networks\nin particular, have been firmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [35, 2, 5]. Numerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [38, 24, 15].\n", "chunk": "Recurrent neural networks, long short-term memory [13] and gated recurrent [7] neural networks\nin particular, have been firmly established as state of the art approaches in sequence modeling and\ntransduction problems such as language modeling and machine translation [35, 2, 5].\n\nNumerous\nefforts have since continued to push the boundaries of recurrent language models and encoder-decoder\narchitectures [38, 24, 15].", "page": 1, "bbox": [300.65826416015625, 272.07513427734375, 1395.8990478515625, 428.5151672363281]}, "6": {"type": "Text", "content": "Recurrent models typically factor computation along the symbol positions of the input and output\nsequences. Aligning the positions to steps in computation time, they generate a sequence of hidden\nstates h;, as a function of the previous hidden state h,_; and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples. Recent work has achieved\nsignificant improvements in computational efficiency through factorization tricks [21] and conditional\ncomputation [32], while also improving model performance in case of the latter. The fundamental\nconstraint of sequential computation, however, remains.\n", "chunk": "Recurrent models typically factor computation along the symbol positions of the input and output\nsequences.\n\nAligning the positions to steps in computation time, they generate a sequence of hidden\nstates h;, as a function of the previous hidden state h,_; and the input for position t. This inherently\nsequential nature precludes parallelization within training examples, which becomes critical at longer\nsequence lengths, as memory constraints limit batching across examples.\n\nRecent work has achieved\nsignificant improvements in computational efficiency through factorization tricks [21] and conditional\ncomputation [32], while also improving model performance in case of the latter.\n\nThe fundamental\nconstraint of sequential computation, however, remains.", "page": 1, "bbox": [301.64849853515625, 439.56610107421875, 1404.670166015625, 682.9530639648438]}, "7": {"type": "Text", "content": "Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [2, 19]. In all but a few cases [27], however, such attention mechanisms\nare used in conjunction with a recurrent network.\n", "chunk": "Attention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [2, 19].\n\nIn all but a few cases [27], however, such attention mechanisms\nare used in conjunction with a recurrent network.", "page": 1, "bbox": [300.27862548828125, 700.5811767578125, 1406.7139892578125, 821.861083984375]}, "8": {"type": "Text", "content": "In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\nThe Transformer allows for significantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.\n", "chunk": "In this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\n\nThe Transformer allows for significantly more parallelization and can reach a new state of the art in\ntranslation quality after being trained for as little as twelve hours on eight P100 GPUs.", "page": 1, "bbox": [297.3193359375, 834.3128051757812, 1398.734619140625, 959.2935180664062]}, "9": {"type": "Text", "content": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[16], ByteNet [18] and ConvS2S [9], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions. In these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes\nit more difficult to learn dependencies between distant positions [12]. In the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.\n", "chunk": "The goal of reducing sequential computation also forms the foundation of the Extended Neural GPU\n[16], ByteNet [18] and ConvS2S [9], all of which use convolutional neural networks as basic building\nblock, computing hidden representations in parallel for all input and output positions.\n\nIn these models,\nthe number of operations required to relate signals from two arbitrary input or output positions grows\nin the distance between positions, linearly for ConvS2S and logarithmically for ByteNet.\n\nThis makes\nit more difficult to learn dependencies between distant positions [12].\n\nIn the Transformer this is\nreduced to a constant number of operations, albeit at the cost of reduced effective resolution due\nto averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as\ndescribed in section 3.2.", "page": 1, "bbox": [300.60345458984375, 1076.793212890625, 1403.365966796875, 1354.8055419921875]}, "10": {"type": "Text", "content": "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence. Self-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 27, 28, 22].\n", "chunk": "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions\nof a single sequence in order to compute a representation of the sequence.\n\nSelf-attention has been\nused successfully in a variety of tasks including reading comprehension, abstractive summarization,\ntextual entailment and learning task-independent sentence representations [4, 27, 28, 22].", "page": 1, "bbox": [304.2303771972656, 1363.4677734375, 1400.4775390625, 1489.056884765625]}, "11": {"type": "Text", "content": "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [34].\n", "chunk": "End-to-end memory networks are based on a recurrent attention mechanism instead of sequence\naligned recurrence and have been shown to perform well on simple-language question answering and\nlanguage modeling tasks [34].", "page": 1, "bbox": [300.18017578125, 1505.3875732421875, 1393.52734375, 1595.6168212890625]}, "12": {"type": "Text", "content": "To the best of our knowledge, however, the Transformer is the first transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution. In the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [17, 18] and [9].\n", "chunk": "To the best of our knowledge, however, the Transformer is the first transduction model relying\nentirely on self-attention to compute representations of its input and output without using sequence-\naligned RNNs or convolution.\n\nIn the following sections, we will describe the Transformer, motivate\nself-attention and discuss its advantages over models such as [17, 18] and [9].", "page": 1, "bbox": [304.999755859375, 1607.9449462890625, 1408.7899169921875, 1732.0218505859375]}, "13": {"type": "Text", "content": "Most competitive neural sequence transduction models have an encoder-decoder structure [5, 2, 35]\nHere, the encoder maps an input sequence of symbol representations (21, ..., 7) to a sequence\nof continuous representations z = (z1,...,2,). Given z, the decoder then generates an output\nsequence (1, ..., Ym) of symbols one element at a time. At each step the model is auto-regressive\n[10], consuming the previously generated symbols as additional input when generating the next.\n", "chunk": "Most competitive neural sequence transduction models have an encoder-decoder structure [5, 2, 35]\nHere, the encoder maps an input sequence of symbol representations (21, ..., 7) to a sequence\nof continuous representations z = (z1,...,2,).\n\nGiven z, the decoder then generates an output\nsequence (1, ..., Ym) of symbols one element at a time.\n\nAt each step the model is auto-regressive\n[10], consuming the previously generated symbols as additional input when generating the next.", "page": 1, "bbox": [301.08917236328125, 1855.351318359375, 1397.9898681640625, 2010.005126953125]}, "14": {"type": "Title", "content": "Model Architecture\n", "chunk": "Model Architecture", "page": 1, "bbox": [329.5474853515625, 1782.241943359375, 631.4281616210938, 1821.3792724609375]}, "15": {"type": "Title", "content": "Background\n", "chunk": "Background", "page": 1, "bbox": [341.37982177734375, 1009.0835571289062, 523.3988647460938, 1043.8018798828125]}, "16": {"type": "Title", "content": "Introduction\n", "chunk": "Introduction", "page": 1, "bbox": [327.4603271484375, 200.7053985595703, 531.4404907226562, 239.4247589111328]}, "17": {"type": "Text", "content": "Figure 1: The Transformer - model architecture.\n", "chunk": "Figure 1: The Transformer - model architecture.", "page": 2, "bbox": [577.4832153320312, 1122.443359375, 1109.35693359375, 1152.0921630859375]}, "18": {"type": "Text", "content": "The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.\n", "chunk": "The Transformer follows this overall architecture using stacked self-attention and point-wise, fully\nconnected layers for both the encoder and decoder, shown in the left and right halves of Figure 1,\nrespectively.", "page": 2, "bbox": [303.991455078125, 1209.4967041015625, 1403.126220703125, 1304.418701171875]}, "19": {"type": "Text", "content": "Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two\nsub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position-\nwise fully connected feed-forward network. We employ a residual connection [11] around each of\nthe two sub-layers, followed by layer normalization [1]. That is, the output of each sub-layer is\nLayerNorm(x + Sublayer(x)), where Sublayer() is the function implemented by the sub-layer\nitself. To facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmode = 512.\n", "chunk": "Encoder: The encoder is composed of a stack of N = 6 identical layers.\n\nEach layer has two\nsub-layers.\n\nThe first is a multi-head self-attention mechanism, and the second is a simple, position-\nwise fully connected feed-forward network.\n\nWe employ a residual connection [11] around each of\nthe two sub-layers, followed by layer normalization [1].\n\nThat is, the output of each sub-layer is\nLayerNorm(x + Sublayer(x)), where Sublayer() is the function implemented by the sub-layer\nitself.\n\nTo facilitate these residual connections, all sub-layers in the model, as well as the embedding\nlayers, produce outputs of dimension dmode = 512.", "page": 2, "bbox": [297.13177490234375, 1394.7139892578125, 1403.3853759765625, 1611.6348876953125]}, "20": {"type": "Text", "content": "Decoder: The decoder is also composed of a stack of N = 6 identical layers. In addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack. Similar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization. We also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions. This\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position i can depend only on the known outputs at positions less than 7.\n", "chunk": "Decoder: The decoder is also composed of a stack of N = 6 identical layers.\n\nIn addition to the two\nsub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head\nattention over the output of the encoder stack.\n\nSimilar to the encoder, we employ residual connections\naround each of the sub-layers, followed by layer normalization.\n\nWe also modify the self-attention\nsub-layer in the decoder stack to prevent positions from attending to subsequent positions.\n\nThis\nmasking, combined with fact that the output embeddings are offset by one position, ensures that the\npredictions for position i can depend only on the known outputs at positions less than 7.", "page": 2, "bbox": [300.8603210449219, 1640.613525390625, 1403.1871337890625, 1862.01025390625]}, "21": {"type": "Text", "content": "An attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors. The output is computed as a weighted sum\n", "chunk": "An attention function can be described as mapping a query and a set of key-value pairs to an output,\nwhere the query, keys, values, and output are all vectors.\n\nThe output is computed as a weighted sum", "page": 2, "bbox": [290.34564208984375, 1948.8553466796875, 1410.888427734375, 2008.2886962890625]}, "22": {"type": "Title", "content": "3.2. Attention\n", "chunk": "3.2.\n\nAttention", "page": 2, "bbox": [301.09423828125, 1891.3275146484375, 474.63427734375, 1924.6763916015625]}, "23": {"type": "Title", "content": "3.1 Encoder and Decoder Stacks\n", "chunk": "3.1 Encoder and Decoder Stacks", "page": 2, "bbox": [305.25299072265625, 1338.5848388671875, 706.3819580078125, 1372.5322265625]}, "24": {"type": "Title", "content": "Decoder:\n", "chunk": "Decoder:", "page": 2, "bbox": [301.0030822753906, 1642.9586181640625, 407.799072265625, 1671.8299560546875]}, "25": {"type": "Figure", "content": "Output\nProbabilities\n\nAdd & Norm\n\nAdd & Norm\n\nNx | (Gada Nom)\nAdd & Norm Masked\nMulti-Head Multi-Head\nAttention Attention\n4 a a,\n\nPosition:\nEncodin\n\nositional @ @\n\n=ncoding \u00a9\nInput Output\nEmbedding Embedding\n\nInputs Outputs\n(shifted right)\n\n", "chunk": "Output\nProbabilities\n\nAdd & Norm\n\nAdd & Norm\n\nNx | (Gada Nom)\nAdd & Norm Masked\nMulti-Head Multi-Head\nAttention Attention\n4 a a,\n\nPosition:\nEncodin\n\nositional @ @\n\n=ncoding \u00a9\nInput Output\nEmbedding Embedding\n\nInputs Outputs\n(shifted right)", "page": 2, "bbox": [556.9202880859375, 208.27781677246094, 1134.598876953125, 1087.6629638671875]}, "26": {"type": "Text", "content": "Figure 2: (left) Scaled Dot-Product Attention. (right) Multi-Head Attention consists of sever\nattention layers running in parallel.\n", "chunk": "Figure 2: (left) Scaled Dot-Product Attention.\n\n(right) Multi-Head Attention consists of sever\nattention layers running in parallel.", "page": 3, "bbox": [301.313232421875, 758.9078369140625, 1374.5496826171875, 821.99462890625]}, "27": {"type": "Text", "content": "of the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.\n", "chunk": "of the values, where the weight assigned to each value is computed by a compatibility function of the\nquery with the corresponding key.", "page": 3, "bbox": [301.3560485839844, 880.9378051757812, 1390.0142822265625, 938.95654296875]}, "28": {"type": "Text", "content": "We call our particular attention \"Scaled Dot-Product Attention\" (Figure 2). The input consists of\nqueries and keys of dimension d;,, and values of dimension d,,. We compute the dot products of the\n\nquery with all keys, divide each by Wd; and apply a softmax function to obtain the weights on the\nvalues.\n", "chunk": "We call our particular attention \"Scaled Dot-Product Attention\" (Figure 2).\n\nThe input consists of\nqueries and keys of dimension d;,, and values of dimension d,,.\n\nWe compute the dot products of the\n\nquery with all keys, divide each by Wd; and apply a softmax function to obtain the weights on the\nvalues.", "page": 3, "bbox": [296.73095703125, 1022.8419189453125, 1401.71484375, 1152.03564453125]}, "29": {"type": "Text", "content": "In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q. The keys and values are also packed together into matrices K and V. We compute\nthe matrix of outputs as:\n", "chunk": "In practice, we compute the attention function on a set of queries simultaneously, packed together\ninto a matrix Q.\n\nThe keys and values are also packed together into matrices K and V. We compute\nthe matrix of outputs as:", "page": 3, "bbox": [302.51983642578125, 1161.1746826171875, 1409.0306396484375, 1251.695068359375]}, "30": {"type": "Text", "content": "The two most commonly used attention functions are additive attention [2], and dot-product (multi-\nPlicative) attention. Dot-product attention is identical to our algorithm, except for the scaling factor\nof TE Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer. While the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-efficient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.\n", "chunk": "The two most commonly used attention functions are additive attention [2], and dot-product (multi-\nPlicative) attention.\n\nDot-product attention is identical to our algorithm, except for the scaling factor\nof TE Additive attention computes the compatibility function using a feed-forward network with\na single hidden layer.\n\nWhile the two are similar in theoretical complexity, dot-product attention is\nmuch faster and more space-efficient in practice, since it can be implemented using highly optimized\nmatrix multiplication code.", "page": 3, "bbox": [302.246826171875, 1382.530517578125, 1402.848388671875, 1576.0006103515625]}, "31": {"type": "Text", "content": "While for small values of dj, the two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of d;, [3]. We suspect that for large values of\nd,,, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients 4. To counteract this effect, we scale the dot products by Tir\n", "chunk": "While for small values of dj, the two mechanisms perform similarly, additive attention outperforms\ndot product attention without scaling for larger values of d;, [3].\n\nWe suspect that for large values of\nd,,, the dot products grow large in magnitude, pushing the softmax function into regions where it has\nextremely small gradients 4.\n\nTo counteract this effect, we scale the dot products by Tir", "page": 3, "bbox": [295.760009765625, 1589.76806640625, 1402.8258056640625, 1718.430908203125]}, "32": {"type": "Text", "content": "Instead of performing a single attention function with dmodei-dimensional keys, values and queries\nwe found it beneficial to linearly project the queries, keys and values h times with different, learned\nlinear projections to d;,, d;, and d,, dimensions, respectively. On each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding d,,-dimensional\n", "chunk": "Instead of performing a single attention function with dmodei-dimensional keys, values and queries\nwe found it beneficial to linearly project the queries, keys and values h times with different, learned\nlinear projections to d;,, d;, and d,, dimensions, respectively.\n\nOn each of these projected versions of\nqueries, keys and values we then perform the attention function in parallel, yielding d,,-dimensional", "page": 3, "bbox": [291.97784423828125, 1802.333740234375, 1393.07470703125, 1927.274169921875]}, "33": {"type": "Text", "content": "\u201cTo illustrate why the dot products get large, assume that the components of q and k are independent random\nvariables with mean 0 and variance 1. Then their dot product, g-k = we, qiki, has mean 0 and variance d,.\n", "chunk": "\u201cTo illustrate why the dot products get large, assume that the components of q and k are independent random\nvariables with mean 0 and variance 1.\n\nThen their dot product, g-k = we, qiki, has mean 0 and variance d,.", "page": 3, "bbox": [293.9410400390625, 1949.05224609375, 1408.210693359375, 2008.489013671875]}, "34": {"type": "Title", "content": "3.2.2 Multi-Head Attention\n", "chunk": "3.2.2 Multi-Head Attention", "page": 3, "bbox": [296.2648620605469, 1748.795654296875, 645.6609497070312, 1783.7603759765625]}, "35": {"type": "Title", "content": "3.2.1 Scaled Dot-Product Attention\n", "chunk": "3.2.1 Scaled Dot-Product Attention", "page": 3, "bbox": [300.7055969238281, 972.1287841796875, 738.6445922851562, 1007.3341064453125]}, "36": {"type": "Figure", "content": "led Dot-Product Attention Multi-Head Attention\n\n", "chunk": "led Dot-Product Attention Multi-Head Attention", "page": 3, "bbox": [453.1456298828125, 196.0001678466797, 1275.8360595703125, 713.7534790039062]}, "37": {"type": "Text", "content": "output values. These are concatenated and once again projected, resulting in the final values, as\ndepicted in Figure 2.\n", "chunk": "output values.\n\nThese are concatenated and once again projected, resulting in the final values, as\ndepicted in Figure 2.", "page": 4, "bbox": [302.72943115234375, 207.7886505126953, 1391.1455078125, 264.3246765136719]}, "38": {"type": "Text", "content": "Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions. With a single attention head, averaging inhibits this.\n", "chunk": "Multi-head attention allows the model to jointly attend to information from different representation\nsubspaces at different positions.\n\nWith a single attention head, averaging inhibits this.", "page": 4, "bbox": [290.18621826171875, 282.5141906738281, 1404.3902587890625, 341.27532958984375]}, "39": {"type": "Text", "content": "Where the projections are parameter matrices W2 \u20ac R&%4, WE \u00a9 Remote YY \u00a9 RAnoier\nand WO \u20ac Ride dose!\n", "chunk": "Where the projections are parameter matrices W2 \u20ac R&%4, WE \u00a9 Remote YY \u00a9 RAnoier\nand WO \u20ac Ride dose!", "page": 4, "bbox": [287.993408203125, 567.4017944335938, 1376.819580078125, 635.8628540039062]}, "40": {"type": "Text", "content": "In this work we employ h = 8 parallel attention layers, or heads. For each of these we use\ndj, = dy = dmodei/h = 64. Due to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.\n", "chunk": "In this work we employ h = 8 parallel attention layers, or heads.\n\nFor each of these we use\ndj, = dy = dmodei/h = 64.\n\nDue to the reduced dimension of each head, the total computational cost\nis similar to that of single-head attention with full dimensionality.", "page": 4, "bbox": [301.76739501953125, 652.7040405273438, 1396.226318359375, 745.0515747070312]}, "41": {"type": "Text", "content": "The Transformer uses multi-head attention in three different ways:\n", "chunk": "The Transformer uses multi-head attention in three different ways:", "page": 4, "bbox": [303.81134033203125, 831.7400512695312, 1038.3359375, 860.3290405273438]}, "42": {"type": "Text", "content": "In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically. This\nconsists of two linear transformations with a ReLU activation in between.\n", "chunk": "In addition to attention sub-layers, each of the layers in our encoder and decoder contains a fully\nconnected feed-forward network, which is applied to each position separately and identically.\n\nThis\nconsists of two linear transformations with a ReLU activation in between.", "page": 4, "bbox": [301.32379150390625, 1436.1031494140625, 1399.3084716796875, 1530.4207763671875]}, "43": {"type": "Text", "content": "While the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer. Another way of describing this is as two convolutions with kernel size 1.\nThe dimensionality of input and output is dmodei = 512, and the inner-layer has dimensionality\ndy = 2048.\n", "chunk": "While the linear transformations are the same across different positions, they use different parameters\nfrom layer to layer.\n\nAnother way of describing this is as two convolutions with kernel size 1.\n\nThe dimensionality of input and output is dmodei = 512, and the inner-layer has dimensionality\ndy = 2048.", "page": 4, "bbox": [306.385986328125, 1637.81689453125, 1397.3216552734375, 1759.0577392578125]}, "44": {"type": "Text", "content": "Similarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodei. We also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities. In\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [30]. In the embedding layers, we multiply those weights by \\/dmodel.\n", "chunk": "Similarly to other sequence transduction models, we use learned embeddings to convert the input\ntokens and output tokens to vectors of dimension dmodei.\n\nWe also use the usual learned linear transfor-\nmation and softmax function to convert the decoder output to predicted next-token probabilities.\n\nIn\nour model, we share the same weight matrix between the two embedding layers and the pre-softmax\nlinear transformation, similar to [30].\n\nIn the embedding layers, we multiply those weights by \\/dmodel.", "page": 4, "bbox": [304.33770751953125, 1855.93701171875, 1398.342041015625, 2011.1358642578125]}, "45": {"type": "Title", "content": "3.3 Position-wise Feed-Forward Networks\n", "chunk": "3.3 Position-wise Feed-Forward Networks", "page": 4, "bbox": [302.09429931640625, 1380.1717529296875, 820.788818359375, 1414.33447265625]}, "46": {"type": "Title", "content": "3.4 Embeddings and Softmax\n", "chunk": "3.4 Embeddings and Softmax", "page": 4, "bbox": [300.17071533203125, 1799.0732421875, 671.1810913085938, 1832.35791015625]}, "47": {"type": "Title", "content": ".2.3 Applications of Attention in our Model\n", "chunk": ".2.3 Applications of Attention in our Model", "page": 4, "bbox": [316.6565856933594, 775.9468994140625, 845.6858520507812, 810.3944091796875]}, "48": {"type": "Title", "content": "FFN(x) = max(0,7W, + b1)W2 + bz\n", "chunk": "FFN(x) = max(0,7W, + b1)W2 + bz", "page": 4, "bbox": [632.4609375, 1575.273681640625, 1069.92236328125, 1610.3653564453125]}, "49": {"type": "List", "content": "\u00a2 In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder. This allows every\nposition in the decoder to attend over all positions in the input sequence. This mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[38, 2, 9].\n\n\u00a2 The encoder contains self-attention layers. In a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder. Each position in the encoder can attend to all positions in the previous layer of the\nencoder.\n\n\u00a2 Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position. We need to prevent leftward\ninformation flow in the decoder to preserve the auto-regressive property. We implement this\ninside of scaled dot-product attention by masking out (setting to \u2014oo) all values in the input\nof the softmax which correspond to illegal connections. See Figure 2.\n", "chunk": "\u00a2 In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer,\nand the memory keys and values come from the output of the encoder.\n\nThis allows every\nposition in the decoder to attend over all positions in the input sequence.\n\nThis mimics the\ntypical encoder-decoder attention mechanisms in sequence-to-sequence models such as\n[38, 2, 9].\n\n\u00a2 The encoder contains self-attention layers.\n\nIn a self-attention layer all of the keys, values\nand queries come from the same place, in this case, the output of the previous layer in the\nencoder.\n\nEach position in the encoder can attend to all positions in the previous layer of the\nencoder.\n\n\u00a2 Similarly, self-attention layers in the decoder allow each position in the decoder to attend to\nall positions in the decoder up to and including that position.\n\nWe need to prevent leftward\ninformation flow in the decoder to preserve the auto-regressive property.\n\nWe implement this\ninside of scaled dot-product attention by masking out (setting to \u2014oo) all values in the input\nof the softmax which correspond to illegal connections.\n\nSee Figure 2.", "page": 4, "bbox": [361.40313720703125, 891.035888671875, 1398.248291015625, 1346.5072021484375]}, "50": {"type": "Text", "content": "Table 1: Maximum path lengths, per-layer complexity and minimum number of sequential operation:\nfor different layer types. n is the sequence length, d is the representation dimension, k is the kerne\nsize of convolutions and r the size of the neighborhood in restricted self-attention.\n", "chunk": "Table 1: Maximum path lengths, per-layer complexity and minimum number of sequential operation:\nfor different layer types.\n\nn is the sequence length, d is the representation dimension, k is the kerne\nsize of convolutions and r the size of the neighborhood in restricted self-attention.", "page": 5, "bbox": [306.27764892578125, 194.1731414794922, 1388.6036376953125, 288.7279968261719]}, "51": {"type": "Text", "content": "Since our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\n\u2018okens in the sequence. To this end, we add \"positional encodings\" to the input embeddings at the\ndottoms of the encoder and decoder stacks. The positional encodings have the same dimension dyodet\nis the embeddings, so that the two can be summed. There are many choices of positional encodings,\nlearned and fixed [9].\n", "chunk": "Since our model contains no recurrence and no convolution, in order for the model to make use of the\norder of the sequence, we must inject some information about the relative or absolute position of the\n\u2018okens in the sequence.\n\nTo this end, we add \"positional encodings\" to the input embeddings at the\ndottoms of the encoder and decoder stacks.\n\nThe positional encodings have the same dimension dyodet\nis the embeddings, so that the two can be summed.\n\nThere are many choices of positional encodings,\nlearned and fixed [9].", "page": 5, "bbox": [309.361572265625, 648.6790161132812, 1408.7398681640625, 836.1653442382812]}, "52": {"type": "Text", "content": "In this work, we use sine and cosine functions of different frequencies:\n", "chunk": "In this work, we use sine and cosine functions of different frequencies:", "page": 5, "bbox": [301.34796142578125, 846.5339965820312, 1079.5865478515625, 875.8930053710938]}, "53": {"type": "Text", "content": "where pos is the position and 7 is the dimension. That is, each dimension of the positional encoding\ncorresponds to a sinusoid. The wavelengths form a geometric progression from 27 to 10000 - 27. We\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any fixed offset k, PEpos+, can be represented as a linear function of\nPE,\n\n(pos\n", "chunk": "where pos is the position and 7 is the dimension.\n\nThat is, each dimension of the positional encoding\ncorresponds to a sinusoid.\n\nThe wavelengths form a geometric progression from 27 to 10000 - 27.\n\nWe\nchose this function because we hypothesized it would allow the model to easily learn to attend by\nrelative positions, since for any fixed offset k, PEpos+, can be represented as a linear function of\nPE,\n\n(pos", "page": 5, "bbox": [299.458984375, 1046.0330810546875, 1405.3994140625, 1202.9393310546875]}, "54": {"type": "Text", "content": "We also experimented with using learned positional embeddings [9] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)). We chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.\n", "chunk": "We also experimented with using learned positional embeddings [9] instead, and found that the two\nversions produced nearly identical results (see Table 3 row (E)).\n\nWe chose the sinusoidal version\nbecause it may allow the model to extrapolate to sequence lengths longer than the ones encountered\nduring training.", "page": 5, "bbox": [307.86181640625, 1213.0372314453125, 1394.280029296875, 1334.3173828125]}, "55": {"type": "Text", "content": "In this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(21,...,@n) to another sequence of equal length (z1,...,2n), with 2;, 2; \u20ac IR, such as a hidden\nlayer in a typical sequence transduction encoder or decoder. Motivating our use of self-attention we\nconsider three desiderata.\n", "chunk": "In this section we compare various aspects of self-attention layers to the recurrent and convolu-\ntional layers commonly used for mapping one variable-length sequence of symbol representations\n(21,...,@n) to another sequence of equal length (z1,...,2n), with 2;, 2; \u20ac IR, such as a hidden\nlayer in a typical sequence transduction encoder or decoder.\n\nMotivating our use of self-attention we\nconsider three desiderata.", "page": 5, "bbox": [293.12005615234375, 1442.6717529296875, 1408.777099609375, 1597.699951171875]}, "56": {"type": "Text", "content": "One is the total computational complexity per layer. Another is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.\n", "chunk": "One is the total computational complexity per layer.\n\nAnother is the amount of computation that can\nbe parallelized, as measured by the minimum number of sequential operations required.", "page": 5, "bbox": [285.0930480957031, 1614.257080078125, 1417.4124755859375, 1674.0426025390625]}, "57": {"type": "Text", "content": "The third is the path length between long-range dependencies in the network. Learning long-range\ndependencies is a key challenge in many sequence transduction tasks. One key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network. The shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [12]. Hence we also compare\n\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.\n", "chunk": "The third is the path length between long-range dependencies in the network.\n\nLearning long-range\ndependencies is a key challenge in many sequence transduction tasks.\n\nOne key factor affecting the\nability to learn such dependencies is the length of the paths forward and backward signals have to\ntraverse in the network.\n\nThe shorter these paths between any combination of positions in the input\nand output sequences, the easier it is to learn long-range dependencies [12].\n\nHence we also compare\n\nthe maximum path length between any two input and output positions in networks composed of the\ndifferent layer types.", "page": 5, "bbox": [297.71051025390625, 1683.8033447265625, 1406.232666015625, 1901.24951171875]}, "58": {"type": "Text", "content": "As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n) sequential operations. In terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence\n", "chunk": "As noted in Table 1, a self-attention layer connects all positions with a constant number of sequentially\nexecuted operations, whereas a recurrent layer requires O(n) sequential operations.\n\nIn terms of\ncomputational complexity, self-attention layers are faster than recurrent layers when the sequence", "page": 5, "bbox": [301.6290588378906, 1914.496337890625, 1403.69970703125, 2009.470703125]}, "59": {"type": "Title", "content": "Why Self-Attention\n", "chunk": "Why Self-Attention", "page": 5, "bbox": [338.7319641113281, 1378.622802734375, 625.7310791015625, 1416.3089599609375]}, "60": {"type": "Title", "content": "3.5 Positional Encoding\n", "chunk": "3.5 Positional Encoding", "page": 5, "bbox": [300.6069641113281, 590.979736328125, 603.0147094726562, 625.7772827148438]}, "61": {"type": "Table", "content": "Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\n\nSelf-Attention (n? - d) O(1) O(1)\n\nRecurrent (n+ d?) O(n) O(n)\n\nConvolutional O(k-n-d?) O(1) O(logx(n))\n\nSelf-Attention (restricted) O(r-n-d) ol) O(n/r)\n\n", "chunk": "Layer Type Complexity per Layer Sequential Maximum Path Length\nOperations\n\nSelf-Attention (n?\n\n- d) O(1) O(1)\n\nRecurrent (n+ d?)\n\nO(n) O(n)\n\nConvolutional O(k-n-d?)\n\nO(1) O(logx(n))\n\nSelf-Attention (restricted) O(r-n-d) ol) O(n/r)", "page": 5, "bbox": [353.54803466796875, 319.8682861328125, 1367.7501220703125, 523.511962890625]}, "62": {"type": "Text", "content": "length n is smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[38] and byte-pair [31] representations. To improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size r in\nthe input sequence centered around the respective output position. This would increase the maximum\npath length to O(n/r). We plan to investigate this approach further in future work.\n", "chunk": "length n is smaller than the representation dimensionality d, which is most often the case with\nsentence representations used by state-of-the-art models in machine translations, such as word-piece\n[38] and byte-pair [31] representations.\n\nTo improve computational performance for tasks involving\nvery long sequences, self-attention could be restricted to considering only a neighborhood of size r in\nthe input sequence centered around the respective output position.\n\nThis would increase the maximum\npath length to O(n/r).\n\nWe plan to investigate this approach further in future work.", "page": 6, "bbox": [300.9000244140625, 203.53863525390625, 1406.650634765625, 391.2835388183594]}, "63": {"type": "Text", "content": "A single convolutional layer with kernel width k < n does not connect all pairs of input and outpu\npositions. Doing so requires a stack of O(n/k) convolutional layers in the case of contiguous kernels\nor O(log,(n)) in the case of dilated convolutions [18], increasing the length of the longest paths\nbetween any two positions in the network. Convolutional layers are generally more expensive thar\nrecurrent layers, by a factor of k. Separable convolutions [6], however, decrease the complexity\nconsiderably, to O(k -n-d+n-d?). Even with k = n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer\nthe approach we take in our model.\n", "chunk": "A single convolutional layer with kernel width k < n does not connect all pairs of input and outpu\npositions.\n\nDoing so requires a stack of O(n/k) convolutional layers in the case of contiguous kernels\nor O(log,(n)) in the case of dilated convolutions [18], increasing the length of the longest paths\nbetween any two positions in the network.\n\nConvolutional layers are generally more expensive thar\nrecurrent layers, by a factor of k. Separable convolutions [6], however, decrease the complexity\nconsiderably, to O(k -n-d+n-d?).\n\nEven with k = n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer\nthe approach we take in our model.", "page": 6, "bbox": [305.9185485839844, 401.5473327636719, 1391.650634765625, 647.6824340820312]}, "64": {"type": "Text", "content": "As side benefit, self-attention could yield more interpretable models. We inspect attention distributions\nfrom our models and present and discuss examples in the appendix. Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n", "chunk": "As side benefit, self-attention could yield more interpretable models.\n\nWe inspect attention distributions\nfrom our models and present and discuss examples in the appendix.\n\nNot only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.", "page": 6, "bbox": [298.7570495605469, 655.6446533203125, 1395.0526123046875, 781.0455322265625]}, "65": {"type": "Text", "content": "[his section describes the training regime for our models.\n", "chunk": "[his section describes the training regime for our models.", "page": 6, "bbox": [310.20965576171875, 904.5704345703125, 934.0524291992188, 933.7266845703125]}, "66": {"type": "Text", "content": "We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs. Sentences were encoded using byte-pair encoding [3], which has a shared source-\ntarget vocabulary of about 37000 tokens. For English-French, we used the significantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [38]. Sentence pairs were batched together by approximate sequence length. Each training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.\n", "chunk": "We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million\nsentence pairs.\n\nSentences were encoded using byte-pair encoding [3], which has a shared source-\ntarget vocabulary of about 37000 tokens.\n\nFor English-French, we used the significantly larger WMT\n2014 English-French dataset consisting of 36M sentences and split tokens into a 32000 word-piece\nvocabulary [38].\n\nSentence pairs were batched together by approximate sequence length.\n\nEach training\nbatch contained a set of sentence pairs containing approximately 25000 source tokens and 25000\ntarget tokens.", "page": 6, "bbox": [298.85205078125, 1032.166259765625, 1408.678955078125, 1250.42919921875]}, "67": {"type": "Text", "content": "We trained our models on one machine with 8 NVIDIA P100 GPUs. For our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds. We\ntrained the base models for a total of 100,000 steps or 12 hours. For our big models,(described on the\n\nbottom line of table 3), step time was 1.0 seconds. The big models were trained for 300,000 steps\n(3.5 days).\n", "chunk": "We trained our models on one machine with 8 NVIDIA P100 GPUs.\n\nFor our base models using\nthe hyperparameters described throughout the paper, each training step took about 0.4 seconds.\n\nWe\ntrained the base models for a total of 100,000 steps or 12 hours.\n\nFor our big models,(described on the\n\nbottom line of table 3), step time was 1.0 seconds.\n\nThe big models were trained for 300,000 steps\n(3.5 days).", "page": 6, "bbox": [301.3261413574219, 1348.343994140625, 1402.7178955078125, 1505.886962890625]}, "68": {"type": "Text", "content": "We used the Adam optimizer [20] with 6; = 0.9, 82 = 0.98 and \u20ac = 10-9. We varied the learning\nrate over the course of training, according to the formula:\n", "chunk": "We used the Adam optimizer [20] with 6; = 0.9, 82 = 0.98 and \u20ac = 10-9.\n\nWe varied the learning\nrate over the course of training, according to the formula:", "page": 6, "bbox": [290.2873229980469, 1604.4722900390625, 1401.371337890625, 1665.67333984375]}, "69": {"type": "Text", "content": "This corresponds to increasing the learning rate linearly for the first warmup_steps training step:\nand decreasing it thereafter proportionally to the inverse square root of the step number. We use:\nwarmup_steps = 4000.\n", "chunk": "This corresponds to increasing the learning rate linearly for the first warmup_steps training step:\nand decreasing it thereafter proportionally to the inverse square root of the step number.\n\nWe use:\nwarmup_steps = 4000.", "page": 6, "bbox": [298.1448059082031, 1781.1983642578125, 1386.7008056640625, 1873.1470947265625]}, "70": {"type": "Text", "content": "We employ three types of regularization during training\n", "chunk": "We employ three types of regularization during training", "page": 6, "bbox": [301.4797668457031, 1976.3828125, 910.1837158203125, 2007.315185546875]}, "71": {"type": "Title", "content": "5.2 Hardware and Schedule\n", "chunk": "5.2 Hardware and Schedule", "page": 6, "bbox": [304.2075500488281, 1292.0701904296875, 654.2169799804688, 1324.89306640625]}, "72": {"type": "Title", "content": "5.3. Optimizer\n", "chunk": "5.3.\n\nOptimizer", "page": 6, "bbox": [306.98834228515625, 1546.0460205078125, 482.43585205078125, 1579.7064208984375]}, "73": {"type": "Title", "content": "1 Training Data and Batching\n", "chunk": "1 Training Data and Batching", "page": 6, "bbox": [323.56707763671875, 979.3143920898438, 700.137939453125, 1010.525390625]}, "74": {"type": "Title", "content": "Training\n", "chunk": "Training", "page": 6, "bbox": [342.0307922363281, 829.7860107421875, 473.2875061035156, 869.3932495117188]}, "75": {"type": "Title", "content": "5.4 Regularization\n", "chunk": "5.4 Regularization", "page": 6, "bbox": [300.8760986328125, 1917.037841796875, 541.2637329101562, 1951.5999755859375]}, "76": {"type": "Text", "content": "Table 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.\n\n", "chunk": "Table 2: The Transformer achieves better BLEU scores than previous state-of-the-art models on the\nEnglish-to-German and English-to-French newstest2014 tests at a fraction of the training cost.", "page": 7, "bbox": [306.9272766113281, 195.99560546875, 1422.9853515625, 258.3423156738281]}, "77": {"type": "Text", "content": "Residual Dropout We apply dropout [33] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized. In addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks. For the base model, we use a rate of\nParop = 0.1.\n", "chunk": "Residual Dropout We apply dropout [33] to the output of each sub-layer, before it is added to the\nsub-layer input and normalized.\n\nIn addition, we apply dropout to the sums of the embeddings and the\npositional encodings in both the encoder and decoder stacks.\n\nFor the base model, we use a rate of\nParop = 0.1.", "page": 7, "bbox": [298.2413024902344, 756.94287109375, 1394.880615234375, 880.8865966796875]}, "78": {"type": "Text", "content": "Label Smoothing During training, we employed label smoothing of value \u20ac;, = 0.1 [36]. Thi\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.\n", "chunk": "Label Smoothing During training, we employed label smoothing of value \u20ac;, = 0.1 [36].\n\nThi\nhurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.", "page": 7, "bbox": [285.1104431152344, 919.2431030273438, 1388.06689453125, 982.0307006835938]}, "79": {"type": "Text", "content": "On the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4. The configuration of this model is\nlisted in the bottom line of Table 3. Training took 3.5 days on 8 P100 GPUs. Even our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.\n", "chunk": "On the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big)\nin Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0\nBLEU, establishing a new state-of-the-art BLEU score of 28.4.\n\nThe configuration of this model is\nlisted in the bottom line of Table 3.\n\nTraining took 3.5 days on 8 P100 GPUs.\n\nEven our base model\nsurpasses all previously published models and ensembles, at a fraction of the training cost of any of\nthe competitive models.", "page": 7, "bbox": [299.0964050292969, 1157.1748046875, 1406.7354736328125, 1342.816162109375]}, "80": {"type": "Text", "content": "On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4 the training cost of the\nprevious state-of-the-art model. The Transformer (big) model trained for English-to-French used\ndropout rate Papop = 0.1, instead of 0.3.\n", "chunk": "On the WMT 2014 English-to-French translation task, our big model achieves a BLEU score of 41.0,\noutperforming all of the previously published single models, at less than 1/4 the training cost of the\nprevious state-of-the-art model.\n\nThe Transformer (big) model trained for English-to-French used\ndropout rate Papop = 0.1, instead of 0.3.", "page": 7, "bbox": [302.77508544921875, 1356.5302734375, 1424.645751953125, 1480.1328125]}, "81": {"type": "Text", "content": "\u2018or the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nvere written at 10-minute intervals. For the big models, we averaged the last 20 checkpoints. We\nised beam search with a beam size of 4 and length penalty a = 0.6 [38]. These hyperparameters\nvere chosen after experimentation on the development set. We set the maximum output length during\nnference to input length + 50, but terminate early when possible [38].\n", "chunk": "\u2018or the base models, we used a single model obtained by averaging the last 5 checkpoints, which\nvere written at 10-minute intervals.\n\nFor the big models, we averaged the last 20 checkpoints.\n\nWe\nised beam search with a beam size of 4 and length penalty a = 0.6 [38].\n\nThese hyperparameters\nvere chosen after experimentation on the development set.\n\nWe set the maximum output length during\nnference to input length + 50, but terminate early when possible [38].", "page": 7, "bbox": [312.90301513671875, 1491.037841796875, 1404.8704833984375, 1653.2093505859375]}, "82": {"type": "Text", "content": "Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature. We estimate the number of floating point operations used to train a\n\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision floating-point capacity of each GPU \u00a9.\n", "chunk": "Table 2 summarizes our results and compares our translation quality and training costs to other model\narchitectures from the literature.\n\nWe estimate the number of floating point operations used to train a\n\nmodel by multiplying the training time, the number of GPUs used, and an estimate of the sustained\nsingle-precision floating-point capacity of each GPU \u00a9.", "page": 7, "bbox": [295.82720947265625, 1664.24609375, 1406.8931884765625, 1785.0391845703125]}, "83": {"type": "Text", "content": "To evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the\n", "chunk": "To evaluate the importance of different components of the Transformer, we varied our base model\nin different ways, measuring the change in performance on English-to-German translation on the", "page": 7, "bbox": [291.46759033203125, 1883.765869140625, 1421.51708984375, 1947.186767578125]}, "84": {"type": "Text", "content": "5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.\n", "chunk": "5We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.", "page": 7, "bbox": [333.0887451171875, 1977.8173828125, 1259.1312255859375, 2007.656005859375]}, "85": {"type": "Title", "content": "6.2. Model Variations\n", "chunk": "6.2.\n\nModel Variations", "page": 7, "bbox": [300.2301025390625, 1820.744384765625, 571.1746215820312, 1858.30517578125]}, "86": {"type": "Title", "content": "6.1 Machine Translation\n", "chunk": "6.1 Machine Translation", "page": 7, "bbox": [301.09381103515625, 1101.1910400390625, 615.1002197265625, 1135.0377197265625]}, "87": {"type": "Table", "content": "BLEU\n\nTraining Cost (FLOPs)\n\nModel\n\nEN-DE EN-FR EN-DE EN-FR\nByteNet [18] 23.75\nDeep-Att + PosUnk [39] 39.2 1.0- 107\u00b0\nGNMT + RL [38] 24.6 39.92 2.3-10!9 1.4. 107\u00b0\nConvS2S [9] 25.16 40.46 9.6-10'8 1.5-107\u00b0\nMoE [32] 26.03 40.56 2.0-10'9 1.2. 107\u00b0\nDeep-Att + PosUnk Ensemble [39] 40.4 8.0 - 102\u00b0\nGNMT + RL Ensemble [38] 26.30 41.16 18-1079 1.1- 1074\nConvS2S Ensemble [9] 26.36 41.29 7.7-10'9 1.2.10?!\nTransformer (base model) 27.3 38.1 3.3- 1018\nTransformer (big) 28.4 41.8 2.3.10!\n", "chunk": "BLEU\n\nTraining Cost (FLOPs)\n\nModel\n\nEN-DE EN-FR EN-DE EN-FR\nByteNet [18] 23.75\nDeep-Att + PosUnk [39] 39.2 1.0- 107\u00b0\nGNMT + RL [38] 24.6 39.92 2.3-10!9 1.4.\n\n107\u00b0\nConvS2S [9] 25.16 40.46 9.6-10'8 1.5-107\u00b0\nMoE [32] 26.03 40.56 2.0-10'9 1.2.", "page": 7, "bbox": [330.87945556640625, 262.8926696777344, 1374.5595703125, 685.8743896484375]}, "88": {"type": "Table", "content": "BLEU\n\nTraining Cost (FLOPs)\n\nModel\n\nEN-DE EN-FR EN-DE EN-FR\nByteNet [18] 23.75\nDeep-Att + PosUnk [39] 39.2 1.0- 107\u00b0\nGNMT + RL [38] 24.6 39.92 2.3-10!9 1.4. 107\u00b0\nConvS2S [9] 25.16 40.46 9.6-10'8 1.5-107\u00b0\nMoE [32] 26.03 40.56 2.0-10'9 1.2. 107\u00b0\nDeep-Att + PosUnk Ensemble [39] 40.4 8.0 - 102\u00b0\nGNMT + RL Ensemble [38] 26.30 41.16 18-1079 1.1- 1074\nConvS2S Ensemble [9] 26.36 41.29 7.7-10'9 1.2.10?!\nTransformer (base model) 27.3 38.1 3.3- 1018\nTransformer (big) 28.4 41.8 2.3.10!\n", "chunk": "107\u00b0\nDeep-Att + PosUnk Ensemble [39] 40.4 8.0 - 102\u00b0\nGNMT + RL Ensemble [38] 26.30 41.16 18-1079 1.1- 1074\nConvS2S Ensemble [9] 26.36 41.29 7.7-10'9 1.2.10?!\n\nTransformer (base model) 27.3 38.1 3.3- 1018\nTransformer (big) 28.4 41.8 2.3.10!", "page": 7, "bbox": [330.87945556640625, 262.8926696777344, 1374.5595703125, 685.8743896484375]}, "89": {"type": "Text", "content": "Table 3: Variations on the Transformer architecture. Unlisted values are identical to those of the base\nmodel. All metrics are on the English-to-German translation development set, newstest2013. Listed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.\n", "chunk": "Table 3: Variations on the Transformer architecture.\n\nUnlisted values are identical to those of the base\nmodel.\n\nAll metrics are on the English-to-German translation development set, newstest2013.\n\nListed\nperplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to\nper-word perplexities.", "page": 8, "bbox": [301.7994689941406, 193.64767456054688, 1400.10595703125, 318.0054931640625]}, "90": {"type": "Text", "content": "development set, newstest2013. We used beam search as described in the previous section, but no\ncheckpoint averaging. We present these results in Table 3.\n", "chunk": "development set, newstest2013.\n\nWe used beam search as described in the previous section, but no\ncheckpoint averaging.\n\nWe present these results in Table 3.", "page": 8, "bbox": [292.23736572265625, 1148.4188232421875, 1399.2196044921875, 1208.608642578125]}, "91": {"type": "Text", "content": "In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2. While single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.\n", "chunk": "In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions,\nkeeping the amount of computation constant, as described in Section 3.2.2.\n\nWhile single-head\nattention is 0.9 BLEU worse than the best setting, quality also drops off with too many heads.", "page": 8, "bbox": [299.9926452636719, 1223.7451171875, 1403.090087890625, 1318.0604248046875]}, "92": {"type": "Text", "content": "In Table 3 rows (B), we observe that reducing the attention key size dj, hurts model quality. This\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be beneficial. We further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-fitting. In row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [9], and observe nearly identical\nresults to the base model.\n", "chunk": "In Table 3 rows (B), we observe that reducing the attention key size dj, hurts model quality.\n\nThis\nsuggests that determining compatibility is not easy and that a more sophisticated compatibility\nfunction than dot product may be beneficial.\n\nWe further observe in rows (C) and (D) that, as expected,\nbigger models are better, and dropout is very helpful in avoiding over-fitting.\n\nIn row (E) we replace our\nsinusoidal positional encoding with learned positional embeddings [9], and observe nearly identical\nresults to the base model.", "page": 8, "bbox": [308.47979736328125, 1328.4014892578125, 1401.000732421875, 1514.7802734375]}, "93": {"type": "Text", "content": "To evaluate if the Transformer can generalize to other tasks we performed experiments on English\nconstituency parsing. This task presents specific challenges: the output is subject to strong structural\nconstraints and is significantly longer than the input. Furthermore, RNN sequence-to-sequence\nmodels have not been able to attain state-of-the-art results in small-data regimes [37].\n", "chunk": "To evaluate if the Transformer can generalize to other tasks we performed experiments on English\nconstituency parsing.\n\nThis task presents specific challenges: the output is subject to strong structural\nconstraints and is significantly longer than the input.\n\nFurthermore, RNN sequence-to-sequence\nmodels have not been able to attain state-of-the-art results in small-data regimes [37].", "page": 8, "bbox": [300.6889343261719, 1611.6556396484375, 1399.0972900390625, 1737.7733154296875]}, "94": {"type": "Text", "content": "We trained a 4-layer transformer with dodet = 1024 on the Wall Street Journal (WSJ) portion of the\nPenn Treebank [25], about 40K training sentences. We also trained it in a semi-supervised setting,\nising the larger high-confidence and BerkleyParser corpora from with approximately 17M sentences\n37]. We used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokens\nfor the semi-supervised setting.\n", "chunk": "We trained a 4-layer transformer with dodet = 1024 on the Wall Street Journal (WSJ) portion of the\nPenn Treebank [25], about 40K training sentences.\n\nWe also trained it in a semi-supervised setting,\nising the larger high-confidence and BerkleyParser corpora from with approximately 17M sentences\n37].\n\nWe used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokens\nfor the semi-supervised setting.", "page": 8, "bbox": [309.6208801269531, 1749.982177734375, 1402.7545166015625, 1903.104736328125]}, "95": {"type": "Text", "content": "We performed only a small number of experiments to select the dropout, both attention and residual\n(section 5.4), learning rates and beam size on the Section 22 development set, all other parameters\nremained unchanged from the English-to-German base translation model. During inference, we\n", "chunk": "We performed only a small number of experiments to select the dropout, both attention and residual\n(section 5.4), learning rates and beam size on the Section 22 development set, all other parameters\nremained unchanged from the English-to-German base translation model.\n\nDuring inference, we", "page": 8, "bbox": [295.2104187011719, 1914.3282470703125, 1410.193359375, 2007.7552490234375]}, "96": {"type": "Title", "content": ".3 English Constituency Parsing\n", "chunk": ".3 English Constituency Parsing", "page": 8, "bbox": [317.9432373046875, 1555.5, 712.4766845703125, 1587.63134765625]}, "97": {"type": "Figure", "content": "train | PPL BLEU params\nN  dnodet deg h di, d, Parop Els steps | (dev) (dev) \u00ab108\n\nbase | 6 512 2048 8 64 64 0.1 O01 100K | 4.92 25.8 65\n1 512 512 5.29 24.9\n(A) 4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32. 16 ~\u2014 \u00ab16 5.01 25.4\n\n(B) 16 5.16 25.1 58\n\n32 5.01 25.4 60\n\n2 6.11 23.7 36\n\n4 5.19 25.3 50\n\n8 488 25.5 80\n\n(C) 256 32-32 5.75 24.5 28\n\n1024 128 128 466 26.0 168\n\n1024 5.12 254 53\n\n4096 475 26.2 90\n0.0 5.77 24.6\n0.2 495 25.5\n\u00a9) 0.0 467 253\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\n\nbig | 6 1024 4096 16 0.3 300K | 4.33 26.4 213\n\n", "chunk": "train | PPL BLEU params\nN  dnodet deg h di, d, Parop Els steps | (dev) (dev) \u00ab108\n\nbase | 6 512 2048 8 64 64 0.1 O01 100K | 4.92 25.8 65\n1 512 512 5.29 24.9\n(A) 4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32.", "page": 8, "bbox": [291.0591735839844, 339.8785400390625, 1391.3133544921875, 1087.0614013671875]}, "98": {"type": "Figure", "content": "train | PPL BLEU params\nN  dnodet deg h di, d, Parop Els steps | (dev) (dev) \u00ab108\n\nbase | 6 512 2048 8 64 64 0.1 O01 100K | 4.92 25.8 65\n1 512 512 5.29 24.9\n(A) 4 128 128 5.00 25.5\n16 32 32 4.91 25.8\n32. 16 ~\u2014 \u00ab16 5.01 25.4\n\n(B) 16 5.16 25.1 58\n\n32 5.01 25.4 60\n\n2 6.11 23.7 36\n\n4 5.19 25.3 50\n\n8 488 25.5 80\n\n(C) 256 32-32 5.75 24.5 28\n\n1024 128 128 466 26.0 168\n\n1024 5.12 254 53\n\n4096 475 26.2 90\n0.0 5.77 24.6\n0.2 495 25.5\n\u00a9) 0.0 467 253\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\n\nbig | 6 1024 4096 16 0.3 300K | 4.33 26.4 213\n\n", "chunk": "16 ~\u2014 \u00ab16 5.01 25.4\n\n(B) 16 5.16 25.1 58\n\n32 5.01 25.4 60\n\n2 6.11 23.7 36\n\n4 5.19 25.3 50\n\n8 488 25.5 80\n\n(C) 256 32-32 5.75 24.5 28\n\n1024 128 128 466 26.0 168\n\n1024 5.12 254 53\n\n4096 475 26.2 90\n0.0 5.77 24.6\n0.2 495 25.5\n\u00a9) 0.0 467 253\n0.2 5.47 25.7\n(E) positional embedding instead of sinusoids 4.92 25.7\n\nbig | 6 1024 4096 16 0.3 300K | 4.33 26.4 213", "page": 8, "bbox": [291.0591735839844, 339.8785400390625, 1391.3133544921875, 1087.0614013671875]}, "99": {"type": "Text", "content": "fable 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23\nyf WSJ)\n", "chunk": "fable 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23\nyf WSJ)", "page": 9, "bbox": [313.4276123046875, 197.0468292236328, 1395.510498046875, 250.22572326660156]}, "100": {"type": "Text", "content": "increased the maximum output length to input length + 300. We used a beam size of 21 and a = 0.3\nfor both WSJ only and the semi-supervised setting.\n", "chunk": "increased the maximum output length to input length + 300.\n\nWe used a beam size of 21 and a = 0.3\nfor both WSJ only and the semi-supervised setting.", "page": 9, "bbox": [307.5064697265625, 723.8626708984375, 1402.60302734375, 784.5220336914062]}, "101": {"type": "Text", "content": "Our results in Table 4 show that despite the lack of task-specific tuning our model performs sur-\nprisingly well, yielding better results than all previously reported models with the exception of the\nRecurrent Neural Network Grammar [8].\n", "chunk": "Our results in Table 4 show that despite the lack of task-specific tuning our model performs sur-\nprisingly well, yielding better results than all previously reported models with the exception of the\nRecurrent Neural Network Grammar [8].", "page": 9, "bbox": [302.6737976074219, 802.8319091796875, 1414.5291748046875, 894.6021118164062]}, "102": {"type": "Text", "content": "In contrast to RNN sequence-to-sequence models [37], the Transformer outperforms the Berkele\nParser [29] even when training only on the WSJ training set of 40K sentences.\n", "chunk": "In contrast to RNN sequence-to-sequence models [37], the Transformer outperforms the Berkele\nParser [29] even when training only on the WSJ training set of 40K sentences.", "page": 9, "bbox": [290.14117431640625, 910.4927978515625, 1382.4927978515625, 971.720947265625]}, "103": {"type": "Text", "content": "In this work, we presented the Transformer, the first sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.\n", "chunk": "In this work, we presented the Transformer, the first sequence transduction model based entirely on\nattention, replacing the recurrent layers most commonly used in encoder-decoder architectures with\nmulti-headed self-attention.", "page": 9, "bbox": [299.38653564453125, 1081.5145263671875, 1403.79833984375, 1169.124267578125]}, "104": {"type": "Text", "content": "For translation tasks, the Transformer can be trained significantly faster than architectures based\non recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art. In the former task our best\nmodel outperforms even all previously reported ensembles.\n", "chunk": "For translation tasks, the Transformer can be trained significantly faster than architectures based\non recurrent or convolutional layers.\n\nOn both WMT 2014 English-to-German and WMT 2014\nEnglish-to-French translation tasks, we achieve a new state of the art.\n\nIn the former task our best\nmodel outperforms even all previously reported ensembles.", "page": 9, "bbox": [300.47711181640625, 1187.361328125, 1402.181640625, 1308.7276611328125]}, "105": {"type": "Text", "content": "We are excited about the future of attention-based models and plan to apply them to other tasks. We\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs\nsuch as images, audio and video. Making generation less sequential is another research goals of ours.\n", "chunk": "We are excited about the future of attention-based models and plan to apply them to other tasks.\n\nWe\nplan to extend the Transformer to problems involving input and output modalities other than text and\nto investigate local, restricted attention mechanisms to efficiently handle large inputs and outputs\nsuch as images, audio and video.\n\nMaking generation less sequential is another research goals of ours.", "page": 9, "bbox": [297.7655029296875, 1325.2177734375, 1417.8319091796875, 1447.61669921875]}, "106": {"type": "Text", "content": "he code we used to train and evaluate our models is available at https://github.com/\nensorflow/tensor2tensor.\n", "chunk": "he code we used to train and evaluate our models is available at https://github.com/\nensorflow/tensor2tensor.", "page": 9, "bbox": [322.9478759765625, 1458.5465087890625, 1398.8074951171875, 1519.71240234375]}, "107": {"type": "Text", "content": "Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitfu\ncomments, corrections and inspiration.\n", "chunk": "Acknowledgements We are grateful to Nal Kalchbrenner and Stephan Gouws for their fruitfu\ncomments, corrections and inspiration.", "page": 9, "bbox": [301.9508972167969, 1552.6689453125, 1390.0977783203125, 1611.693359375]}, "108": {"type": "Text", "content": "|] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization. arXiv preprint\narXiv: 1607.06450, 2016.\n", "chunk": "|] Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton.\n\nLayer normalization.\n\narXiv preprint\narXiv: 1607.06450, 2016.", "page": 9, "bbox": [334.4048156738281, 1705.376953125, 1396.1865234375, 1770.767822265625]}, "109": {"type": "Text", "content": "[2] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly\nlearning to align and translate. CoRR, abs/1409.0473, 2014.\n", "chunk": "[2] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.\n\nNeural machine translation by jointly\nlearning to align and translate.\n\nCoRR, abs/1409.0473, 2014.", "page": 9, "bbox": [303.28558349609375, 1787.85595703125, 1397.6165771484375, 1847.3587646484375]}, "110": {"type": "Text", "content": "3] Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V. Le. Massive exploration of neural\nmachine translation architectures. CoRR, abs/1703.03906, 2017.\n", "chunk": "3] Denny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V. Le.\n\nMassive exploration of neural\nmachine translation architectures.\n\nCoRR, abs/1703.03906, 2017.", "page": 9, "bbox": [335.1725158691406, 1868.723876953125, 1395.9945068359375, 1926.85693359375]}, "111": {"type": "Text", "content": "4] Jianpeng Cheng, Li Dong, and Mirella Lapata. Long short-term memory-networks for machine\nreading. arXiv preprint arXiv: 1601.06733, 2016.\n", "chunk": "4] Jianpeng Cheng, Li Dong, and Mirella Lapata.\n\nLong short-term memory-networks for machine\nreading.\n\narXiv preprint arXiv: 1601.06733, 2016.", "page": 9, "bbox": [330.980712890625, 1949.572021484375, 1400.01806640625, 2006.99267578125]}, "112": {"type": "Title", "content": "References\n", "chunk": "References", "page": 9, "bbox": [297.8840026855469, 1658.103271484375, 456.62744140625, 1692.0428466796875]}, "113": {"type": "Title", "content": "Conclusion\n", "chunk": "Conclusion", "page": 9, "bbox": [345.34075927734375, 1013.8902587890625, 509.02960205078125, 1048.6558837890625]}, "114": {"type": "List", "content": "~ arXiv:1607.06450, 2016.\n\n[2]\n\n[3]\n\n[4]\n\nDzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly\nlearning to align and translate. CoRR, abs/1409.0473, 2014.\n\nDenny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V. Le. Massive exploration of neural\nmachine translation architectures. CoRR, abs/1703.03906, 2017.\n\nJianpeng Cheng, Li Dong, and Mirella Lapata. Long short-term memory-networks for machine\n", "chunk": "~ arXiv:1607.06450, 2016.\n\n[2]\n\n[3]\n\n[4]\n\nDzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio.\n\nNeural machine translation by jointly\nlearning to align and translate.\n\nCoRR, abs/1409.0473, 2014.\n\nDenny Britz, Anna Goldie, Minh-Thang Luong, and Quoc V. Le.\n\nMassive exploration of neural\nmachine translation architectures.\n\nCoRR, abs/1703.03906, 2017.\n\nJianpeng Cheng, Li Dong, and Mirella Lapata.\n\nLong short-term memory-networks for machine", "page": 9, "bbox": [312.20697021484375, 1735.6395263671875, 1402.5152587890625, 1981.4495849609375]}, "115": {"type": "Figure", "content": "Parser Training WSJ 23 F1\nVinyals & Kaiser el al. (2014) [37] | WSJ only, discriminative 88.3\nPetrov et al. (2006) [29] WSJ only, discriminative 90.4\nZhu et al. (2013) [40] WSJ only, discriminative 90.4\nDyer et al. (2016) [8] WSJ only, discriminative 91.7\nTransformer (4 layers) WSJ only, discriminative 91.3\nZhu et al. (2013) [40] semi-supervised 91.3\nHuang & Harper (2009) [14] semi-supervised 91.3\nMcClosky et al. (2006) [26] semi-supervised 92.1\nVinyals & Kaiser el al. (2014) [37] semi-supervised 92.1\nTransformer (4 layers) semi-supervised 92.7\nLuong et al. (2015) [23] multi-task 93.0\nDyer et al. (2016) [8] generative 93.3\n\n", "chunk": "Parser Training WSJ 23 F1\nVinyals & Kaiser el al.\n\n(2014) [37] | WSJ only, discriminative 88.3\nPetrov et al.\n\n(2006) [29] WSJ only, discriminative 90.4\nZhu et al.\n\n(2013) [40] WSJ only, discriminative 90.4\nDyer et al.\n\n(2016) [8] WSJ only, discriminative 91.7\nTransformer (4 layers) WSJ only, discriminative 91.3\nZhu et al.\n\n(2013) [40] semi-supervised 91.3\nHuang & Harper (2009) [14] semi-supervised 91.3\nMcClosky et al.\n\n(2006) [26] semi-supervised 92.1\nVinyals & Kaiser el al.", "page": 9, "bbox": [381.11187744140625, 236.29454040527344, 1314.10546875, 677.0079345703125]}, "116": {"type": "Figure", "content": "Parser Training WSJ 23 F1\nVinyals & Kaiser el al. (2014) [37] | WSJ only, discriminative 88.3\nPetrov et al. (2006) [29] WSJ only, discriminative 90.4\nZhu et al. (2013) [40] WSJ only, discriminative 90.4\nDyer et al. (2016) [8] WSJ only, discriminative 91.7\nTransformer (4 layers) WSJ only, discriminative 91.3\nZhu et al. (2013) [40] semi-supervised 91.3\nHuang & Harper (2009) [14] semi-supervised 91.3\nMcClosky et al. (2006) [26] semi-supervised 92.1\nVinyals & Kaiser el al. (2014) [37] semi-supervised 92.1\nTransformer (4 layers) semi-supervised 92.7\nLuong et al. (2015) [23] multi-task 93.0\nDyer et al. (2016) [8] generative 93.3\n\n", "chunk": "(2014) [37] semi-supervised 92.1\nTransformer (4 layers) semi-supervised 92.7\nLuong et al.\n\n(2015) [23] multi-task 93.0\nDyer et al.\n\n(2016) [8] generative 93.3", "page": 9, "bbox": [381.11187744140625, 236.29454040527344, 1314.10546875, 677.0079345703125]}, "117": {"type": "Text", "content": "Junyoung Chung, Caglar Giilgehre, Kyunghyun Cho, and Yoshua Bengio. Empirical evaluatior\nof gated recurrent neural networks on sequence modeling. CoRR, abs/1412.3555, 2014.\n", "chunk": "Junyoung Chung, Caglar Giilgehre, Kyunghyun Cho, and Yoshua Bengio.\n\nEmpirical evaluatior\nof gated recurrent neural networks on sequence modeling.\n\nCoRR, abs/1412.3555, 2014.", "page": 10, "bbox": [359.3238830566406, 406.59588623046875, 1390.7396240234375, 466.1162414550781]}, "118": {"type": "Text", "content": "[9] Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin. Convolu-\ntional sequence to sequence learning. arXiv preprint arXiv: 1705.03 122v2, 2017.\n", "chunk": "[9] Jonas Gehring, Michael Auli, David Grangier, Denis Yarats, and Yann N. Dauphin.\n\nConvolu-\ntional sequence to sequence learning.\n\narXiv preprint arXiv: 1705.03 122v2, 2017.", "page": 10, "bbox": [320.7587890625, 576.9111938476562, 1405.7913818359375, 637.63818359375]}, "119": {"type": "Text", "content": "1] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for im-\nage recognition. In Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition, pages 770-778, 2016.\n", "chunk": "1] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.\n\nDeep residual learning for im-\nage recognition.\n\nIn Proceedings of the IEEE Conference on Computer Vision and Pattern\nRecognition, pages 770-778, 2016.", "page": 10, "bbox": [325.41461181640625, 750.058837890625, 1412.544189453125, 837.6389770507812]}, "120": {"type": "Text", "content": "2] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and Jiirgen Schmidhuber. Gradient flow in\nrecurrent nets: the difficulty of learning long-term dependencies, 2001.\n", "chunk": "2] Sepp Hochreiter, Yoshua Bengio, Paolo Frasconi, and Jiirgen Schmidhuber.\n\nGradient flow in\nrecurrent nets: the difficulty of learning long-term dependencies, 2001.", "page": 10, "bbox": [330.7262878417969, 864.1796875, 1398.18408203125, 923.1452026367188]}, "121": {"type": "Text", "content": "4] Zhongqiang Huang and Mary Harper. Self-training PCFG grammars with latent annotations\nacross languages. In Proceedings of the 2009 Conference on Empirical Methods in Natural\nLanguage Processing, pages 832-841. ACL, August 2009.\n", "chunk": "4] Zhongqiang Huang and Mary Harper.\n\nSelf-training PCFG grammars with latent annotations\nacross languages.\n\nIn Proceedings of the 2009 Conference on Empirical Methods in Natural\nLanguage Processing, pages 832-841.\n\nACL, August 2009.", "page": 10, "bbox": [325.1598205566406, 1031.16650390625, 1410.93798828125, 1124.330078125]}, "122": {"type": "Text", "content": "15] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. Exploring\nthe limits of language modeling. arXiv preprint arXiv: 1602.02410, 2016.\n", "chunk": "15] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu.\n\nExploring\nthe limits of language modeling.\n\narXiv preprint arXiv: 1602.02410, 2016.", "page": 10, "bbox": [317.1338195800781, 1150.03759765625, 1391.230224609375, 1209.8690185546875]}, "123": {"type": "Text", "content": "[19] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. Structured attention networks\nIn International Conference on Learning Representations, 2017.\n", "chunk": "[19] Yoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush.\n\nStructured attention networks\nIn International Conference on Learning Representations, 2017.", "page": 10, "bbox": [306.3481750488281, 1521.570068359375, 1389.91162109375, 1580.0133056640625]}, "124": {"type": "Text", "content": "20] Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In JCLR, 2015\n", "chunk": "20] Diederik Kingma and Jimmy Ba.\n\nAdam: A method for stochastic optimization.\n\nIn JCLR, 2015", "page": 10, "bbox": [318.13104248046875, 1606.18115234375, 1389.0904541015625, 1636.6326904296875]}, "125": {"type": "Text", "content": "Minh-Thang Luong, Hieu Pham, and Christopher D Manning. Effective approaches to attention\nbased neural machine translation. arXiv preprint arXiv: 1508.04025, 2015.\n", "chunk": "Minh-Thang Luong, Hieu Pham, and Christopher D Manning.\n\nEffective approaches to attention\nbased neural machine translation.\n\narXiv preprint arXiv: 1508.04025, 2015.", "page": 10, "bbox": [354.8324890136719, 1949.131591796875, 1389.1925048828125, 2006.346923828125]}, "126": {"type": "Text", "content": "[28] Romain Paulus, Caiming Xiong, and Richard Socher. A deep reinforced model for abstractive\nsummarization. arXiv preprint arXiv: 1705.04304, 2017.\n", "chunk": "[28] Romain Paulus, Caiming Xiong, and Richard Socher.\n\nA deep reinforced model for abstractive\nsummarization.\n\narXiv preprint arXiv: 1705.04304, 2017.", "page": 11, "bbox": [294.70977783203125, 522.083740234375, 1404.6148681640625, 583.8314819335938]}, "127": {"type": "Text", "content": "30] Ofir Press and Lior Wolf. Using the output embedding to improve language models. arXi\npreprint arXiv: 1608.05859, 2016.\n", "chunk": "30] Ofir Press and Lior Wolf.\n\nUsing the output embedding to improve language models.\n\narXi\npreprint arXiv: 1608.05859, 2016.", "page": 11, "bbox": [316.8957214355469, 775.132080078125, 1386.96337890625, 834.546875]}, "128": {"type": "Text", "content": "31] Rico Sennrich, Barry Haddow, and Alexandra Birch. Neural machine translation of rare word\nwith subword units. arXiv preprint arXiv: 1508.07909, 2015.\n", "chunk": "31] Rico Sennrich, Barry Haddow, and Alexandra Birch.\n\nNeural machine translation of rare word\nwith subword units.\n\narXiv preprint arXiv: 1508.07909, 2015.", "page": 11, "bbox": [314.85760498046875, 869.5985717773438, 1386.732421875, 930.7125244140625]}, "129": {"type": "Text", "content": "4] Sainbayar Sukhbaatar, Arthur Szlam, Jason Weston, and Rob Fergus. End-to-end memory\nnetworks. In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28, pages 2440-2448. Curran Associates,\nInc., 2015.\n", "chunk": "4] Sainbayar Sukhbaatar, Arthur Szlam, Jason Weston, and Rob Fergus.\n\nEnd-to-end memory\nnetworks.\n\nIn C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors,\nAdvances in Neural Information Processing Systems 28, pages 2440-2448.\n\nCurran Associates,\nInc., 2015.", "page": 11, "bbox": [331.5602722167969, 1216.6397705078125, 1406.224853515625, 1331.4971923828125]}, "130": {"type": "Text", "content": "[36] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna\nRethinking the inception architecture for computer vision. CoRR, abs/1512.00567, 2015.\n", "chunk": "[36] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna\nRethinking the inception architecture for computer vision.\n\nCoRR, abs/1512.00567, 2015.", "page": 11, "bbox": [308.8005065917969, 1468.2142333984375, 1396.38671875, 1528.9036865234375]}, "131": {"type": "Text", "content": "[39] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu. Deep recurrent models with\nfast-forward connections for neural machine translation. CoRR, abs/1606.04199, 2016.\n", "chunk": "[39] Jie Zhou, Ying Cao, Xuguang Wang, Peng Li, and Wei Xu.\n\nDeep recurrent models with\nfast-forward connections for neural machine translation.\n\nCoRR, abs/1606.04199, 2016.", "page": 11, "bbox": [293.9527893066406, 1815.8966064453125, 1425.8023681640625, 1876.3736572265625]}, "132": {"type": "Text", "content": "40] Muhua Zhu, Yue Zhang, Wenliang Chen, Min Zhang, and Jingbo Zhu. Fast and accurate\nshift-reduce constituent parsing. In Proceedings of the 51st Annual Meeting of the ACL (Volume\n1: Long Papers), pages 434-443. ACL, August 2013.\n", "chunk": "40] Muhua Zhu, Yue Zhang, Wenliang Chen, Min Zhang, and Jingbo Zhu.\n\nFast and accurate\nshift-reduce constituent parsing.\n\nIn Proceedings of the 51st Annual Meeting of the ACL (Volume\n1: Long Papers), pages 434-443.\n\nACL, August 2013.", "page": 11, "bbox": [317.7989196777344, 1911.6929931640625, 1398.3310546875, 2000.2413330078125]}, "133": {"type": "Text", "content": "Figure 3: An example of the attention mechanism following long-distance dependencies in the\nencoder self-attention in layer 5 of 6. Many of the attention heads attend to a distant dependency of\nthe verb \u2018making\u2019, completing the phrase \u2018making...more difficult\u2019. Attentions here shown only for\nthe word \u2018making\u2019. Different colors represent different heads. Best viewed in color.\n", "chunk": "Figure 3: An example of the attention mechanism following long-distance dependencies in the\nencoder self-attention in layer 5 of 6.\n\nMany of the attention heads attend to a distant dependency of\nthe verb \u2018making\u2019, completing the phrase \u2018making...more difficult\u2019.\n\nAttentions here shown only for\nthe word \u2018making\u2019.\n\nDifferent colors represent different heads.\n\nBest viewed in color.", "page": 12, "bbox": [299.3720703125, 863.2484130859375, 1412.796630859375, 987.506591796875]}, "134": {"type": "Figure", "content": "<ped>\n<ped>\n<ped>\n<ped>\n<ped>\n<ped>\n<SOa>\n\nyNoWyIp\nao\nsseooid\nBuon\n\nJo\nuonesjs|6e.\nour\nBupyew\n6002\naouls\nSMe|\n\nmeu\npassed\naaey\ns}u@WwU2eA06\nueouewy\njo\nAywofew\ne\n\nyeuy\n\nquids\n\nssaooid\nBuon\nJo\nuonejsibes\nau\n\nBuryew\n\n6002\n\naouls\n\nSMe|\n\nMau\n\npassed\n\naney\ns}UaWUJaA0B\nueovewy\n\njo\n\nAyuofew\n\n", "chunk": "<ped>\n<ped>\n<ped>\n<ped>\n<ped>\n<ped>\n<SOa>\n\nyNoWyIp\nao\nsseooid\nBuon\n\nJo\nuonesjs|6e.\n\nour\nBupyew\n6002\naouls\nSMe|\n\nmeu\npassed\naaey\ns}u@WwU2eA06\nueouewy\njo\nAywofew\ne\n\nyeuy\n\nquids\n\nssaooid\nBuon\nJo\nuonejsibes\nau\n\nBuryew\n\n6002\n\naouls\n\nSMe|\n\nMau\n\npassed\n\naney\ns}UaWUJaA0B\nueovewy\n\njo\n\nAyuofew", "page": 12, "bbox": [329.0137634277344, 228.7625732421875, 1394.1082763671875, 845.949462890625]}, "135": {"type": "Text", "content": "Figure 4: Two attention heads, also in layer 5 of 6, apparently involved in anaphora resolution. Top:\nFull attentions for head 5. Bottom: Isolated attentions from just the word \u2018its\u2019 for attention heads 5\nand 6. Note that the attentions are very sharp for this word.\n", "chunk": "Figure 4: Two attention heads, also in layer 5 of 6, apparently involved in anaphora resolution.\n\nTop:\nFull attentions for head 5.\n\nBottom: Isolated attentions from just the word \u2018its\u2019 for attention heads 5\nand 6.\n\nNote that the attentions are very sharp for this word.", "page": 13, "bbox": [301.30816650390625, 1703.60302734375, 1401.0902099609375, 1794.7647705078125]}, "136": {"type": "Figure", "content": "<ped> <ped> eee el ae\n\u00abS03 \u2014 80 <SOa> <SOa4>\nUO|UIGO = ~- uoluldo uoluldo uoluido\nhw a Aw : Aw Aw\nul ul ul ul\nBUSS] nr BUISSILU Buss! Burssiw\nale \u00ab 2a. 1e oe ove\nam- am aM om\nyeyM= yeum yEUM yeum\nSs! oe. Ss! SI S|\nsi siu) siy} sin\n1s7[\u2014\u2014_\u2014$ $$ snf ysnf ysnf\neqs eq eq eq\nPinoys Pinoys pinoys Pinoys\nuoleol|dde uoneoldde uojeojdde uoneoidde\nsi sy si\n\ninq inq\n\n\u2018 \u2018\n\ninq\n\npojod\n3q\n\npooped oped\n3q\nJOAQU\n\nmeq\noul oul\n", "chunk": "<ped> <ped> eee el ae\n\u00abS03 \u2014 80 <SOa> <SOa4>\nUO|UIGO = ~- uoluldo uoluldo uoluido\nhw a Aw : Aw Aw\nul ul ul ul\nBUSS] nr BUISSILU Buss!\n\nBurssiw\nale \u00ab 2a.\n\n1e oe ove\nam- am aM om\nyeyM= yeum yEUM yeum\nSs!\n\noe.\n\nSs!\n\nSI S|\nsi siu) siy} sin\n1s7[\u2014\u2014_\u2014$ $$ snf ysnf ysnf\neqs eq eq eq\nPinoys Pinoys pinoys Pinoys\nuoleol|dde uoneoldde uojeojdde uoneoidde\nsi sy si\n\ninq inq\n\n\u2018 \u2018\n\ninq\n\npojod\n3q\n\npooped oped\n3q\nJOAQU\n\nmeq\noul oul", "page": 13, "bbox": [335.77471923828125, 430.8834228515625, 1372.376708984375, 1663.42578125]}, "137": {"type": "Text", "content": "Figure 5: Many of the attention heads exhibit behaviour that seems related to the structure of the\nsentence. We give two such examples above, from two different heads from the encoder self-attention\nat layer 5 of 6. The heads clearly learned to perform different tasks.\n", "chunk": "Figure 5: Many of the attention heads exhibit behaviour that seems related to the structure of the\nsentence.\n\nWe give two such examples above, from two different heads from the encoder self-attention\nat layer 5 of 6.\n\nThe heads clearly learned to perform different tasks.", "page": 14, "bbox": [300.050537109375, 1670.28369140625, 1402.58056640625, 1762.3756103515625]}, "138": {"type": "Figure", "content": "uojeoljdde\n\n<ped> <ped>\n\n<SOA>\\ <SO4>\n\nUO!UIdO =. uo|uido\nAw Aw\n\nul ul\n\nBulssiw -\nale\n\nyeum yeum\nSI SI\nsiu} siuy\nv/a ysnf\naq\n\npinoys * pjnoys\nuoeoidde\n\nsi\n\n<ped> <ped>\n<SOd> \u2014_\u2014_\u2014_\u2014_ 0\u201d\nUOIUIGO = uoluido\nAw Aw\nul ul\nBurssiw Burssiw\nae ae\naM aM\nyeum yeum\nsl sl\nsly} # SIU}\n= -\nysnf ol\naq aq\nPinoys \u00ab Pinoys\n\nuoneodde a uoneoiddr\nSs}! Ss}!\ning an ing\npooped \u2014 5 poped\n3q 3q\nJOAau JOAau\nIM IM\n\nil\nau aul\n", "chunk": "uojeoljdde\n\n<ped> <ped>\n\n<SOA>\\ <SO4>\n\nUO!UIdO =.\n\nuo|uido\nAw Aw\n\nul ul\n\nBulssiw -\nale\n\nyeum yeum\nSI SI\nsiu} siuy\nv/a ysnf\naq\n\npinoys * pjnoys\nuoeoidde\n\nsi\n\n<ped> <ped>\n<SOd> \u2014_\u2014_\u2014_\u2014_ 0\u201d\nUOIUIGO = uoluido\nAw Aw\nul ul\nBurssiw Burssiw\nae ae\naM aM\nyeum yeum\nsl sl\nsly} # SIU}\n= -\nysnf ol\naq aq\nPinoys \u00ab Pinoys\n\nuoneodde a uoneoiddr\nSs}!\n\nSs}!\n\ning an ing\npooped \u2014 5 poped\n3q 3q\nJOAau JOAau\nIM IM\n\nil\nau aul", "page": 14, "bbox": [320.40472412109375, 453.25177001953125, 1385.9766845703125, 1626.751708984375]}}